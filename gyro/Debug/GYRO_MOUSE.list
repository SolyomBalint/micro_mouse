
GYRO_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800792c  0800792c  00009178  2**0
                  CONTENTS
  4 .ARM          00000008  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007934  08007934  00009178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007934  08007934  00008934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  0800793c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009178  2**0
                  CONTENTS
 10 .bss          00000b90  20000178  20000178  00009178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d08  20000d08  00009178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d77  00000000  00000000  000091a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df4  00000000  00000000  00019f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0001cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a63  00000000  00000000  0001dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e95  00000000  00000000  0001e54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124e0  00000000  00000000  000443e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7687  00000000  00000000  000568c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012df47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e2c  00000000  00000000  0012df8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00131db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000178 	.word	0x20000178
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080078ac 	.word	0x080078ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000017c 	.word	0x2000017c
 80001e8:	080078ac 	.word	0x080078ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_write>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	 HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	68b9      	ldr	r1, [r7, #8]
 80004f2:	4804      	ldr	r0, [pc, #16]	@ (8000504 <_write+0x28>)
 80004f4:	f002 fcee 	bl	8002ed4 <HAL_UART_Transmit>
}
 80004f8:	bf00      	nop
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000194 	.word	0x20000194

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa6e 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8ac 	bl	8000670 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f880 	bl	800061c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800051c:	f006 f8dc 	bl	80066d8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("geci\r\n");
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <main+0x38>)
 8000522:	f006 fedb 	bl	80072dc <puts>
	  fflush(stdout);
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <main+0x3c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4618      	mov	r0, r3
 800052e:	f006 fda9 	bl	8007084 <fflush>
	  HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000536:	f000 facb 	bl	8000ad0 <HAL_Delay>
	  printf("geci\r\n");
 800053a:	bf00      	nop
 800053c:	e7f0      	b.n	8000520 <main+0x18>
 800053e:	bf00      	nop
 8000540:	080078c4 	.word	0x080078c4
 8000544:	20000128 	.word	0x20000128

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 ffa0 	bl	800749c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	@ 0xa8
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 ff99 	bl	8002504 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f894 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f9fa 	bl	80029f4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f87d 	bl	8000704 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_USART1_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_USART1_UART_Init+0x4c>)
 8000654:	f002 fbee 	bl	8002e34 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f851 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000194 	.word	0x20000194
 800066c:	40011000 	.word	0x40011000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_GPIO_Init+0x8c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <MX_GPIO_Init+0x8c>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_GPIO_Init+0x8c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_GPIO_Init+0x8c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_GPIO_Init+0x90>)
 80006ee:	f000 fb25 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000724:	6453      	str	r3, [r2, #68]	@ 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	@ 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <HAL_UART_MspInit+0x84>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d12c      	bne.n	80007dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a10      	ldr	r2, [pc, #64]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <HAL_UART_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007cc:	2307      	movs	r3, #7
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <HAL_UART_MspInit+0x8c>)
 80007d8:	f000 fab0 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40011000 	.word	0x40011000
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <UsageFault_Handler+0x4>

08000818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000846:	f000 f923 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000854:	4802      	ldr	r0, [pc, #8]	@ (8000860 <OTG_HS_IRQHandler+0x10>)
 8000856:	f000 fd61 	bl	800131c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200006c4 	.word	0x200006c4

08000864 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e00a      	b.n	800088c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000876:	f3af 8000 	nop.w
 800087a:	4601      	mov	r1, r0
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	b2ca      	uxtb	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf0      	blt.n	8000876 <_read+0x12>
  }

  return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_close>:
  }
  return len;
}

int _close(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c6:	605a      	str	r2, [r3, #4]
  return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_isatty>:

int _isatty(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f006 fdfe 	bl	8007538 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20030000 	.word	0x20030000
 8000968:	00000400 	.word	0x00000400
 800096c:	200001dc 	.word	0x200001dc
 8000970:	20000d08 	.word	0x20000d08

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099c:	f7ff ffea 	bl	8000974 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f006 fdbd 	bl	8007544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd9d 	bl	8000508 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80009dc:	0800793c 	.word	0x0800793c
  ldr r2, =_sbss
 80009e0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80009e4:	20000d08 	.word	0x20000d08

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f94f 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fe76 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f967 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f92f 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200001e0 	.word	0x200001e0

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200001e0 	.word	0x200001e0

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e177      	b.n	8001048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8166 	bne.w	8001042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80c0 	beq.w	8001042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b66      	ldr	r3, [pc, #408]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a65      	ldr	r2, [pc, #404]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b63      	ldr	r3, [pc, #396]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a61      	ldr	r2, [pc, #388]	@ (8001064 <HAL_GPIO_Init+0x328>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a58      	ldr	r2, [pc, #352]	@ (8001068 <HAL_GPIO_Init+0x32c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d037      	beq.n	8000f7a <HAL_GPIO_Init+0x23e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a57      	ldr	r2, [pc, #348]	@ (800106c <HAL_GPIO_Init+0x330>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d031      	beq.n	8000f76 <HAL_GPIO_Init+0x23a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a56      	ldr	r2, [pc, #344]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d02b      	beq.n	8000f72 <HAL_GPIO_Init+0x236>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a55      	ldr	r2, [pc, #340]	@ (8001074 <HAL_GPIO_Init+0x338>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d025      	beq.n	8000f6e <HAL_GPIO_Init+0x232>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a54      	ldr	r2, [pc, #336]	@ (8001078 <HAL_GPIO_Init+0x33c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01f      	beq.n	8000f6a <HAL_GPIO_Init+0x22e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a53      	ldr	r2, [pc, #332]	@ (800107c <HAL_GPIO_Init+0x340>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x22a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a52      	ldr	r2, [pc, #328]	@ (8001080 <HAL_GPIO_Init+0x344>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a51      	ldr	r2, [pc, #324]	@ (8001084 <HAL_GPIO_Init+0x348>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x222>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a50      	ldr	r2, [pc, #320]	@ (8001088 <HAL_GPIO_Init+0x34c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x21e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <HAL_GPIO_Init+0x350>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f52:	2309      	movs	r3, #9
 8000f54:	e012      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f56:	230a      	movs	r3, #10
 8000f58:	e010      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	e00e      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x240>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	@ (8001064 <HAL_GPIO_Init+0x328>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a34      	ldr	r2, [pc, #208]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a29      	ldr	r2, [pc, #164]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <HAL_GPIO_Init+0x354>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_GPIO_Init+0x354>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <HAL_GPIO_Init+0x354>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f ae84 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40021400 	.word	0x40021400
 8001080:	40021800 	.word	0x40021800
 8001084:	40021c00 	.word	0x40021c00
 8001088:	40022000 	.word	0x40022000
 800108c:	40022400 	.word	0x40022400
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e101      	b.n	80012aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f005 fc2f 	bl	8006924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010d4:	d102      	bne.n	80010dc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fbca 	bl	800387a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7c1a      	ldrb	r2, [r3, #16]
 80010ee:	f88d 2000 	strb.w	r2, [sp]
 80010f2:	3304      	adds	r3, #4
 80010f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f6:	f002 faa9 	bl	800364c <USB_CoreInit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2202      	movs	r2, #2
 8001104:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0ce      	b.n	80012aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fbc2 	bl	800389c <USB_SetCurrentMode>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0bf      	b.n	80012aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e04a      	b.n	80011c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3315      	adds	r3, #21
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3314      	adds	r3, #20
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	b298      	uxth	r0, r3
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	332e      	adds	r3, #46	@ 0x2e
 800116c:	4602      	mov	r2, r0
 800116e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3318      	adds	r3, #24
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	331c      	adds	r3, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	3320      	adds	r3, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3324      	adds	r3, #36	@ 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	3301      	adds	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3af      	bcc.n	8001130 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e044      	b.n	8001260 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	791b      	ldrb	r3, [r3, #4]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3b5      	bcc.n	80011d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7c1a      	ldrb	r2, [r3, #16]
 8001272:	f88d 2000 	strb.w	r2, [sp]
 8001276:	3304      	adds	r3, #4
 8001278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127a:	f002 fb5b 	bl	8003934 <USB_DevInit>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e00c      	b.n	80012aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fb9f 	bl	80049e6 <USB_DevDisconnect>

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_PCD_Start+0x1c>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e022      	b.n	8001314 <HAL_PCD_Start+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 faac 	bl	8003858 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fb4d 	bl	80049a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b08d      	sub	sp, #52	@ 0x34
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fc0b 	bl	8004b4e <USB_GetMode>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 848c 	bne.w	8001c58 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fb6f 	bl	8004a28 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8482 	beq.w	8001c56 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fb5c 	bl	8004a28 <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f002 0202 	and.w	r2, r2, #2
 8001388:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fb4a 	bl	8004a28 <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b10      	cmp	r3, #16
 800139c:	d161      	bne.n	8001462 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0210 	bic.w	r2, r2, #16
 80013ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 020f 	and.w	r2, r3, #15
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	0c5b      	lsrs	r3, r3, #17
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d124      	bne.n	8001424 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d035      	beq.n	8001452 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	6a38      	ldr	r0, [r7, #32]
 80013fa:	f003 f981 	bl	8004700 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140a:	441a      	add	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	441a      	add	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	e016      	b.n	8001452 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	0c5b      	lsrs	r3, r3, #17
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2b06      	cmp	r3, #6
 800142e:	d110      	bne.n	8001452 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001436:	2208      	movs	r2, #8
 8001438:	4619      	mov	r1, r3
 800143a:	6a38      	ldr	r0, [r7, #32]
 800143c:	f003 f960 	bl	8004700 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144c:	441a      	add	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0210 	orr.w	r2, r2, #16
 8001460:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fade 	bl	8004a28 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001472:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001476:	f040 80a7 	bne.w	80015c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fae3 	bl	8004a4e <USB_ReadDevAllOutEpInterrupt>
 8001488:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800148a:	e099      	b.n	80015c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 808e 	beq.w	80015b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fb07 	bl	8004ab6 <USB_ReadDevOutEPInterrupt>
 80014a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00c      	beq.n	80014ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fe89 	bl	80021e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2308      	movs	r3, #8
 80014e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 ff5f 	bl	80023b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2310      	movs	r3, #16
 800150c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d030      	beq.n	800157a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001520:	2b80      	cmp	r3, #128	@ 0x80
 8001522:	d109      	bne.n	8001538 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	3304      	adds	r3, #4
 800154c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f005 fae0 	bl	8006b28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	2302      	movs	r3, #2
 8001578:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001590:	461a      	mov	r2, r3
 8001592:	2320      	movs	r3, #32
 8001594:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ac:	461a      	mov	r2, r3
 80015ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	3301      	adds	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f af62 	bne.w	800148c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fa2b 	bl	8004a28 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015dc:	f040 80db 	bne.w	8001796 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fa4c 	bl	8004a82 <USB_ReadDevAllInEpInterrupt>
 80015ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015f0:	e0cd      	b.n	800178e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80c2 	beq.w	8001782 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fa72 	bl	8004af2 <USB_ReadDevInEPInterrupt>
 800160e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d057      	beq.n	80016ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	69f9      	ldr	r1, [r7, #28]
 8001636:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800163a:	4013      	ands	r3, r2
 800163c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	015a      	lsls	r2, r3, #5
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	4413      	add	r3, r2
 8001646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	799b      	ldrb	r3, [r3, #6]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d132      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3320      	adds	r3, #32
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4403      	add	r3, r0
 8001678:	331c      	adds	r3, #28
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4419      	add	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4403      	add	r3, r0
 800168c:	3320      	adds	r3, #32
 800168e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	2b00      	cmp	r3, #0
 8001694:	d113      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3324      	adds	r3, #36	@ 0x24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b6:	461a      	mov	r2, r3
 80016b8:	2101      	movs	r1, #1
 80016ba:	f003 fa79 	bl	8004bb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f005 f9aa 	bl	8006a1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016e0:	461a      	mov	r2, r3
 80016e2:	2308      	movs	r3, #8
 80016e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fc:	461a      	mov	r2, r3
 80016fe:	2310      	movs	r3, #16
 8001700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	4413      	add	r3, r2
 8001714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001718:	461a      	mov	r2, r3
 800171a:	2340      	movs	r3, #64	@ 0x40
 800171c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d023      	beq.n	8001770 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800172a:	6a38      	ldr	r0, [r7, #32]
 800172c:	f002 fa66 	bl	8003bfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3310      	adds	r3, #16
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2200      	movs	r2, #0
 8001750:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 f9f7 	bl	8006b4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800176a:	461a      	mov	r2, r3
 800176c:	2302      	movs	r3, #2
 800176e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800177a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fca3 	bl	80020c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	3301      	adds	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800178e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f af2e 	bne.w	80015f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f944 	bl	8004a28 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017aa:	d122      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d108      	bne.n	80017dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fe89 	bl	80024ec <HAL_PCDEx_LPM_Callback>
 80017da:	e002      	b.n	80017e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f005 f995 	bl	8006b0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f916 	bl	8004a28 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001806:	d112      	bne.n	800182e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f005 f951 	bl	8006ac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800182c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 f8f8 	bl	8004a28 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001842:	f040 80b7 	bne.w	80019b4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2110      	movs	r1, #16
 8001860:	4618      	mov	r0, r3
 8001862:	f002 f9cb 	bl	8003bfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186a:	e046      	b.n	80018fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001878:	461a      	mov	r2, r3
 800187a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800187e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001890:	0151      	lsls	r1, r2, #5
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	440a      	add	r2, r1
 8001896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800189a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800189e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018ac:	461a      	mov	r2, r3
 80018ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c4:	0151      	lsls	r1, r2, #5
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	440a      	add	r2, r1
 80018ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e4:	0151      	lsls	r1, r2, #5
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	440a      	add	r2, r1
 80018ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	3301      	adds	r3, #1
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001902:	4293      	cmp	r3, r2
 8001904:	d3b2      	bcc.n	800186c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001914:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001918:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7bdb      	ldrb	r3, [r3, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001932:	f043 030b 	orr.w	r3, r3, #11
 8001936:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001948:	f043 030b 	orr.w	r3, r3, #11
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	e015      	b.n	800197c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001962:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001966:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001976:	f043 030b 	orr.w	r3, r3, #11
 800197a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800198a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800198e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199e:	461a      	mov	r2, r3
 80019a0:	f003 f906 	bl	8004bb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f835 	bl	8004a28 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019c8:	d123      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 f8cb 	bl	8004b6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 f988 	bl	8003cee <USB_GetDevSpeed>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681c      	ldr	r4, [r3, #0]
 80019ea:	f001 f9ef 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 80019ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f4:	461a      	mov	r2, r3
 80019f6:	4620      	mov	r0, r4
 80019f8:	f001 fe8c 	bl	8003714 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f005 f836 	bl	8006a6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f806 	bl	8004a28 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d10a      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f005 f813 	bl	8006a52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f002 0208 	and.w	r2, r2, #8
 8001a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fff1 	bl	8004a28 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4c:	2b80      	cmp	r3, #128	@ 0x80
 8001a4e:	d123      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e014      	b.n	8001a8c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 faf0 	bl	8002066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d3e4      	bcc.n	8001a62 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 ffc3 	bl	8004a28 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aac:	d13c      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab2:	e02b      	b.n	8001b0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d115      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ada:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da12      	bge.n	8001b06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	3317      	adds	r3, #23
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fab0 	bl	8002066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	791b      	ldrb	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d3cd      	bcc.n	8001ab4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 ff7b 	bl	8004a28 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b3c:	d156      	bne.n	8001bec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b42:	e045      	b.n	8001bd0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d12e      	bne.n	8001bca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da2b      	bge.n	8001bca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d121      	bne.n	8001bca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc6:	6053      	str	r3, [r2, #4]
            break;
 8001bc8:	e008      	b.n	8001bdc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d3b3      	bcc.n	8001b44 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 ff19 	bl	8004a28 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c00:	d10a      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f004 ffb4 	bl	8006b70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 ff03 	bl	8004a28 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d115      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f004 ffa4 	bl	8006b8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	e000      	b.n	8001c58 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c56:	bf00      	nop
    }
  }
}
 8001c58:	3734      	adds	r7, #52	@ 0x34
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_PCD_SetAddress+0x1a>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e012      	b.n	8001c9e <HAL_PCD_SetAddress+0x40>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fe62 	bl	8004958 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	4608      	mov	r0, r1
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	803b      	strh	r3, [r7, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0f      	bge.n	8001cec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3310      	adds	r3, #16
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00f      	b.n	8001d0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d18:	883a      	ldrh	r2, [r7, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	78ba      	ldrb	r2, [r7, #2]
 8001d22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d36:	78bb      	ldrb	r3, [r7, #2]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d102      	bne.n	8001d42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_PCD_EP_Open+0xaa>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e00e      	b.n	8001d6e <HAL_PCD_EP_Open+0xc8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 ffea 	bl	8003d38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da0f      	bge.n	8001daa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	3310      	adds	r3, #16
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3304      	adds	r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	705a      	strb	r2, [r3, #1]
 8001da8:	e00f      	b.n	8001dca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_EP_Close+0x6e>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_Close+0x8c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 f828 	bl	8003e48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	460b      	mov	r3, r1
 8001e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	3304      	adds	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	799b      	ldrb	r3, [r3, #6]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	799b      	ldrb	r3, [r3, #6]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	f002 f8c5 	bl	8004000 <USB_EPStartXfer>

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	799b      	ldrb	r3, [r3, #6]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d102      	bne.n	8001eda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	799b      	ldrb	r3, [r3, #6]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	f002 f88b 	bl	8004000 <USB_EPStartXfer>

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	7912      	ldrb	r2, [r2, #4]
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e04f      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0f      	bge.n	8001f3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3310      	adds	r3, #16
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	705a      	strb	r2, [r3, #1]
 8001f38:	e00d      	b.n	8001f56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_SetStall+0x82>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01d      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0xbe>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fc13 	bl	80047b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7999      	ldrb	r1, [r3, #6]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f002 fe04 	bl	8004bb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	7912      	ldrb	r2, [r2, #4]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e042      	b.n	800205e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da0f      	bge.n	8002000 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3310      	adds	r3, #16
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	705a      	strb	r2, [r3, #1]
 8001ffe:	e00f      	b.n	8002020 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_EP_ClrStall+0x86>
 800203c:	2302      	movs	r3, #2
 800203e:	e00e      	b.n	800205e <HAL_PCD_EP_ClrStall+0xa4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fc1c 	bl	800488c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0c      	bge.n	8002094 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3310      	adds	r3, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e00c      	b.n	80020ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fa3b 	bl	8004530 <USB_EPStopXfer>
 80020ba:	4603      	mov	r3, r0
 80020bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020be:	7afb      	ldrb	r3, [r7, #11]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	3310      	adds	r3, #16
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d901      	bls.n	8002100 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e06b      	b.n	80021d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	429a      	cmp	r2, r3
 8002114:	d902      	bls.n	800211c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3303      	adds	r3, #3
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002124:	e02a      	b.n	800217c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d902      	bls.n	8002142 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3303      	adds	r3, #3
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f002 fa90 	bl	8004684 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	d809      	bhi.n	80021a6 <PCD_WriteEmptyTxFifo+0xde>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800219a:	429a      	cmp	r2, r3
 800219c:	d203      	bcs.n	80021a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1bf      	bne.n	8002126 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d811      	bhi.n	80021d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2201      	movs	r2, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021d2:	4013      	ands	r3, r2
 80021d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	333c      	adds	r3, #60	@ 0x3c
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d17b      	bne.n	800230e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	f240 80b9 	bls.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b3 	beq.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002242:	461a      	mov	r2, r3
 8002244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e0a7      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002262:	461a      	mov	r2, r3
 8002264:	2320      	movs	r3, #32
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e098      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 8093 	bne.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d90f      	bls.n	800229e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229a:	6093      	str	r3, [r2, #8]
 800229c:	e07e      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	440b      	add	r3, r1
 80022c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d114      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	f002 fc60 	bl	8004bb0 <USB_EP0_OutStart>
 80022f0:	e006      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f004 fb6e 	bl	80069e8 <HAL_PCD_DataOutStageCallback>
 800230c:	e046      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d124      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	e032      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	2320      	movs	r3, #32
 8002350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f004 fb45 	bl	80069e8 <HAL_PCD_DataOutStageCallback>
 800235e:	e01d      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002388:	461a      	mov	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f002 fc10 	bl	8004bb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f004 fb26 	bl	80069e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	4f54300a 	.word	0x4f54300a
 80023ac:	4f54310a 	.word	0x4f54310a

080023b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	333c      	adds	r3, #60	@ 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a15      	ldr	r2, [pc, #84]	@ (8002438 <PCD_EP_OutSetupPacket_int+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d90e      	bls.n	8002404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fc:	461a      	mov	r2, r3
 80023fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f004 fadd 	bl	80069c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <PCD_EP_OutSetupPacket_int+0x88>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d90c      	bls.n	800242c <PCD_EP_OutSetupPacket_int+0x7c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002424:	461a      	mov	r2, r3
 8002426:	2101      	movs	r1, #1
 8002428:	f002 fbc2 	bl	8004bb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	4f54300a 	.word	0x4f54300a

0800243c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
 8002448:	4613      	mov	r3, r2
 800244a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800245a:	883b      	ldrh	r3, [r7, #0]
 800245c:	0419      	lsls	r1, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	430a      	orrs	r2, r1
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
 8002468:	e028      	b.n	80024bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e00d      	b.n	800249a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	3340      	adds	r3, #64	@ 0x40
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	3b01      	subs	r3, #1
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3ec      	bcc.n	800247e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024a4:	883b      	ldrh	r3, [r7, #0]
 80024a6:	0418      	lsls	r0, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	4302      	orrs	r2, r0
 80024b4:	3340      	adds	r3, #64	@ 0x40
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e267      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d075      	beq.n	800260e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002522:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00c      	beq.n	8002548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4b85      	ldr	r3, [pc, #532]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d112      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4b82      	ldr	r3, [pc, #520]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002546:	d10b      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	4b7e      	ldr	r3, [pc, #504]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05b      	beq.n	800260c <HAL_RCC_OscConfig+0x108>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d157      	bne.n	800260c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e242      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x74>
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b70      	ldr	r3, [pc, #448]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6f      	ldr	r2, [pc, #444]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6d      	ldr	r3, [pc, #436]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6c      	ldr	r2, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 800259c:	4b69      	ldr	r3, [pc, #420]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a68      	ldr	r2, [pc, #416]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b66      	ldr	r3, [pc, #408]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fa7c 	bl	8000ab8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa78 	bl	8000ab8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e207      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fa68 	bl	8000ab8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fa64 	bl	8000ab8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1f3      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b51      	ldr	r3, [pc, #324]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0xe8>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b44      	ldr	r3, [pc, #272]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c7      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4937      	ldr	r1, [pc, #220]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fa1d 	bl	8000ab8 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fa19 	bl	8000ab8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a8      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4925      	ldr	r1, [pc, #148]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_OscConfig+0x244>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe f9fc 	bl	8000ab8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe f9f8 	bl	8000ab8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e187      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d036      	beq.n	800275c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_RCC_OscConfig+0x248>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe f9dc 	bl	8000ab8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe f9d8 	bl	8000ab8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e167      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x240>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x200>
 8002722:	e01b      	b.n	800275c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_OscConfig+0x248>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe f9c5 	bl	8000ab8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e00e      	b.n	8002750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe f9c1 	bl	8000ab8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d907      	bls.n	8002750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e150      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	42470000 	.word	0x42470000
 800274c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b88      	ldr	r3, [pc, #544]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ea      	bne.n	8002732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8097 	beq.w	8002898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b81      	ldr	r3, [pc, #516]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b7d      	ldr	r3, [pc, #500]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a7c      	ldr	r2, [pc, #496]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b7a      	ldr	r3, [pc, #488]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b77      	ldr	r3, [pc, #476]	@ (8002978 <HAL_RCC_OscConfig+0x474>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b74      	ldr	r3, [pc, #464]	@ (8002978 <HAL_RCC_OscConfig+0x474>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a73      	ldr	r2, [pc, #460]	@ (8002978 <HAL_RCC_OscConfig+0x474>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f981 	bl	8000ab8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe f97d 	bl	8000ab8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e10c      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <HAL_RCC_OscConfig+0x474>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x2ea>
 80027e0:	4b64      	ldr	r3, [pc, #400]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a63      	ldr	r2, [pc, #396]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x324>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x30c>
 80027f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6713      	str	r3, [r2, #112]	@ 0x70
 8002802:	4b5c      	ldr	r3, [pc, #368]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002806:	4a5b      	ldr	r2, [pc, #364]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	@ 0x70
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0x324>
 8002810:	4b58      	ldr	r3, [pc, #352]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002814:	4a57      	ldr	r2, [pc, #348]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	@ 0x70
 800281c:	4b55      	ldr	r3, [pc, #340]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	4a54      	ldr	r2, [pc, #336]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe f942 	bl	8000ab8 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe f93e 	bl	8000ab8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0cb      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	4b49      	ldr	r3, [pc, #292]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ee      	beq.n	8002838 <HAL_RCC_OscConfig+0x334>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7fe f92c 	bl	8000ab8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe f928 	bl	8000ab8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0b5      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ee      	bne.n	8002864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a38      	ldr	r2, [pc, #224]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a1 	beq.w	80029e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a2:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d05c      	beq.n	8002968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d141      	bne.n	800293a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b31      	ldr	r3, [pc, #196]	@ (800297c <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f8fc 	bl	8000ab8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f8f8 	bl	8000ab8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e087      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	491b      	ldr	r1, [pc, #108]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x478>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe f8d1 	bl	8000ab8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe f8cd 	bl	8000ab8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e05c      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x416>
 8002938:	e054      	b.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe f8ba 	bl	8000ab8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe f8b6 	bl	8000ab8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e045      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x444>
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e038      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
 800297c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x4ec>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d028      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d121      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0cc      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b68      	ldr	r3, [pc, #416]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d90c      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b65      	ldr	r3, [pc, #404]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a52      	ldr	r2, [pc, #328]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d044      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e067      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4934      	ldr	r1, [pc, #208]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fd ffe8 	bl	8000ab8 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fd ffe4 	bl	8000ab8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d20c      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	490a      	ldr	r1, [pc, #40]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	5ccb      	ldrb	r3, [r1, r3]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd ff48 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023c00 	.word	0x40023c00
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	08007914 	.word	0x08007914
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b094      	sub	sp, #80	@ 0x50
 8002bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd8:	4b79      	ldr	r3, [pc, #484]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d00d      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x40>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	f200 80e1 	bhi.w	8002dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf2:	e0db      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b73      	ldr	r3, [pc, #460]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002bf8:	e0db      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfa:	4b73      	ldr	r3, [pc, #460]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bfe:	e0d8      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c00:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d063      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c16:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	1a51      	subs	r1, r2, r1
 8002c4e:	6139      	str	r1, [r7, #16]
 8002c50:	4629      	mov	r1, r5
 8002c52:	eb63 0301 	sbc.w	r3, r3, r1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c64:	4659      	mov	r1, fp
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6e:	4651      	mov	r1, sl
 8002c70:	018a      	lsls	r2, r1, #6
 8002c72:	4651      	mov	r1, sl
 8002c74:	ebb2 0801 	subs.w	r8, r2, r1
 8002c78:	4659      	mov	r1, fp
 8002c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c92:	4690      	mov	r8, r2
 8002c94:	4699      	mov	r9, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb18 0303 	adds.w	r3, r8, r3
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	eb49 0303 	adc.w	r3, r9, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	024b      	lsls	r3, r1, #9
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	024a      	lsls	r2, r1, #9
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd0:	f7fd fa8c 	bl	80001ec <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cdc:	e058      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4611      	mov	r1, r2
 8002cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	f04f 0000 	mov.w	r0, #0
 8002d00:	f04f 0100 	mov.w	r1, #0
 8002d04:	0159      	lsls	r1, r3, #5
 8002d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0a:	0150      	lsls	r0, r2, #5
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4641      	mov	r1, r8
 8002d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d30:	ebb2 040a 	subs.w	r4, r2, sl
 8002d34:	eb63 050b 	sbc.w	r5, r3, fp
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	00eb      	lsls	r3, r5, #3
 8002d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d46:	00e2      	lsls	r2, r4, #3
 8002d48:	4614      	mov	r4, r2
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	4643      	mov	r3, r8
 8002d4e:	18e3      	adds	r3, r4, r3
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	464b      	mov	r3, r9
 8002d54:	eb45 0303 	adc.w	r3, r5, r3
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d66:	4629      	mov	r1, r5
 8002d68:	028b      	lsls	r3, r1, #10
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d70:	4621      	mov	r1, r4
 8002d72:	028a      	lsls	r2, r1, #10
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	61fa      	str	r2, [r7, #28]
 8002d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d84:	f7fd fa32 	bl	80001ec <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002da0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3750      	adds	r7, #80	@ 0x50
 8002db8:	46bd      	mov	sp, r7
 8002dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	007a1200 	.word	0x007a1200

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0a9b      	lsrs	r3, r3, #10
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08007924 	.word	0x08007924

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e10:	f7ff ffdc 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0b5b      	lsrs	r3, r3, #13
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08007924 	.word	0x08007924

08002e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e042      	b.n	8002ecc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fc80 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	@ 0x24
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f973 	bl	8003164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d175      	bne.n	8002fe0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Transmit+0x2c>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e06e      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	@ 0x21
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f12:	f7fd fdd1 	bl	8000ab8 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2c:	d108      	bne.n	8002f40 <HAL_UART_Transmit+0x6c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f48:	e02e      	b.n	8002fa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	@ 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f848 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e03a      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3302      	adds	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	e007      	b.n	8002f9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1cb      	bne.n	8002f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f814 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e006      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffa:	e03b      	b.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d037      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7fd fd58 	bl	8000ab8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e03a      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d020      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d01d      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	d116      	bne.n	8003074 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f81d 	bl	800309c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2208      	movs	r2, #8
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e00f      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	429a      	cmp	r2, r3
 8003090:	d0b4      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309c:	b480      	push	{r7}
 800309e:	b095      	sub	sp, #84	@ 0x54
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	2b01      	cmp	r3, #1
 8003112:	d119      	bne.n	8003148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60bb      	str	r3, [r7, #8]
   return(result);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f023 0310 	bic.w	r3, r3, #16
 800312a:	647b      	str	r3, [r7, #68]	@ 0x44
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003134:	61ba      	str	r2, [r7, #24]
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e5      	bne.n	8003114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003156:	bf00      	nop
 8003158:	3754      	adds	r7, #84	@ 0x54
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c0      	sub	sp, #256	@ 0x100
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031bc:	f021 010c 	bic.w	r1, r1, #12
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ca:	430b      	orrs	r3, r1
 80031cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	ea40 0301 	orr.w	r3, r0, r1
 80031ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003430 <UART_SetConfig+0x2cc>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <UART_SetConfig+0xa0>
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003434 <UART_SetConfig+0x2d0>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d104      	bne.n	800320e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7ff fe02 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8003208:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800320c:	e003      	b.n	8003216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320e:	f7ff fde9 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8003212:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003220:	f040 810c 	bne.w	800343c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800322e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	1891      	adds	r1, r2, r2
 800323c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800323e:	415b      	adcs	r3, r3
 8003240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003246:	4621      	mov	r1, r4
 8003248:	eb12 0801 	adds.w	r8, r2, r1
 800324c:	4629      	mov	r1, r5
 800324e:	eb43 0901 	adc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003274:	462b      	mov	r3, r5
 8003276:	eb49 0303 	adc.w	r3, r9, r3
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800328a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003292:	460b      	mov	r3, r1
 8003294:	18db      	adds	r3, r3, r3
 8003296:	653b      	str	r3, [r7, #80]	@ 0x50
 8003298:	4613      	mov	r3, r2
 800329a:	eb42 0303 	adc.w	r3, r2, r3
 800329e:	657b      	str	r3, [r7, #84]	@ 0x54
 80032a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032a8:	f7fc ffa0 	bl	80001ec <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2302 	umull	r2, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	011c      	lsls	r4, r3, #4
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d4:	415b      	adcs	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032dc:	4641      	mov	r1, r8
 80032de:	eb12 0a01 	adds.w	sl, r2, r1
 80032e2:	4649      	mov	r1, r9
 80032e4:	eb43 0b01 	adc.w	fp, r3, r1
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	4692      	mov	sl, r2
 80032fe:	469b      	mov	fp, r3
 8003300:	4643      	mov	r3, r8
 8003302:	eb1a 0303 	adds.w	r3, sl, r3
 8003306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800330a:	464b      	mov	r3, r9
 800330c:	eb4b 0303 	adc.w	r3, fp, r3
 8003310:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003320:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	643b      	str	r3, [r7, #64]	@ 0x40
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	647b      	str	r3, [r7, #68]	@ 0x44
 8003336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800333a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800333e:	f7fc ff55 	bl	80001ec <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4611      	mov	r1, r2
 8003348:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <UART_SetConfig+0x2d4>)
 800334a:	fba3 2301 	umull	r2, r3, r3, r1
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2264      	movs	r2, #100	@ 0x64
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <UART_SetConfig+0x2d4>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800336c:	441c      	add	r4, r3
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003378:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800337c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003388:	415b      	adcs	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800338c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6339      	str	r1, [r7, #48]	@ 0x30
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	637b      	str	r3, [r7, #52]	@ 0x34
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e4:	460b      	mov	r3, r1
 80033e6:	18db      	adds	r3, r3, r3
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ea:	4613      	mov	r3, r2
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033fa:	f7fc fef7 	bl	80001ec <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <UART_SetConfig+0x2d4>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	@ 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3332      	adds	r3, #50	@ 0x32
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <UART_SetConfig+0x2d4>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4422      	add	r2, r4
 800342a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342c:	e106      	b.n	800363c <UART_SetConfig+0x4d8>
 800342e:	bf00      	nop
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003446:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800344a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	1891      	adds	r1, r2, r2
 8003454:	6239      	str	r1, [r7, #32]
 8003456:	415b      	adcs	r3, r3
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
 800345a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345e:	4641      	mov	r1, r8
 8003460:	1854      	adds	r4, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0501 	adc.w	r5, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	00eb      	lsls	r3, r5, #3
 8003472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	4643      	mov	r3, r8
 800347e:	18e3      	adds	r3, r4, r3
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003484:	464b      	mov	r3, r9
 8003486:	eb45 0303 	adc.w	r3, r5, r3
 800348a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800349a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034aa:	4629      	mov	r1, r5
 80034ac:	008b      	lsls	r3, r1, #2
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b4:	4621      	mov	r1, r4
 80034b6:	008a      	lsls	r2, r1, #2
 80034b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034bc:	f7fc fe96 	bl	80001ec <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b60      	ldr	r3, [pc, #384]	@ (8003648 <UART_SetConfig+0x4e4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	61b9      	str	r1, [r7, #24]
 80034e8:	415b      	adcs	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6139      	str	r1, [r7, #16]
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	67bb      	str	r3, [r7, #120]	@ 0x78
 800353a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800355a:	f7fc fe47 	bl	80001ec <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b38      	ldr	r3, [pc, #224]	@ (8003648 <UART_SetConfig+0x4e4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	@ 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	@ 0x32
 8003578:	4a33      	ldr	r2, [pc, #204]	@ (8003648 <UART_SetConfig+0x4e4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	673b      	str	r3, [r7, #112]	@ 0x70
 800358e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	415b      	adcs	r3, r3
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d6:	464b      	mov	r3, r9
 80035d8:	460a      	mov	r2, r1
 80035da:	eb42 0303 	adc.w	r3, r2, r3
 80035de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035f8:	4649      	mov	r1, r9
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	4641      	mov	r1, r8
 80035fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003602:	4641      	mov	r1, r8
 8003604:	008a      	lsls	r2, r1, #2
 8003606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800360a:	f7fc fdef 	bl	80001ec <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <UART_SetConfig+0x4e4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	@ 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	@ 0x32
 8003626:	4a08      	ldr	r2, [pc, #32]	@ (8003648 <UART_SetConfig+0x4e4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4422      	add	r2, r4
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800364c:	b084      	sub	sp, #16
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	f107 001c 	add.w	r0, r7, #28
 800365a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003662:	2b01      	cmp	r3, #1
 8003664:	d123      	bne.n	80036ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800367a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800368e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f001 fae2 	bl	8004c6c <USB_CoreReset>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e01b      	b.n	80036e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 fad6 	bl	8004c6c <USB_CoreReset>
 80036c0:	4603      	mov	r3, r0
 80036c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80036d8:	e005      	b.n	80036e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036e6:	7fbb      	ldrb	r3, [r7, #30]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10b      	bne.n	8003704 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f043 0206 	orr.w	r2, r3, #6
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003710:	b004      	add	sp, #16
 8003712:	4770      	bx	lr

08003714 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d165      	bne.n	80037f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a41      	ldr	r2, [pc, #260]	@ (8003830 <USB_SetTurnaroundTime+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d906      	bls.n	800373e <USB_SetTurnaroundTime+0x2a>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a40      	ldr	r2, [pc, #256]	@ (8003834 <USB_SetTurnaroundTime+0x120>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d202      	bcs.n	800373e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003738:	230f      	movs	r3, #15
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e062      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a3c      	ldr	r2, [pc, #240]	@ (8003834 <USB_SetTurnaroundTime+0x120>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d306      	bcc.n	8003754 <USB_SetTurnaroundTime+0x40>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a3b      	ldr	r2, [pc, #236]	@ (8003838 <USB_SetTurnaroundTime+0x124>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d202      	bcs.n	8003754 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800374e:	230e      	movs	r3, #14
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e057      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a38      	ldr	r2, [pc, #224]	@ (8003838 <USB_SetTurnaroundTime+0x124>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d306      	bcc.n	800376a <USB_SetTurnaroundTime+0x56>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a37      	ldr	r2, [pc, #220]	@ (800383c <USB_SetTurnaroundTime+0x128>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d202      	bcs.n	800376a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003764:	230d      	movs	r3, #13
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e04c      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a33      	ldr	r2, [pc, #204]	@ (800383c <USB_SetTurnaroundTime+0x128>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d306      	bcc.n	8003780 <USB_SetTurnaroundTime+0x6c>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a32      	ldr	r2, [pc, #200]	@ (8003840 <USB_SetTurnaroundTime+0x12c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d802      	bhi.n	8003780 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800377a:	230c      	movs	r3, #12
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e041      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a2f      	ldr	r2, [pc, #188]	@ (8003840 <USB_SetTurnaroundTime+0x12c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d906      	bls.n	8003796 <USB_SetTurnaroundTime+0x82>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a2e      	ldr	r2, [pc, #184]	@ (8003844 <USB_SetTurnaroundTime+0x130>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d802      	bhi.n	8003796 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003790:	230b      	movs	r3, #11
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e036      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a2a      	ldr	r2, [pc, #168]	@ (8003844 <USB_SetTurnaroundTime+0x130>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d906      	bls.n	80037ac <USB_SetTurnaroundTime+0x98>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <USB_SetTurnaroundTime+0x134>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037a6:	230a      	movs	r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e02b      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <USB_SetTurnaroundTime+0x134>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d906      	bls.n	80037c2 <USB_SetTurnaroundTime+0xae>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a25      	ldr	r2, [pc, #148]	@ (800384c <USB_SetTurnaroundTime+0x138>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d202      	bcs.n	80037c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037bc:	2309      	movs	r3, #9
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e020      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a21      	ldr	r2, [pc, #132]	@ (800384c <USB_SetTurnaroundTime+0x138>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d306      	bcc.n	80037d8 <USB_SetTurnaroundTime+0xc4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a20      	ldr	r2, [pc, #128]	@ (8003850 <USB_SetTurnaroundTime+0x13c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d802      	bhi.n	80037d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037d2:	2308      	movs	r3, #8
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e015      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a1d      	ldr	r2, [pc, #116]	@ (8003850 <USB_SetTurnaroundTime+0x13c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d906      	bls.n	80037ee <USB_SetTurnaroundTime+0xda>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <USB_SetTurnaroundTime+0x140>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d202      	bcs.n	80037ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037e8:	2307      	movs	r3, #7
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e00a      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037ee:	2306      	movs	r3, #6
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e007      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037fa:	2309      	movs	r3, #9
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e001      	b.n	8003804 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003800:	2309      	movs	r3, #9
 8003802:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	00d8acbf 	.word	0x00d8acbf
 8003834:	00e4e1c0 	.word	0x00e4e1c0
 8003838:	00f42400 	.word	0x00f42400
 800383c:	01067380 	.word	0x01067380
 8003840:	011a499f 	.word	0x011a499f
 8003844:	01312cff 	.word	0x01312cff
 8003848:	014ca43f 	.word	0x014ca43f
 800384c:	016e3600 	.word	0x016e3600
 8003850:	01a6ab1f 	.word	0x01a6ab1f
 8003854:	01e84800 	.word	0x01e84800

08003858 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d115      	bne.n	80038ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038ca:	200a      	movs	r0, #10
 80038cc:	f7fd f900 	bl	8000ad0 <HAL_Delay>
      ms += 10U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	330a      	adds	r3, #10
 80038d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f001 f939 	bl	8004b4e <USB_GetMode>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d01e      	beq.n	8003920 <USB_SetCurrentMode+0x84>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80038e6:	d9f0      	bls.n	80038ca <USB_SetCurrentMode+0x2e>
 80038e8:	e01a      	b.n	8003920 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d115      	bne.n	800391c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038fc:	200a      	movs	r0, #10
 80038fe:	f7fd f8e7 	bl	8000ad0 <HAL_Delay>
      ms += 10U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	330a      	adds	r3, #10
 8003906:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 f920 	bl	8004b4e <USB_GetMode>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <USB_SetCurrentMode+0x84>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2bc7      	cmp	r3, #199	@ 0xc7
 8003918:	d9f0      	bls.n	80038fc <USB_SetCurrentMode+0x60>
 800391a:	e001      	b.n	8003920 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e005      	b.n	800392c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2bc8      	cmp	r3, #200	@ 0xc8
 8003924:	d101      	bne.n	800392a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003934:	b084      	sub	sp, #16
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e009      	b.n	8003968 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3340      	adds	r3, #64	@ 0x40
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	3301      	adds	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0e      	cmp	r3, #14
 800396c:	d9f2      	bls.n	8003954 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800396e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11c      	bne.n	80039b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80039ae:	e00b      	b.n	80039c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10d      	bne.n	80039f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039e4:	2100      	movs	r1, #0
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f968 	bl	8003cbc <USB_SetDevSpeed>
 80039ec:	e008      	b.n	8003a00 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039ee:	2101      	movs	r1, #1
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f963 	bl	8003cbc <USB_SetDevSpeed>
 80039f6:	e003      	b.n	8003a00 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039f8:	2103      	movs	r1, #3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f95e 	bl	8003cbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a00:	2110      	movs	r1, #16
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8fa 	bl	8003bfc <USB_FlushTxFifo>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f924 	bl	8003c60 <USB_FlushRxFifo>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a34:	461a      	mov	r2, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e043      	b.n	8003ad4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a62:	d118      	bne.n	8003a96 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e013      	b.n	8003aa8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e008      	b.n	8003aa8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ad8:	461a      	mov	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d3b5      	bcc.n	8003a4c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e043      	b.n	8003b6e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003afc:	d118      	bne.n	8003b30 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e013      	b.n	8003b42 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e008      	b.n	8003b42 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2300      	movs	r3, #0
 8003b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b60:	461a      	mov	r2, r3
 8003b62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b72:	461a      	mov	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d3b5      	bcc.n	8003ae6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f043 0210 	orr.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <USB_DevInit+0x2c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f043 0208 	orr.w	r2, r3, #8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bf4:	b004      	add	sp, #16
 8003bf6:	4770      	bx	lr
 8003bf8:	803c3800 	.word	0x803c3800

08003bfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c16:	d901      	bls.n	8003c1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e01b      	b.n	8003c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	daf2      	bge.n	8003c0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	019b      	lsls	r3, r3, #6
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c40:	d901      	bls.n	8003c46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e006      	b.n	8003c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d0f0      	beq.n	8003c34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c78:	d901      	bls.n	8003c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e018      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	daf2      	bge.n	8003c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c9c:	d901      	bls.n	8003ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e006      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d0f0      	beq.n	8003c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
 8003d12:	e00a      	b.n	8003d2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d002      	beq.n	8003d20 <USB_GetDevSpeed+0x32>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d102      	bne.n	8003d26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d20:	2302      	movs	r3, #2
 8003d22:	75fb      	strb	r3, [r7, #23]
 8003d24:	e001      	b.n	8003d2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d26:	230f      	movs	r3, #15
 8003d28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d13a      	bne.n	8003dca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d155      	bne.n	8003e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	791b      	ldrb	r3, [r3, #4]
 8003da6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003da8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	059b      	lsls	r3, r3, #22
 8003dae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db0:	4313      	orrs	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e036      	b.n	8003e38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11a      	bne.n	8003e38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	791b      	ldrb	r3, [r3, #4]
 8003e1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d161      	bne.n	8003f28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e7a:	d11f      	bne.n	8003ebc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0159      	lsls	r1, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <USB_DeactivateEndpoint+0x1b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	e060      	b.n	8003fea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f3e:	d11f      	bne.n	8003f80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0159      	lsls	r1, r3, #5
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	440b      	add	r3, r1
 8003fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <USB_DeactivateEndpoint+0x1b4>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	ec337800 	.word	0xec337800
 8003ffc:	eff37800 	.word	0xeff37800

08004000 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	@ 0x28
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	785b      	ldrb	r3, [r3, #1]
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 817a 	bne.w	8004316 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d132      	bne.n	8004090 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004044:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004048:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800404c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800406c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004088:	0cdb      	lsrs	r3, r3, #19
 800408a:	04db      	lsls	r3, r3, #19
 800408c:	6113      	str	r3, [r2, #16]
 800408e:	e092      	b.n	80041b6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040aa:	0cdb      	lsrs	r3, r3, #19
 80040ac:	04db      	lsls	r3, r3, #19
 80040ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040d2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11a      	bne.n	8004110 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d903      	bls.n	80040ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004108:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	e01b      	b.n	8004148 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	440b      	add	r3, r1
 8004128:	1e59      	subs	r1, r3, #1
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004132:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004134:	4ba2      	ldr	r3, [pc, #648]	@ (80043c0 <USB_EPStartXfer+0x3c0>)
 8004136:	400b      	ands	r3, r1
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	0148      	lsls	r0, r1, #5
 800413c:	69f9      	ldr	r1, [r7, #28]
 800413e:	4401      	add	r1, r0
 8004140:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004144:	4313      	orrs	r3, r2
 8004146:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	0148      	lsls	r0, r1, #5
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	4401      	add	r1, r0
 8004166:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800416a:	4313      	orrs	r3, r2
 800416c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d11f      	bne.n	80041b6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004190:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004194:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d14b      	bne.n	8004254 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d128      	bne.n	8004232 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d110      	bne.n	8004212 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800420a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e00f      	b.n	8004232 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800424c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e165      	b.n	8004520 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800426e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004272:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d015      	beq.n	80042a8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 814d 	beq.w	8004520 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	2101      	movs	r1, #1
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	69f9      	ldr	r1, [r7, #28]
 800429e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a2:	4313      	orrs	r3, r2
 80042a4:	634b      	str	r3, [r1, #52]	@ 0x34
 80042a6:	e13b      	b.n	8004520 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d110      	bne.n	80042da <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e00f      	b.n	80042fa <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68d9      	ldr	r1, [r3, #12]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	b298      	uxth	r0, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f9b8 	bl	8004684 <USB_WritePacket>
 8004314:	e104      	b.n	8004520 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004330:	0cdb      	lsrs	r3, r3, #19
 8004332:	04db      	lsls	r3, r3, #19
 8004334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004350:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004354:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004358:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d131      	bne.n	80043c4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	0148      	lsls	r0, r1, #5
 8004392:	69f9      	ldr	r1, [r7, #28]
 8004394:	4401      	add	r1, r0
 8004396:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800439a:	4313      	orrs	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
 80043be:	e061      	b.n	8004484 <USB_EPStartXfer+0x484>
 80043c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d123      	bne.n	8004414 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e2:	69b9      	ldr	r1, [r7, #24]
 80043e4:	0148      	lsls	r0, r1, #5
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	4401      	add	r1, r0
 80043ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043ee:	4313      	orrs	r3, r2
 80043f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800440c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004410:	6113      	str	r3, [r2, #16]
 8004412:	e037      	b.n	8004484 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4413      	add	r3, r2
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	8afa      	ldrh	r2, [r7, #22]
 8004430:	fb03 f202 	mul.w	r2, r3, r2
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	8afb      	ldrh	r3, [r7, #22]
 8004448:	04d9      	lsls	r1, r3, #19
 800444a:	4b38      	ldr	r3, [pc, #224]	@ (800452c <USB_EPStartXfer+0x52c>)
 800444c:	400b      	ands	r3, r1
 800444e:	69b9      	ldr	r1, [r7, #24]
 8004450:	0148      	lsls	r0, r1, #5
 8004452:	69f9      	ldr	r1, [r7, #28]
 8004454:	4401      	add	r1, r0
 8004456:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	0148      	lsls	r0, r1, #5
 8004478:	69f9      	ldr	r1, [r7, #28]
 800447a:	4401      	add	r1, r0
 800447c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004480:	4313      	orrs	r3, r2
 8004482:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10d      	bne.n	80044a6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a2:	460a      	mov	r2, r1
 80044a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	791b      	ldrb	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d128      	bne.n	8004500 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d110      	bne.n	80044e0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00f      	b.n	8004500 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800451e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	1ff80000 	.word	0x1ff80000

08004530 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d14a      	bne.n	80045e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004566:	f040 8086 	bne.w	8004676 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	0151      	lsls	r1, r2, #5
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	440a      	add	r2, r1
 8004584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004588:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800458c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045be:	4293      	cmp	r3, r2
 80045c0:	d902      	bls.n	80045c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
          break;
 80045c6:	e056      	b.n	8004676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045e0:	d0e7      	beq.n	80045b2 <USB_EPStopXfer+0x82>
 80045e2:	e048      	b.n	8004676 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045fc:	d13b      	bne.n	8004676 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004620:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004644:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004652:	4293      	cmp	r3, r2
 8004654:	d902      	bls.n	800465c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
          break;
 800465a:	e00c      	b.n	8004676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004674:	d0e7      	beq.n	8004646 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	@ 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	460b      	mov	r3, r1
 8004694:	71fb      	strb	r3, [r7, #7]
 8004696:	4613      	mov	r3, r2
 8004698:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d123      	bne.n	80046f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046aa:	88bb      	ldrh	r3, [r7, #4]
 80046ac:	3303      	adds	r3, #3
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e018      	b.n	80046ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	031a      	lsls	r2, r3, #12
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c4:	461a      	mov	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3e2      	bcc.n	80046b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3724      	adds	r7, #36	@ 0x24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004700:	b480      	push	{r7}
 8004702:	b08b      	sub	sp, #44	@ 0x2c
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	b29b      	uxth	r3, r3
 800471c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	e014      	b.n	8004756 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	601a      	str	r2, [r3, #0]
    pDest++;
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	3301      	adds	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	3301      	adds	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	3301      	adds	r3, #1
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3e6      	bcc.n	800472c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800475e:	8bfb      	ldrh	r3, [r7, #30]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01e      	beq.n	80047a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800476e:	461a      	mov	r2, r3
 8004770:	f107 0310 	add.w	r3, r7, #16
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	b2da      	uxtb	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	701a      	strb	r2, [r3, #0]
      i++;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	3301      	adds	r3, #1
 800478e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	3301      	adds	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004796:	8bfb      	ldrh	r3, [r7, #30]
 8004798:	3b01      	subs	r3, #1
 800479a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800479c:	8bfb      	ldrh	r3, [r7, #30]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ea      	bne.n	8004778 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	372c      	adds	r7, #44	@ 0x2c
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d12c      	bne.n	8004826 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	db12      	blt.n	8004804 <USB_EPSetStall+0x54>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00f      	beq.n	8004804 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004802:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800481e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e02b      	b.n	800487e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db12      	blt.n	800485e <USB_EPSetStall+0xae>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00f      	beq.n	800485e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004858:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800485c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004878:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800487c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d128      	bne.n	80048fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	791b      	ldrb	r3, [r3, #4]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d003      	beq.n	80048d8 <USB_EPClearStall+0x4c>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	791b      	ldrb	r3, [r3, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d138      	bne.n	800494a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e027      	b.n	800494a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004914:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	791b      	ldrb	r3, [r3, #4]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d003      	beq.n	800492a <USB_EPClearStall+0x9e>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d10f      	bne.n	800494a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004948:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004976:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800497a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800498c:	68f9      	ldr	r1, [r7, #12]
 800498e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d2:	f023 0302 	bic.w	r3, r3, #2
 80049d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	0c1b      	lsrs	r3, r3, #16
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	b29b      	uxth	r3, r3
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	460b      	mov	r3, r1
 8004afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b40:	68bb      	ldr	r3, [r7, #8]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b88:	f023 0307 	bic.w	r3, r3, #7
 8004b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	333c      	adds	r3, #60	@ 0x3c
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4a26      	ldr	r2, [pc, #152]	@ (8004c68 <USB_EP0_OutStart+0xb8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d90a      	bls.n	8004bea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004be4:	d101      	bne.n	8004bea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e037      	b.n	8004c5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c18:	f043 0318 	orr.w	r3, r3, #24
 8004c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004c30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10f      	bne.n	8004c58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	4f54300a 	.word	0x4f54300a

08004c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c84:	d901      	bls.n	8004c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e01b      	b.n	8004cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	daf2      	bge.n	8004c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cae:	d901      	bls.n	8004cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e006      	b.n	8004cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d0f0      	beq.n	8004ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004cdc:	2010      	movs	r0, #16
 8004cde:	f002 f8e1 	bl	8006ea4 <USBD_static_malloc>
 8004ce2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	32b0      	adds	r2, #176	@ 0xb0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e048      	b.n	8004d90 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	32b0      	adds	r2, #176	@ 0xb0
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	32b0      	adds	r2, #176	@ 0xb0
 8004d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7c1b      	ldrb	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <USBD_HID_Init+0xc8>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3326      	adds	r3, #38	@ 0x26
 8004d40:	2207      	movs	r2, #7
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	e00c      	b.n	8004d60 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <USBD_HID_Init+0xc8>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3326      	adds	r3, #38	@ 0x26
 8004d5c:	220a      	movs	r2, #10
 8004d5e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d60:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <USBD_HID_Init+0xc8>)
 8004d62:	7819      	ldrb	r1, [r3, #0]
 8004d64:	2304      	movs	r3, #4
 8004d66:	2203      	movs	r2, #3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 ff8a 	bl	8006c82 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <USBD_HID_Init+0xc8>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3324      	adds	r3, #36	@ 0x24
 8004d84:	2201      	movs	r2, #1
 8004d86:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	200000ca 	.word	0x200000ca

08004d9c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004da8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <USBD_HID_DeInit+0x8c>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 ff8d 	bl	8006cce <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004db4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <USBD_HID_DeInit+0x8c>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3324      	adds	r3, #36	@ 0x24
 8004dca:	2200      	movs	r2, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <USBD_HID_DeInit+0x8c>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3326      	adds	r3, #38	@ 0x26
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	32b0      	adds	r2, #176	@ 0xb0
 8004df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	32b0      	adds	r2, #176	@ 0xb0
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 f859 	bl	8006ec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	32b0      	adds	r2, #176	@ 0xb0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	200000ca 	.word	0x200000ca

08004e2c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	32b0      	adds	r2, #176	@ 0xb0
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e0e8      	b.n	800502a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d046      	beq.n	8004ef2 <USBD_HID_Setup+0xc6>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	f040 80d8 	bne.w	800501a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	3b02      	subs	r3, #2
 8004e70:	2b09      	cmp	r3, #9
 8004e72:	d836      	bhi.n	8004ee2 <USBD_HID_Setup+0xb6>
 8004e74:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <USBD_HID_Setup+0x50>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ed3 	.word	0x08004ed3
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004ee3 	.word	0x08004ee3
 8004e88:	08004ee3 	.word	0x08004ee3
 8004e8c:	08004ee3 	.word	0x08004ee3
 8004e90:	08004ee3 	.word	0x08004ee3
 8004e94:	08004ee3 	.word	0x08004ee3
 8004e98:	08004ee3 	.word	0x08004ee3
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ea5 	.word	0x08004ea5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	885b      	ldrh	r3, [r3, #2]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]
          break;
 8004eb0:	e01e      	b.n	8004ef0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f001 fba9 	bl	8006610 <USBD_CtlSendData>
          break;
 8004ebe:	e017      	b.n	8004ef0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	885b      	ldrh	r3, [r3, #2]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
          break;
 8004ed0:	e00e      	b.n	8004ef0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 fb98 	bl	8006610 <USBD_CtlSendData>
          break;
 8004ee0:	e006      	b.n	8004ef0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fb22 	bl	800652e <USBD_CtlError>
          ret = USBD_FAIL;
 8004eea:	2303      	movs	r3, #3
 8004eec:	75fb      	strb	r3, [r7, #23]
          break;
 8004eee:	bf00      	nop
      }
      break;
 8004ef0:	e09a      	b.n	8005028 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b0b      	cmp	r3, #11
 8004ef8:	f200 8086 	bhi.w	8005008 <USBD_HID_Setup+0x1dc>
 8004efc:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <USBD_HID_Setup+0xd8>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08005017 	.word	0x08005017
 8004f0c:	08005009 	.word	0x08005009
 8004f10:	08005009 	.word	0x08005009
 8004f14:	08005009 	.word	0x08005009
 8004f18:	08005009 	.word	0x08005009
 8004f1c:	08004f5f 	.word	0x08004f5f
 8004f20:	08005009 	.word	0x08005009
 8004f24:	08005009 	.word	0x08005009
 8004f28:	08005009 	.word	0x08005009
 8004f2c:	08004fb7 	.word	0x08004fb7
 8004f30:	08004fe1 	.word	0x08004fe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d107      	bne.n	8004f50 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f40:	f107 030a 	add.w	r3, r7, #10
 8004f44:	2202      	movs	r2, #2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fb61 	bl	8006610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f4e:	e063      	b.n	8005018 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 faeb 	bl	800652e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5c:	e05c      	b.n	8005018 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	885b      	ldrh	r3, [r3, #2]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b22      	cmp	r3, #34	@ 0x22
 8004f68:	d108      	bne.n	8004f7c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	88db      	ldrh	r3, [r3, #6]
 8004f6e:	2b4a      	cmp	r3, #74	@ 0x4a
 8004f70:	bf28      	it	cs
 8004f72:	234a      	movcs	r3, #74	@ 0x4a
 8004f74:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <USBD_HID_Setup+0x208>)
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e015      	b.n	8004fa8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	885b      	ldrh	r3, [r3, #2]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b21      	cmp	r3, #33	@ 0x21
 8004f86:	d108      	bne.n	8004f9a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004f88:	4b2b      	ldr	r3, [pc, #172]	@ (8005038 <USBD_HID_Setup+0x20c>)
 8004f8a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	88db      	ldrh	r3, [r3, #6]
 8004f90:	2b09      	cmp	r3, #9
 8004f92:	bf28      	it	cs
 8004f94:	2309      	movcs	r3, #9
 8004f96:	82bb      	strh	r3, [r7, #20]
 8004f98:	e006      	b.n	8004fa8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fac6 	bl	800652e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa6:	e037      	b.n	8005018 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004fa8:	8abb      	ldrh	r3, [r7, #20]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6939      	ldr	r1, [r7, #16]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 fb2e 	bl	8006610 <USBD_CtlSendData>
          break;
 8004fb4:	e030      	b.n	8005018 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fb20 	bl	8006610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fd0:	e022      	b.n	8005018 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 faaa 	bl	800652e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8004fde:	e01b      	b.n	8005018 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d106      	bne.n	8004ffa <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	885b      	ldrh	r3, [r3, #2]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ff8:	e00e      	b.n	8005018 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fa96 	bl	800652e <USBD_CtlError>
            ret = USBD_FAIL;
 8005002:	2303      	movs	r3, #3
 8005004:	75fb      	strb	r3, [r7, #23]
          break;
 8005006:	e007      	b.n	8005018 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fa8f 	bl	800652e <USBD_CtlError>
          ret = USBD_FAIL;
 8005010:	2303      	movs	r3, #3
 8005012:	75fb      	strb	r3, [r7, #23]
          break;
 8005014:	e000      	b.n	8005018 <USBD_HID_Setup+0x1ec>
          break;
 8005016:	bf00      	nop
      }
      break;
 8005018:	e006      	b.n	8005028 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fa86 	bl	800652e <USBD_CtlError>
      ret = USBD_FAIL;
 8005022:	2303      	movs	r3, #3
 8005024:	75fb      	strb	r3, [r7, #23]
      break;
 8005026:	bf00      	nop
  }

  return (uint8_t)ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000080 	.word	0x20000080
 8005038:	20000068 	.word	0x20000068

0800503c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005044:	2181      	movs	r1, #129	@ 0x81
 8005046:	4809      	ldr	r0, [pc, #36]	@ (800506c <USBD_HID_GetFSCfgDesc+0x30>)
 8005048:	f000 fc3b 	bl	80058c2 <USBD_GetEpDesc>
 800504c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	220a      	movs	r2, #10
 8005058:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2222      	movs	r2, #34	@ 0x22
 800505e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005060:	4b02      	ldr	r3, [pc, #8]	@ (800506c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000044 	.word	0x20000044

08005070 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005078:	2181      	movs	r1, #129	@ 0x81
 800507a:	4809      	ldr	r0, [pc, #36]	@ (80050a0 <USBD_HID_GetHSCfgDesc+0x30>)
 800507c:	f000 fc21 	bl	80058c2 <USBD_GetEpDesc>
 8005080:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2207      	movs	r2, #7
 800508c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2222      	movs	r2, #34	@ 0x22
 8005092:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005094:	4b02      	ldr	r3, [pc, #8]	@ (80050a0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000044 	.word	0x20000044

080050a4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80050ac:	2181      	movs	r1, #129	@ 0x81
 80050ae:	4809      	ldr	r0, [pc, #36]	@ (80050d4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80050b0:	f000 fc07 	bl	80058c2 <USBD_GetEpDesc>
 80050b4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	220a      	movs	r2, #10
 80050c0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2222      	movs	r2, #34	@ 0x22
 80050c6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80050c8:	4b02      	ldr	r3, [pc, #8]	@ (80050d4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000044 	.word	0x20000044

080050d8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	32b0      	adds	r2, #176	@ 0xb0
 80050ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f2:	2200      	movs	r2, #0
 80050f4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	220a      	movs	r2, #10
 8005110:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005112:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000074 	.word	0x20000074

08005124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005138:	2303      	movs	r3, #3
 800513a:	e01f      	b.n	800517c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f001 fd19 	bl	8006ba8 <USBD_LL_Init>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005198:	2303      	movs	r3, #3
 800519a:	e025      	b.n	80051e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	32ae      	adds	r2, #174	@ 0xae
 80051ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00f      	beq.n	80051d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	32ae      	adds	r2, #174	@ 0xae
 80051c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	f107 020e 	add.w	r2, r7, #14
 80051cc:	4610      	mov	r0, r2
 80051ce:	4798      	blx	r3
 80051d0:	4602      	mov	r2, r0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fd27 	bl	8006c4c <USBD_LL_Start>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005210:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	4611      	mov	r1, r2
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	4611      	mov	r1, r2
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800527c:	2303      	movs	r3, #3
 800527e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f90c 	bl	80064ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d01a      	beq.n	80052fc <USBD_LL_SetupStage+0x72>
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d822      	bhi.n	8005310 <USBD_LL_SetupStage+0x86>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <USBD_LL_SetupStage+0x4a>
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d00a      	beq.n	80052e8 <USBD_LL_SetupStage+0x5e>
 80052d2:	e01d      	b.n	8005310 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb63 	bl	80059a8 <USBD_StdDevReq>
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]
      break;
 80052e6:	e020      	b.n	800532a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fbcb 	bl	8005a8c <USBD_StdItfReq>
 80052f6:	4603      	mov	r3, r0
 80052f8:	73fb      	strb	r3, [r7, #15]
      break;
 80052fa:	e016      	b.n	800532a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc2d 	bl	8005b64 <USBD_StdEPReq>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
      break;
 800530e:	e00c      	b.n	800532a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005316:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fcf4 	bl	8006d0c <USBD_LL_StallEP>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	bf00      	nop
  }

  return ret;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	460b      	mov	r3, r1
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d16e      	bne.n	800542a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800535a:	2b03      	cmp	r3, #3
 800535c:	f040 8098 	bne.w	8005490 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	429a      	cmp	r2, r3
 800536a:	d913      	bls.n	8005394 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	1ad2      	subs	r2, r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4293      	cmp	r3, r2
 8005384:	bf28      	it	cs
 8005386:	4613      	movcs	r3, r2
 8005388:	461a      	mov	r2, r3
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f001 f96b 	bl	8006668 <USBD_CtlContinueRx>
 8005392:	e07d      	b.n	8005490 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d014      	beq.n	80053cc <USBD_LL_DataOutStage+0x98>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d81d      	bhi.n	80053e2 <USBD_LL_DataOutStage+0xae>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <USBD_LL_DataOutStage+0x7c>
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <USBD_LL_DataOutStage+0x82>
 80053ae:	e018      	b.n	80053e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	75bb      	strb	r3, [r7, #22]
            break;
 80053b4:	e018      	b.n	80053e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	4619      	mov	r1, r3
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa64 	bl	800588e <USBD_CoreFindIF>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75bb      	strb	r3, [r7, #22]
            break;
 80053ca:	e00d      	b.n	80053e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa66 	bl	80058a8 <USBD_CoreFindEP>
 80053dc:	4603      	mov	r3, r0
 80053de:	75bb      	strb	r3, [r7, #22]
            break;
 80053e0:	e002      	b.n	80053e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75bb      	strb	r3, [r7, #22]
            break;
 80053e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80053e8:	7dbb      	ldrb	r3, [r7, #22]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d119      	bne.n	8005422 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d113      	bne.n	8005422 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80053fa:	7dba      	ldrb	r2, [r7, #22]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	32ae      	adds	r2, #174	@ 0xae
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800540a:	7dba      	ldrb	r2, [r7, #22]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005412:	7dba      	ldrb	r2, [r7, #22]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	32ae      	adds	r2, #174	@ 0xae
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f001 f931 	bl	800668a <USBD_CtlSendStatus>
 8005428:	e032      	b.n	8005490 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4619      	mov	r1, r3
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fa37 	bl	80058a8 <USBD_CoreFindEP>
 800543a:	4603      	mov	r3, r0
 800543c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800543e:	7dbb      	ldrb	r3, [r7, #22]
 8005440:	2bff      	cmp	r3, #255	@ 0xff
 8005442:	d025      	beq.n	8005490 <USBD_LL_DataOutStage+0x15c>
 8005444:	7dbb      	ldrb	r3, [r7, #22]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d122      	bne.n	8005490 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d117      	bne.n	8005486 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005456:	7dba      	ldrb	r2, [r7, #22]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	32ae      	adds	r2, #174	@ 0xae
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00f      	beq.n	8005486 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005466:	7dba      	ldrb	r2, [r7, #22]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800546e:	7dba      	ldrb	r2, [r7, #22]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	32ae      	adds	r2, #174	@ 0xae
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	7afa      	ldrb	r2, [r7, #11]
 800547c:	4611      	mov	r1, r2
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	4798      	blx	r3
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	e000      	b.n	8005492 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	460b      	mov	r3, r1
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d16f      	bne.n	800558e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3314      	adds	r3, #20
 80054b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d15a      	bne.n	8005574 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d914      	bls.n	80054f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	461a      	mov	r2, r3
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f001 f8b0 	bl	8006646 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054e6:	2300      	movs	r3, #0
 80054e8:	2200      	movs	r2, #0
 80054ea:	2100      	movs	r1, #0
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f001 fcb7 	bl	8006e60 <USBD_LL_PrepareReceive>
 80054f2:	e03f      	b.n	8005574 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d11c      	bne.n	800553a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005508:	429a      	cmp	r2, r3
 800550a:	d316      	bcc.n	800553a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005516:	429a      	cmp	r2, r3
 8005518:	d20f      	bcs.n	800553a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f001 f891 	bl	8006646 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800552c:	2300      	movs	r3, #0
 800552e:	2200      	movs	r2, #0
 8005530:	2100      	movs	r1, #0
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f001 fc94 	bl	8006e60 <USBD_LL_PrepareReceive>
 8005538:	e01c      	b.n	8005574 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b03      	cmp	r3, #3
 8005544:	d10f      	bne.n	8005566 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005566:	2180      	movs	r1, #128	@ 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f001 fbcf 	bl	8006d0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 f89e 	bl	80066b0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03a      	beq.n	80055f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fe42 	bl	8005208 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800558c:	e032      	b.n	80055f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f985 	bl	80058a8 <USBD_CoreFindEP>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
 80055a4:	2bff      	cmp	r3, #255	@ 0xff
 80055a6:	d025      	beq.n	80055f4 <USBD_LL_DataInStage+0x15a>
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d122      	bne.n	80055f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d11c      	bne.n	80055f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80055ba:	7dfa      	ldrb	r2, [r7, #23]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	32ae      	adds	r2, #174	@ 0xae
 80055c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d014      	beq.n	80055f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80055ca:	7dfa      	ldrb	r2, [r7, #23]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80055d2:	7dfa      	ldrb	r2, [r7, #23]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	32ae      	adds	r2, #174	@ 0xae
 80055d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	7afa      	ldrb	r2, [r7, #11]
 80055e0:	4611      	mov	r1, r2
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	4798      	blx	r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80055ea:	7dbb      	ldrb	r3, [r7, #22]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80055f0:	7dbb      	ldrb	r3, [r7, #22]
 80055f2:	e000      	b.n	80055f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6852      	ldr	r2, [r2, #4]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	4611      	mov	r1, r2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005660:	2303      	movs	r3, #3
 8005662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005664:	2340      	movs	r3, #64	@ 0x40
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fb09 	bl	8006c82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2240      	movs	r2, #64	@ 0x40
 800567c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	@ 0x80
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 fafb 	bl	8006c82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	621a      	str	r2, [r3, #32]

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d006      	beq.n	80056e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2204      	movs	r2, #4
 80056e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b04      	cmp	r3, #4
 800570c:	d106      	bne.n	800571c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005714:	b2da      	uxtb	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b03      	cmp	r3, #3
 800573c:	d110      	bne.n	8005760 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	32ae      	adds	r2, #174	@ 0xae
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005788:	2303      	movs	r3, #3
 800578a:	e01c      	b.n	80057c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b03      	cmp	r3, #3
 8005796:	d115      	bne.n	80057c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	32ae      	adds	r2, #174	@ 0xae
 80057a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	32ae      	adds	r2, #174	@ 0xae
 80057b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	4611      	mov	r1, r2
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	32ae      	adds	r2, #174	@ 0xae
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e01c      	b.n	800582a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d115      	bne.n	8005828 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	32ae      	adds	r2, #174	@ 0xae
 8005806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	32ae      	adds	r2, #174	@ 0xae
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	4611      	mov	r1, r2
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00e      	beq.n	8005884 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6852      	ldr	r2, [r2, #4]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	4611      	mov	r1, r2
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800589a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	885b      	ldrh	r3, [r3, #2]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d91f      	bls.n	8005928 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80058ee:	e013      	b.n	8005918 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80058f0:	f107 030a 	add.w	r3, r7, #10
 80058f4:	4619      	mov	r1, r3
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f000 f81b 	bl	8005932 <USBD_GetNextDesc>
 80058fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b05      	cmp	r3, #5
 8005904:	d108      	bne.n	8005918 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	789b      	ldrb	r3, [r3, #2]
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	429a      	cmp	r2, r3
 8005912:	d008      	beq.n	8005926 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	885b      	ldrh	r3, [r3, #2]
 800591c:	b29a      	uxth	r2, r3
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	429a      	cmp	r2, r3
 8005922:	d8e5      	bhi.n	80058f0 <USBD_GetEpDesc+0x2e>
 8005924:	e000      	b.n	8005928 <USBD_GetEpDesc+0x66>
          break;
 8005926:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005928:	693b      	ldr	r3, [r7, #16]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	4413      	add	r3, r2
 800594a:	b29a      	uxth	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3301      	adds	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005988:	8a3b      	ldrh	r3, [r7, #16]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	b21a      	sxth	r2, r3
 800598e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005992:	4313      	orrs	r3, r2
 8005994:	b21b      	sxth	r3, r3
 8005996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005998:	89fb      	ldrh	r3, [r7, #14]
}
 800599a:	4618      	mov	r0, r3
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d005      	beq.n	80059ce <USBD_StdDevReq+0x26>
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d857      	bhi.n	8005a76 <USBD_StdDevReq+0xce>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00f      	beq.n	80059ea <USBD_StdDevReq+0x42>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d153      	bne.n	8005a76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	32ae      	adds	r2, #174	@ 0xae
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e04a      	b.n	8005a80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	d83b      	bhi.n	8005a6a <USBD_StdDevReq+0xc2>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <USBD_StdDevReq+0x50>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005a61 	.word	0x08005a61
 8005a00:	08005a6b 	.word	0x08005a6b
 8005a04:	08005a57 	.word	0x08005a57
 8005a08:	08005a6b 	.word	0x08005a6b
 8005a0c:	08005a2b 	.word	0x08005a2b
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a6b 	.word	0x08005a6b
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a35 	.word	0x08005a35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa3c 	bl	8005ea0 <USBD_GetDescriptor>
          break;
 8005a28:	e024      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fba1 	bl	8006174 <USBD_SetAddress>
          break;
 8005a32:	e01f      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fbe0 	bl	80061fc <USBD_SetConfig>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a40:	e018      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fc83 	bl	8006350 <USBD_GetConfig>
          break;
 8005a4a:	e013      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fcb4 	bl	80063bc <USBD_GetStatus>
          break;
 8005a54:	e00e      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fce3 	bl	8006424 <USBD_SetFeature>
          break;
 8005a5e:	e009      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fd07 	bl	8006476 <USBD_ClrFeature>
          break;
 8005a68:	e004      	b.n	8005a74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fd5e 	bl	800652e <USBD_CtlError>
          break;
 8005a72:	bf00      	nop
      }
      break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fd58 	bl	800652e <USBD_CtlError>
      break;
 8005a7e:	bf00      	nop
  }

  return ret;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop

08005a8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	d005      	beq.n	8005ab2 <USBD_StdItfReq+0x26>
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d852      	bhi.n	8005b50 <USBD_StdItfReq+0xc4>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <USBD_StdItfReq+0x26>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d14e      	bne.n	8005b50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d840      	bhi.n	8005b42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	889b      	ldrh	r3, [r3, #4]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d836      	bhi.n	8005b38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	889b      	ldrh	r3, [r3, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fedb 	bl	800588e <USBD_CoreFindIF>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2bff      	cmp	r3, #255	@ 0xff
 8005ae0:	d01d      	beq.n	8005b1e <USBD_StdItfReq+0x92>
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11a      	bne.n	8005b1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ae8:	7bba      	ldrb	r2, [r7, #14]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32ae      	adds	r2, #174	@ 0xae
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00f      	beq.n	8005b18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005af8:	7bba      	ldrb	r2, [r7, #14]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b00:	7bba      	ldrb	r2, [r7, #14]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	32ae      	adds	r2, #174	@ 0xae
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b16:	e004      	b.n	8005b22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b1c:	e001      	b.n	8005b22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	88db      	ldrh	r3, [r3, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d110      	bne.n	8005b4c <USBD_StdItfReq+0xc0>
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10d      	bne.n	8005b4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fdaa 	bl	800668a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b36:	e009      	b.n	8005b4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fcf7 	bl	800652e <USBD_CtlError>
          break;
 8005b40:	e004      	b.n	8005b4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fcf2 	bl	800652e <USBD_CtlError>
          break;
 8005b4a:	e000      	b.n	8005b4e <USBD_StdItfReq+0xc2>
          break;
 8005b4c:	bf00      	nop
      }
      break;
 8005b4e:	e004      	b.n	8005b5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fceb 	bl	800652e <USBD_CtlError>
      break;
 8005b58:	bf00      	nop
  }

  return ret;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	889b      	ldrh	r3, [r3, #4]
 8005b76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d007      	beq.n	8005b94 <USBD_StdEPReq+0x30>
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	f200 817f 	bhi.w	8005e88 <USBD_StdEPReq+0x324>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02a      	beq.n	8005be4 <USBD_StdEPReq+0x80>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	f040 817a 	bne.w	8005e88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fe85 	bl	80058a8 <USBD_CoreFindEP>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ba2:	7b7b      	ldrb	r3, [r7, #13]
 8005ba4:	2bff      	cmp	r3, #255	@ 0xff
 8005ba6:	f000 8174 	beq.w	8005e92 <USBD_StdEPReq+0x32e>
 8005baa:	7b7b      	ldrb	r3, [r7, #13]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8170 	bne.w	8005e92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005bb2:	7b7a      	ldrb	r2, [r7, #13]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005bba:	7b7a      	ldrb	r2, [r7, #13]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32ae      	adds	r2, #174	@ 0xae
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8163 	beq.w	8005e92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bcc:	7b7a      	ldrb	r2, [r7, #13]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32ae      	adds	r2, #174	@ 0xae
 8005bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005be2:	e156      	b.n	8005e92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d008      	beq.n	8005bfe <USBD_StdEPReq+0x9a>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	f300 8145 	bgt.w	8005e7c <USBD_StdEPReq+0x318>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 809b 	beq.w	8005d2e <USBD_StdEPReq+0x1ca>
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d03c      	beq.n	8005c76 <USBD_StdEPReq+0x112>
 8005bfc:	e13e      	b.n	8005e7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d002      	beq.n	8005c10 <USBD_StdEPReq+0xac>
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d016      	beq.n	8005c3c <USBD_StdEPReq+0xd8>
 8005c0e:	e02c      	b.n	8005c6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <USBD_StdEPReq+0xce>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b80      	cmp	r3, #128	@ 0x80
 8005c1a:	d00a      	beq.n	8005c32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f873 	bl	8006d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f86f 	bl	8006d0c <USBD_LL_StallEP>
 8005c2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c30:	e020      	b.n	8005c74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc7a 	bl	800652e <USBD_CtlError>
              break;
 8005c3a:	e01b      	b.n	8005c74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10e      	bne.n	8005c62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <USBD_StdEPReq+0xfe>
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	2b80      	cmp	r3, #128	@ 0x80
 8005c4e:	d008      	beq.n	8005c62 <USBD_StdEPReq+0xfe>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	88db      	ldrh	r3, [r3, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f855 	bl	8006d0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fd11 	bl	800668a <USBD_CtlSendStatus>

              break;
 8005c68:	e004      	b.n	8005c74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fc5e 	bl	800652e <USBD_CtlError>
              break;
 8005c72:	bf00      	nop
          }
          break;
 8005c74:	e107      	b.n	8005e86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d002      	beq.n	8005c88 <USBD_StdEPReq+0x124>
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d016      	beq.n	8005cb4 <USBD_StdEPReq+0x150>
 8005c86:	e04b      	b.n	8005d20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00d      	beq.n	8005caa <USBD_StdEPReq+0x146>
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b80      	cmp	r3, #128	@ 0x80
 8005c92:	d00a      	beq.n	8005caa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f837 	bl	8006d0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c9e:	2180      	movs	r1, #128	@ 0x80
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 f833 	bl	8006d0c <USBD_LL_StallEP>
 8005ca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ca8:	e040      	b.n	8005d2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc3e 	bl	800652e <USBD_CtlError>
              break;
 8005cb2:	e03b      	b.n	8005d2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	885b      	ldrh	r3, [r3, #2]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d136      	bne.n	8005d2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 f83d 	bl	8006d4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fcda 	bl	800668a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fde4 	bl	80058a8 <USBD_CoreFindEP>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ce4:	7b7b      	ldrb	r3, [r7, #13]
 8005ce6:	2bff      	cmp	r3, #255	@ 0xff
 8005ce8:	d01f      	beq.n	8005d2a <USBD_StdEPReq+0x1c6>
 8005cea:	7b7b      	ldrb	r3, [r7, #13]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11c      	bne.n	8005d2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cf0:	7b7a      	ldrb	r2, [r7, #13]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005cf8:	7b7a      	ldrb	r2, [r7, #13]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	32ae      	adds	r2, #174	@ 0xae
 8005cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d08:	7b7a      	ldrb	r2, [r7, #13]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32ae      	adds	r2, #174	@ 0xae
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d1e:	e004      	b.n	8005d2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fc03 	bl	800652e <USBD_CtlError>
              break;
 8005d28:	e000      	b.n	8005d2c <USBD_StdEPReq+0x1c8>
              break;
 8005d2a:	bf00      	nop
          }
          break;
 8005d2c:	e0ab      	b.n	8005e86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d002      	beq.n	8005d40 <USBD_StdEPReq+0x1dc>
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d032      	beq.n	8005da4 <USBD_StdEPReq+0x240>
 8005d3e:	e097      	b.n	8005e70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <USBD_StdEPReq+0x1f2>
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	2b80      	cmp	r3, #128	@ 0x80
 8005d4a:	d004      	beq.n	8005d56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fbed 	bl	800652e <USBD_CtlError>
                break;
 8005d54:	e091      	b.n	8005e7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da0b      	bge.n	8005d76 <USBD_StdEPReq+0x212>
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	3310      	adds	r3, #16
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	3304      	adds	r3, #4
 8005d74:	e00b      	b.n	8005d8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fc37 	bl	8006610 <USBD_CtlSendData>
              break;
 8005da2:	e06a      	b.n	8005e7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da11      	bge.n	8005dd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	f003 020f 	and.w	r2, r3, #15
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3324      	adds	r3, #36	@ 0x24
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d117      	bne.n	8005df6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fbb0 	bl	800652e <USBD_CtlError>
                  break;
 8005dce:	e054      	b.n	8005e7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	f003 020f 	and.w	r2, r3, #15
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fb9d 	bl	800652e <USBD_CtlError>
                  break;
 8005df4:	e041      	b.n	8005e7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da0b      	bge.n	8005e16 <USBD_StdEPReq+0x2b2>
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4413      	add	r3, r2
 8005e12:	3304      	adds	r3, #4
 8005e14:	e00b      	b.n	8005e2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <USBD_StdEPReq+0x2d8>
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d103      	bne.n	8005e44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e00e      	b.n	8005e62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 ff9d 	bl	8006d88 <USBD_LL_IsStallEP>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2202      	movs	r2, #2
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fbd1 	bl	8006610 <USBD_CtlSendData>
              break;
 8005e6e:	e004      	b.n	8005e7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fb5b 	bl	800652e <USBD_CtlError>
              break;
 8005e78:	bf00      	nop
          }
          break;
 8005e7a:	e004      	b.n	8005e86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb55 	bl	800652e <USBD_CtlError>
          break;
 8005e84:	bf00      	nop
      }
      break;
 8005e86:	e005      	b.n	8005e94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb4f 	bl	800652e <USBD_CtlError>
      break;
 8005e90:	e000      	b.n	8005e94 <USBD_StdEPReq+0x330>
      break;
 8005e92:	bf00      	nop
  }

  return ret;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	885b      	ldrh	r3, [r3, #2]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	f200 8128 	bhi.w	8006116 <USBD_GetDescriptor+0x276>
 8005ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <USBD_GetDescriptor+0x2c>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	08005f01 	.word	0x08005f01
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08006117 	.word	0x08006117
 8005edc:	08006117 	.word	0x08006117
 8005ee0:	080060b7 	.word	0x080060b7
 8005ee4:	080060e3 	.word	0x080060e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7c12      	ldrb	r2, [r2, #16]
 8005ef4:	f107 0108 	add.w	r1, r7, #8
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
 8005efc:	60f8      	str	r0, [r7, #12]
      break;
 8005efe:	e112      	b.n	8006126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	7c1b      	ldrb	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10d      	bne.n	8005f24 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	f107 0208 	add.w	r2, r7, #8
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
 8005f18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	2202      	movs	r2, #2
 8005f20:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f22:	e100      	b.n	8006126 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	f107 0208 	add.w	r2, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	701a      	strb	r2, [r3, #0]
      break;
 8005f3e:	e0f2      	b.n	8006126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	885b      	ldrh	r3, [r3, #2]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	f200 80ac 	bhi.w	80060a4 <USBD_GetDescriptor+0x204>
 8005f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <USBD_GetDescriptor+0xb4>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f6d 	.word	0x08005f6d
 8005f58:	08005fa1 	.word	0x08005fa1
 8005f5c:	08005fd5 	.word	0x08005fd5
 8005f60:	08006009 	.word	0x08006009
 8005f64:	0800603d 	.word	0x0800603d
 8005f68:	08006071 	.word	0x08006071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	7c12      	ldrb	r2, [r2, #16]
 8005f84:	f107 0108 	add.w	r1, r7, #8
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f8e:	e091      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 facb 	bl	800652e <USBD_CtlError>
            err++;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f9e:	e089      	b.n	80060b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	7c12      	ldrb	r2, [r2, #16]
 8005fb8:	f107 0108 	add.w	r1, r7, #8
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fc2:	e077      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fab1 	bl	800652e <USBD_CtlError>
            err++;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fd2:	e06f      	b.n	80060b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff6:	e05d      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa97 	bl	800652e <USBD_CtlError>
            err++;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	3301      	adds	r3, #1
 8006004:	72fb      	strb	r3, [r7, #11]
          break;
 8006006:	e055      	b.n	80060b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7c12      	ldrb	r2, [r2, #16]
 8006020:	f107 0108 	add.w	r1, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800602a:	e043      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa7d 	bl	800652e <USBD_CtlError>
            err++;
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	3301      	adds	r3, #1
 8006038:	72fb      	strb	r3, [r7, #11]
          break;
 800603a:	e03b      	b.n	80060b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	7c12      	ldrb	r2, [r2, #16]
 8006054:	f107 0108 	add.w	r1, r7, #8
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800605e:	e029      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa63 	bl	800652e <USBD_CtlError>
            err++;
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	3301      	adds	r3, #1
 800606c:	72fb      	strb	r3, [r7, #11]
          break;
 800606e:	e021      	b.n	80060b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	7c12      	ldrb	r2, [r2, #16]
 8006088:	f107 0108 	add.w	r1, r7, #8
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
 8006090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006092:	e00f      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa49 	bl	800652e <USBD_CtlError>
            err++;
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	3301      	adds	r3, #1
 80060a0:	72fb      	strb	r3, [r7, #11]
          break;
 80060a2:	e007      	b.n	80060b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa41 	bl	800652e <USBD_CtlError>
          err++;
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	3301      	adds	r3, #1
 80060b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060b2:	bf00      	nop
      }
      break;
 80060b4:	e037      	b.n	8006126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7c1b      	ldrb	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	f107 0208 	add.w	r2, r7, #8
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
 80060ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060d0:	e029      	b.n	8006126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa2a 	bl	800652e <USBD_CtlError>
        err++;
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	3301      	adds	r3, #1
 80060de:	72fb      	strb	r3, [r7, #11]
      break;
 80060e0:	e021      	b.n	8006126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	7c1b      	ldrb	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	f107 0208 	add.w	r2, r7, #8
 80060f6:	4610      	mov	r0, r2
 80060f8:	4798      	blx	r3
 80060fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3301      	adds	r3, #1
 8006100:	2207      	movs	r2, #7
 8006102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006104:	e00f      	b.n	8006126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa10 	bl	800652e <USBD_CtlError>
        err++;
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	3301      	adds	r3, #1
 8006112:	72fb      	strb	r3, [r7, #11]
      break;
 8006114:	e007      	b.n	8006126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fa08 	bl	800652e <USBD_CtlError>
      err++;
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	3301      	adds	r3, #1
 8006122:	72fb      	strb	r3, [r7, #11]
      break;
 8006124:	bf00      	nop
  }

  if (err != 0U)
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11e      	bne.n	800616a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	88db      	ldrh	r3, [r3, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006134:	893b      	ldrh	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00e      	beq.n	8006158 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88da      	ldrh	r2, [r3, #6]
 800613e:	893b      	ldrh	r3, [r7, #8]
 8006140:	4293      	cmp	r3, r2
 8006142:	bf28      	it	cs
 8006144:	4613      	movcs	r3, r2
 8006146:	b29b      	uxth	r3, r3
 8006148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800614a:	893b      	ldrh	r3, [r7, #8]
 800614c:	461a      	mov	r2, r3
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa5d 	bl	8006610 <USBD_CtlSendData>
 8006156:	e009      	b.n	800616c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f9e7 	bl	800652e <USBD_CtlError>
 8006160:	e004      	b.n	800616c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa91 	bl	800668a <USBD_CtlSendStatus>
 8006168:	e000      	b.n	800616c <USBD_GetDescriptor+0x2cc>
    return;
 800616a:	bf00      	nop
  }
}
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	889b      	ldrh	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d131      	bne.n	80061ea <USBD_SetAddress+0x76>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	88db      	ldrh	r3, [r3, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d12d      	bne.n	80061ea <USBD_SetAddress+0x76>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	885b      	ldrh	r3, [r3, #2]
 8006192:	2b7f      	cmp	r3, #127	@ 0x7f
 8006194:	d829      	bhi.n	80061ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d104      	bne.n	80061b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9bc 	bl	800652e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	e01d      	b.n	80061f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fe0b 	bl	8006de0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa5d 	bl	800668a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	e009      	b.n	80061f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e8:	e004      	b.n	80061f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f99e 	bl	800652e <USBD_CtlError>
  }
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b4e      	ldr	r3, [pc, #312]	@ (800634c <USBD_SetConfig+0x150>)
 8006212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006214:	4b4d      	ldr	r3, [pc, #308]	@ (800634c <USBD_SetConfig+0x150>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d905      	bls.n	8006228 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f985 	bl	800652e <USBD_CtlError>
    return USBD_FAIL;
 8006224:	2303      	movs	r3, #3
 8006226:	e08c      	b.n	8006342 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d002      	beq.n	800623a <USBD_SetConfig+0x3e>
 8006234:	2b03      	cmp	r3, #3
 8006236:	d029      	beq.n	800628c <USBD_SetConfig+0x90>
 8006238:	e075      	b.n	8006326 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800623a:	4b44      	ldr	r3, [pc, #272]	@ (800634c <USBD_SetConfig+0x150>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d020      	beq.n	8006284 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006242:	4b42      	ldr	r3, [pc, #264]	@ (800634c <USBD_SetConfig+0x150>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800624c:	4b3f      	ldr	r3, [pc, #252]	@ (800634c <USBD_SetConfig+0x150>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fe ffe3 	bl	800521e <USBD_SetClassConfig>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f962 	bl	800652e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006272:	e065      	b.n	8006340 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa08 	bl	800668a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006282:	e05d      	b.n	8006340 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fa00 	bl	800668a <USBD_CtlSendStatus>
      break;
 800628a:	e059      	b.n	8006340 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800628c:	4b2f      	ldr	r3, [pc, #188]	@ (800634c <USBD_SetConfig+0x150>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d112      	bne.n	80062ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800629c:	4b2b      	ldr	r3, [pc, #172]	@ (800634c <USBD_SetConfig+0x150>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062a6:	4b29      	ldr	r3, [pc, #164]	@ (800634c <USBD_SetConfig+0x150>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fe ffd2 	bl	8005256 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9e9 	bl	800668a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062b8:	e042      	b.n	8006340 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062ba:	4b24      	ldr	r3, [pc, #144]	@ (800634c <USBD_SetConfig+0x150>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d02a      	beq.n	800631e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fe ffc0 	bl	8005256 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062d6:	4b1d      	ldr	r3, [pc, #116]	@ (800634c <USBD_SetConfig+0x150>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062e0:	4b1a      	ldr	r3, [pc, #104]	@ (800634c <USBD_SetConfig+0x150>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fe ff99 	bl	800521e <USBD_SetClassConfig>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00f      	beq.n	8006316 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f918 	bl	800652e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fe ffa5 	bl	8005256 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006314:	e014      	b.n	8006340 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9b7 	bl	800668a <USBD_CtlSendStatus>
      break;
 800631c:	e010      	b.n	8006340 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9b3 	bl	800668a <USBD_CtlSendStatus>
      break;
 8006324:	e00c      	b.n	8006340 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f900 	bl	800652e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <USBD_SetConfig+0x150>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fe ff8e 	bl	8005256 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
      break;
 800633e:	bf00      	nop
  }

  return ret;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	200001e4 	.word	0x200001e4

08006350 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	88db      	ldrh	r3, [r3, #6]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d004      	beq.n	800636c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8e2 	bl	800652e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800636a:	e023      	b.n	80063b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	dc02      	bgt.n	800637e <USBD_GetConfig+0x2e>
 8006378:	2b00      	cmp	r3, #0
 800637a:	dc03      	bgt.n	8006384 <USBD_GetConfig+0x34>
 800637c:	e015      	b.n	80063aa <USBD_GetConfig+0x5a>
 800637e:	2b03      	cmp	r3, #3
 8006380:	d00b      	beq.n	800639a <USBD_GetConfig+0x4a>
 8006382:	e012      	b.n	80063aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3308      	adds	r3, #8
 800638e:	2201      	movs	r2, #1
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f93c 	bl	8006610 <USBD_CtlSendData>
        break;
 8006398:	e00c      	b.n	80063b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	2201      	movs	r2, #1
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f934 	bl	8006610 <USBD_CtlSendData>
        break;
 80063a8:	e004      	b.n	80063b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f8be 	bl	800652e <USBD_CtlError>
        break;
 80063b2:	bf00      	nop
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d81e      	bhi.n	8006412 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	88db      	ldrh	r3, [r3, #6]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d004      	beq.n	80063e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8a5 	bl	800652e <USBD_CtlError>
        break;
 80063e4:	e01a      	b.n	800641c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f043 0202 	orr.w	r2, r3, #2
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	330c      	adds	r3, #12
 8006406:	2202      	movs	r2, #2
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f900 	bl	8006610 <USBD_CtlSendData>
      break;
 8006410:	e004      	b.n	800641c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f88a 	bl	800652e <USBD_CtlError>
      break;
 800641a:	bf00      	nop
  }
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	885b      	ldrh	r3, [r3, #2]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d107      	bne.n	8006446 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f923 	bl	800668a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006444:	e013      	b.n	800646e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	885b      	ldrh	r3, [r3, #2]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d10b      	bne.n	8006466 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	b29b      	uxth	r3, r3
 8006456:	b2da      	uxtb	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f913 	bl	800668a <USBD_CtlSendStatus>
}
 8006464:	e003      	b.n	800646e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f860 	bl	800652e <USBD_CtlError>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	2b02      	cmp	r3, #2
 800648c:	d80b      	bhi.n	80064a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	885b      	ldrh	r3, [r3, #2]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10c      	bne.n	80064b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8f3 	bl	800668a <USBD_CtlSendStatus>
      }
      break;
 80064a4:	e004      	b.n	80064b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f840 	bl	800652e <USBD_CtlError>
      break;
 80064ae:	e000      	b.n	80064b2 <USBD_ClrFeature+0x3c>
      break;
 80064b0:	bf00      	nop
  }
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	781a      	ldrb	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	781a      	ldrb	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff fa40 	bl	800596a <SWAPBYTE>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff fa33 	bl	800596a <SWAPBYTE>
 8006504:	4603      	mov	r3, r0
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fa26 	bl	800596a <SWAPBYTE>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	80da      	strh	r2, [r3, #6]
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006538:	2180      	movs	r1, #128	@ 0x80
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbe6 	bl	8006d0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006540:	2100      	movs	r1, #0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fbe2 	bl	8006d0c <USBD_LL_StallEP>
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d036      	beq.n	80065d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f000 f836 	bl	80065dc <USBD_GetLen>
 8006570:	4603      	mov	r3, r0
 8006572:	3301      	adds	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4413      	add	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	701a      	strb	r2, [r3, #0]
  idx++;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	3301      	adds	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	4413      	add	r3, r2
 8006596:	2203      	movs	r2, #3
 8006598:	701a      	strb	r2, [r3, #0]
  idx++;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	3301      	adds	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065a0:	e013      	b.n	80065ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	4413      	add	r3, r2
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3301      	adds	r3, #1
 80065b2:	613b      	str	r3, [r7, #16]
    idx++;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	3301      	adds	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	4413      	add	r3, r2
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	3301      	adds	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e7      	bne.n	80065a2 <USBD_GetString+0x52>
 80065d2:	e000      	b.n	80065d6 <USBD_GetString+0x86>
    return;
 80065d4:	bf00      	nop
  }
}
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065ec:	e005      	b.n	80065fa <USBD_GetLen+0x1e>
  {
    len++;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	3301      	adds	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f5      	bne.n	80065ee <USBD_GetLen+0x12>
  }

  return len;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fbf1 	bl	8006e1e <USBD_LL_Transmit>

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fbe0 	bl	8006e1e <USBD_LL_Transmit>

  return USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fbf0 	bl	8006e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800669a:	2300      	movs	r3, #0
 800669c:	2200      	movs	r2, #0
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fbbc 	bl	8006e1e <USBD_LL_Transmit>

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2205      	movs	r2, #5
 80066bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c0:	2300      	movs	r3, #0
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fbca 	bl	8006e60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80066dc:	2201      	movs	r2, #1
 80066de:	490e      	ldr	r1, [pc, #56]	@ (8006718 <MX_USB_DEVICE_Init+0x40>)
 80066e0:	480e      	ldr	r0, [pc, #56]	@ (800671c <MX_USB_DEVICE_Init+0x44>)
 80066e2:	f7fe fd1f 	bl	8005124 <USBD_Init>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066ec:	f7fa f80a 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 80066f0:	490b      	ldr	r1, [pc, #44]	@ (8006720 <MX_USB_DEVICE_Init+0x48>)
 80066f2:	480a      	ldr	r0, [pc, #40]	@ (800671c <MX_USB_DEVICE_Init+0x44>)
 80066f4:	f7fe fd46 	bl	8005184 <USBD_RegisterClass>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066fe:	f7fa f801 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006702:	4806      	ldr	r0, [pc, #24]	@ (800671c <MX_USB_DEVICE_Init+0x44>)
 8006704:	f7fe fd74 	bl	80051f0 <USBD_Start>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800670e:	f7f9 fff9 	bl	8000704 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200000cc 	.word	0x200000cc
 800671c:	200001e8 	.word	0x200001e8
 8006720:	2000000c 	.word	0x2000000c

08006724 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2212      	movs	r2, #18
 8006734:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8006736:	4b03      	ldr	r3, [pc, #12]	@ (8006744 <USBD_HS_DeviceDescriptor+0x20>)
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	200000e8 	.word	0x200000e8

08006748 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	6039      	str	r1, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2204      	movs	r2, #4
 8006758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800675a:	4b03      	ldr	r3, [pc, #12]	@ (8006768 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	200000fc 	.word	0x200000fc

0800676c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	6039      	str	r1, [r7, #0]
 8006776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4907      	ldr	r1, [pc, #28]	@ (80067a0 <USBD_HS_ProductStrDescriptor+0x34>)
 8006782:	4808      	ldr	r0, [pc, #32]	@ (80067a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8006784:	f7ff fee4 	bl	8006550 <USBD_GetString>
 8006788:	e004      	b.n	8006794 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4904      	ldr	r1, [pc, #16]	@ (80067a0 <USBD_HS_ProductStrDescriptor+0x34>)
 800678e:	4805      	ldr	r0, [pc, #20]	@ (80067a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8006790:	f7ff fede 	bl	8006550 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006794:	4b02      	ldr	r3, [pc, #8]	@ (80067a0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	200004c4 	.word	0x200004c4
 80067a4:	080078cc 	.word	0x080078cc

080067a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	4904      	ldr	r1, [pc, #16]	@ (80067c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80067b8:	4804      	ldr	r0, [pc, #16]	@ (80067cc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80067ba:	f7ff fec9 	bl	8006550 <USBD_GetString>
  return USBD_StrDesc;
 80067be:	4b02      	ldr	r3, [pc, #8]	@ (80067c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200004c4 	.word	0x200004c4
 80067cc:	080078e4 	.word	0x080078e4

080067d0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	221a      	movs	r2, #26
 80067e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067e2:	f000 f843 	bl	800686c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80067e6:	4b02      	ldr	r3, [pc, #8]	@ (80067f0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000100 	.word	0x20000100

080067f4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	4907      	ldr	r1, [pc, #28]	@ (8006828 <USBD_HS_ConfigStrDescriptor+0x34>)
 800680a:	4808      	ldr	r0, [pc, #32]	@ (800682c <USBD_HS_ConfigStrDescriptor+0x38>)
 800680c:	f7ff fea0 	bl	8006550 <USBD_GetString>
 8006810:	e004      	b.n	800681c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	4904      	ldr	r1, [pc, #16]	@ (8006828 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006816:	4805      	ldr	r0, [pc, #20]	@ (800682c <USBD_HS_ConfigStrDescriptor+0x38>)
 8006818:	f7ff fe9a 	bl	8006550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800681c:	4b02      	ldr	r3, [pc, #8]	@ (8006828 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	200004c4 	.word	0x200004c4
 800682c:	080078f8 	.word	0x080078f8

08006830 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4907      	ldr	r1, [pc, #28]	@ (8006864 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006846:	4808      	ldr	r0, [pc, #32]	@ (8006868 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006848:	f7ff fe82 	bl	8006550 <USBD_GetString>
 800684c:	e004      	b.n	8006858 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4904      	ldr	r1, [pc, #16]	@ (8006864 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006852:	4805      	ldr	r0, [pc, #20]	@ (8006868 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006854:	f7ff fe7c 	bl	8006550 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006858:	4b02      	ldr	r3, [pc, #8]	@ (8006864 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200004c4 	.word	0x200004c4
 8006868:	08007904 	.word	0x08007904

0800686c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4413      	add	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006880:	2208      	movs	r2, #8
 8006882:	4906      	ldr	r1, [pc, #24]	@ (800689c <Get_SerialNum+0x30>)
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f80d 	bl	80068a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800688a:	2204      	movs	r2, #4
 800688c:	4904      	ldr	r1, [pc, #16]	@ (80068a0 <Get_SerialNum+0x34>)
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f808 	bl	80068a4 <IntToUnicode>
  }
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000102 	.word	0x20000102
 80068a0:	20000112 	.word	0x20000112

080068a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]
 80068ba:	e027      	b.n	800690c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	0f1b      	lsrs	r3, r3, #28
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d80b      	bhi.n	80068dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	0f1b      	lsrs	r3, r3, #28
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4619      	mov	r1, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	440b      	add	r3, r1
 80068d4:	3230      	adds	r2, #48	@ 0x30
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	e00a      	b.n	80068f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0f1b      	lsrs	r3, r3, #28
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4619      	mov	r1, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	440b      	add	r3, r1
 80068ec:	3237      	adds	r2, #55	@ 0x37
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	3301      	adds	r3, #1
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	3301      	adds	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
 800690c:	7dfa      	ldrb	r2, [r7, #23]
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	429a      	cmp	r2, r3
 8006912:	d3d3      	bcc.n	80068bc <IntToUnicode+0x18>
  }
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	@ 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800692c:	f107 0314 	add.w	r3, r7, #20
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	609a      	str	r2, [r3, #8]
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1d      	ldr	r2, [pc, #116]	@ (80069b8 <HAL_PCD_MspInit+0x94>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d134      	bne.n	80069b0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	4b1c      	ldr	r3, [pc, #112]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694e:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	6313      	str	r3, [r2, #48]	@ 0x30
 8006956:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006962:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8006966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006968:	2302      	movs	r3, #2
 800696a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006970:	2303      	movs	r3, #3
 8006972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006974:	230c      	movs	r3, #12
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006978:	f107 0314 	add.w	r3, r7, #20
 800697c:	4619      	mov	r1, r3
 800697e:	4810      	ldr	r0, [pc, #64]	@ (80069c0 <HAL_PCD_MspInit+0x9c>)
 8006980:	f7fa f9dc 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	4a0b      	ldr	r2, [pc, #44]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 800698e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006992:	6313      	str	r3, [r2, #48]	@ 0x30
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <HAL_PCD_MspInit+0x98>)
 8006996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	204d      	movs	r0, #77	@ 0x4d
 80069a6:	f7fa f992 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80069aa:	204d      	movs	r0, #77	@ 0x4d
 80069ac:	f7fa f9ab 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80069b0:	bf00      	nop
 80069b2:	3728      	adds	r7, #40	@ 0x28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40040000 	.word	0x40040000
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40020400 	.word	0x40020400

080069c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fe fc55 	bl	800528a <USBD_LL_SetupStage>
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7fe fc8f 	bl	8005334 <USBD_LL_DataOutStage>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3320      	adds	r3, #32
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	4619      	mov	r1, r3
 8006a46:	f7fe fd28 	bl	800549a <USBD_LL_DataInStage>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fe62 	bl	800572a <USBD_LL_SOF>
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a76:	2301      	movs	r3, #1
 8006a78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	79db      	ldrb	r3, [r3, #7]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	e008      	b.n	8006a9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	79db      	ldrb	r3, [r3, #7]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d102      	bne.n	8006a96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e001      	b.n	8006a9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a96:	f7f9 fe35 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006aa0:	7bfa      	ldrb	r2, [r7, #15]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fdfc 	bl	80056a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fda4 	bl	80055fe <USBD_LL_Reset>
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fdf7 	bl	80056c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7adb      	ldrb	r3, [r3, #11]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006af4:	4b04      	ldr	r3, [pc, #16]	@ (8006b08 <HAL_PCD_SuspendCallback+0x48>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	4a03      	ldr	r2, [pc, #12]	@ (8006b08 <HAL_PCD_SuspendCallback+0x48>)
 8006afa:	f043 0306 	orr.w	r3, r3, #6
 8006afe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed00 	.word	0xe000ed00

08006b0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fded 	bl	80056fa <USBD_LL_Resume>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fe45 	bl	80057ce <USBD_LL_IsoOUTIncomplete>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b5e:	78fa      	ldrb	r2, [r7, #3]
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fe01 	bl	800576a <USBD_LL_IsoINIncomplete>
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fe57 	bl	8005832 <USBD_LL_DevConnected>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fe54 	bl	8005848 <USBD_LL_DevDisconnected>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d140      	bne.n	8006c3a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8006bb8:	4a22      	ldr	r2, [pc, #136]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a20      	ldr	r2, [pc, #128]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bc4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bca:	4a1f      	ldr	r2, [pc, #124]	@ (8006c48 <USBD_LL_Init+0xa0>)
 8006bcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8006bce:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bd0:	2206      	movs	r2, #6
 8006bd2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006bda:	4b1a      	ldr	r3, [pc, #104]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006be0:	4b18      	ldr	r3, [pc, #96]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006be2:	2202      	movs	r2, #2
 8006be4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006be6:	4b17      	ldr	r3, [pc, #92]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006bec:	4b15      	ldr	r3, [pc, #84]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8006bf2:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006bf8:	4b12      	ldr	r3, [pc, #72]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8006bfe:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006c04:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006c0a:	480e      	ldr	r0, [pc, #56]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c0c:	f7fa fa42 	bl	8001094 <HAL_PCD_Init>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8006c16:	f7f9 fd75 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8006c1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006c1e:	4809      	ldr	r0, [pc, #36]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c20:	f7fb fc53 	bl	80024ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8006c24:	2280      	movs	r2, #128	@ 0x80
 8006c26:	2100      	movs	r1, #0
 8006c28:	4806      	ldr	r0, [pc, #24]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c2a:	f7fb fc07 	bl	800243c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8006c2e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8006c32:	2101      	movs	r1, #1
 8006c34:	4803      	ldr	r0, [pc, #12]	@ (8006c44 <USBD_LL_Init+0x9c>)
 8006c36:	f7fb fc01 	bl	800243c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200006c4 	.word	0x200006c4
 8006c48:	40040000 	.word	0x40040000

08006c4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fa fb25 	bl	80012b2 <HAL_PCD_Start>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f930 	bl	8006ed4 <USBD_Get_USB_Status>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	70fb      	strb	r3, [r7, #3]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70bb      	strb	r3, [r7, #2]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006caa:	78bb      	ldrb	r3, [r7, #2]
 8006cac:	883a      	ldrh	r2, [r7, #0]
 8006cae:	78f9      	ldrb	r1, [r7, #3]
 8006cb0:	f7fa fff9 	bl	8001ca6 <HAL_PCD_EP_Open>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f90a 	bl	8006ed4 <USBD_Get_USB_Status>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fb f842 	bl	8001d76 <HAL_PCD_EP_Close>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f8eb 	bl	8006ed4 <USBD_Get_USB_Status>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fb f8e2 	bl	8001ef4 <HAL_PCD_EP_SetStall>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f8cc 	bl	8006ed4 <USBD_Get_USB_Status>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fb f926 	bl	8001fba <HAL_PCD_EP_ClrStall>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 f8ad 	bl	8006ed4 <USBD_Get_USB_Status>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da0b      	bge.n	8006dbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	4613      	mov	r3, r2
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3316      	adds	r3, #22
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	e00b      	b.n	8006dd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006dd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dfa:	78fa      	ldrb	r2, [r7, #3]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fa ff2d 	bl	8001c5e <HAL_PCD_SetAddress>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f862 	bl	8006ed4 <USBD_Get_USB_Status>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e3c:	7af9      	ldrb	r1, [r7, #11]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f7fb f81d 	bl	8001e80 <HAL_PCD_EP_Transmit>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 f841 	bl	8006ed4 <USBD_Get_USB_Status>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e7e:	7af9      	ldrb	r1, [r7, #11]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	f7fa ffc1 	bl	8001e0a <HAL_PCD_EP_Receive>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f820 	bl	8006ed4 <USBD_Get_USB_Status>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e98:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006eac:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <USBD_static_malloc+0x18>)
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000ba8 	.word	0x20000ba8

08006ec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]

}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d817      	bhi.n	8006f18 <USBD_Get_USB_Status+0x44>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <USBD_Get_USB_Status+0x1c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f07 	.word	0x08006f07
 8006ef8:	08006f0d 	.word	0x08006f0d
 8006efc:	08006f13 	.word	0x08006f13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
    break;
 8006f04:	e00b      	b.n	8006f1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0a:	e008      	b.n	8006f1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f10:	e005      	b.n	8006f1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	73fb      	strb	r3, [r7, #15]
    break;
 8006f16:	e002      	b.n	8006f1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f1c:	bf00      	nop
  }
  return usb_status;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <__sflush_r>:
 8006f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	0716      	lsls	r6, r2, #28
 8006f36:	4605      	mov	r5, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d454      	bmi.n	8006fe6 <__sflush_r+0xba>
 8006f3c:	684b      	ldr	r3, [r1, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dc02      	bgt.n	8006f48 <__sflush_r+0x1c>
 8006f42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd48      	ble.n	8006fda <__sflush_r+0xae>
 8006f48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d045      	beq.n	8006fda <__sflush_r+0xae>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f54:	682f      	ldr	r7, [r5, #0]
 8006f56:	6a21      	ldr	r1, [r4, #32]
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	d030      	beq.n	8006fbe <__sflush_r+0x92>
 8006f5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	0759      	lsls	r1, r3, #29
 8006f62:	d505      	bpl.n	8006f70 <__sflush_r+0x44>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f6a:	b10b      	cbz	r3, 8006f70 <__sflush_r+0x44>
 8006f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	2300      	movs	r3, #0
 8006f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f74:	6a21      	ldr	r1, [r4, #32]
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b0      	blx	r6
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	d106      	bne.n	8006f8e <__sflush_r+0x62>
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	291d      	cmp	r1, #29
 8006f84:	d82b      	bhi.n	8006fde <__sflush_r+0xb2>
 8006f86:	4a2a      	ldr	r2, [pc, #168]	@ (8007030 <__sflush_r+0x104>)
 8006f88:	410a      	asrs	r2, r1
 8006f8a:	07d6      	lsls	r6, r2, #31
 8006f8c:	d427      	bmi.n	8006fde <__sflush_r+0xb2>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6062      	str	r2, [r4, #4]
 8006f92:	04d9      	lsls	r1, r3, #19
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	d504      	bpl.n	8006fa4 <__sflush_r+0x78>
 8006f9a:	1c42      	adds	r2, r0, #1
 8006f9c:	d101      	bne.n	8006fa2 <__sflush_r+0x76>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	b903      	cbnz	r3, 8006fa4 <__sflush_r+0x78>
 8006fa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fa6:	602f      	str	r7, [r5, #0]
 8006fa8:	b1b9      	cbz	r1, 8006fda <__sflush_r+0xae>
 8006faa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d002      	beq.n	8006fb8 <__sflush_r+0x8c>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 faee 	bl	8007594 <_free_r>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fbc:	e00d      	b.n	8006fda <__sflush_r+0xae>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b0      	blx	r6
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	1c50      	adds	r0, r2, #1
 8006fc8:	d1c9      	bne.n	8006f5e <__sflush_r+0x32>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0c6      	beq.n	8006f5e <__sflush_r+0x32>
 8006fd0:	2b1d      	cmp	r3, #29
 8006fd2:	d001      	beq.n	8006fd8 <__sflush_r+0xac>
 8006fd4:	2b16      	cmp	r3, #22
 8006fd6:	d11e      	bne.n	8007016 <__sflush_r+0xea>
 8006fd8:	602f      	str	r7, [r5, #0]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e022      	b.n	8007024 <__sflush_r+0xf8>
 8006fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	e01b      	b.n	800701e <__sflush_r+0xf2>
 8006fe6:	690f      	ldr	r7, [r1, #16]
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	d0f6      	beq.n	8006fda <__sflush_r+0xae>
 8006fec:	0793      	lsls	r3, r2, #30
 8006fee:	680e      	ldr	r6, [r1, #0]
 8006ff0:	bf08      	it	eq
 8006ff2:	694b      	ldreq	r3, [r1, #20]
 8006ff4:	600f      	str	r7, [r1, #0]
 8006ff6:	bf18      	it	ne
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	eba6 0807 	sub.w	r8, r6, r7
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	dde9      	ble.n	8006fda <__sflush_r+0xae>
 8007006:	6a21      	ldr	r1, [r4, #32]
 8007008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800700a:	4643      	mov	r3, r8
 800700c:	463a      	mov	r2, r7
 800700e:	4628      	mov	r0, r5
 8007010:	47b0      	blx	r6
 8007012:	2800      	cmp	r0, #0
 8007014:	dc08      	bgt.n	8007028 <__sflush_r+0xfc>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	4407      	add	r7, r0
 800702a:	eba8 0800 	sub.w	r8, r8, r0
 800702e:	e7e7      	b.n	8007000 <__sflush_r+0xd4>
 8007030:	dfbffffe 	.word	0xdfbffffe

08007034 <_fflush_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b913      	cbnz	r3, 8007044 <_fflush_r+0x10>
 800703e:	2500      	movs	r5, #0
 8007040:	4628      	mov	r0, r5
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	b118      	cbz	r0, 800704e <_fflush_r+0x1a>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <_fflush_r+0x1a>
 800704a:	f000 f8bb 	bl	80071c4 <__sinit>
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f3      	beq.n	800703e <_fflush_r+0xa>
 8007056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	d404      	bmi.n	8007066 <_fflush_r+0x32>
 800705c:	0599      	lsls	r1, r3, #22
 800705e:	d402      	bmi.n	8007066 <_fflush_r+0x32>
 8007060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007062:	f000 fa94 	bl	800758e <__retarget_lock_acquire_recursive>
 8007066:	4628      	mov	r0, r5
 8007068:	4621      	mov	r1, r4
 800706a:	f7ff ff5f 	bl	8006f2c <__sflush_r>
 800706e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007070:	07da      	lsls	r2, r3, #31
 8007072:	4605      	mov	r5, r0
 8007074:	d4e4      	bmi.n	8007040 <_fflush_r+0xc>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d4e1      	bmi.n	8007040 <_fflush_r+0xc>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f000 fa87 	bl	8007590 <__retarget_lock_release_recursive>
 8007082:	e7dd      	b.n	8007040 <_fflush_r+0xc>

08007084 <fflush>:
 8007084:	4601      	mov	r1, r0
 8007086:	b920      	cbnz	r0, 8007092 <fflush+0xe>
 8007088:	4a04      	ldr	r2, [pc, #16]	@ (800709c <fflush+0x18>)
 800708a:	4905      	ldr	r1, [pc, #20]	@ (80070a0 <fflush+0x1c>)
 800708c:	4805      	ldr	r0, [pc, #20]	@ (80070a4 <fflush+0x20>)
 800708e:	f000 b8b1 	b.w	80071f4 <_fwalk_sglue>
 8007092:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <fflush+0x24>)
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	f7ff bfcd 	b.w	8007034 <_fflush_r>
 800709a:	bf00      	nop
 800709c:	2000011c 	.word	0x2000011c
 80070a0:	08007035 	.word	0x08007035
 80070a4:	2000012c 	.word	0x2000012c
 80070a8:	20000128 	.word	0x20000128

080070ac <std>:
 80070ac:	2300      	movs	r3, #0
 80070ae:	b510      	push	{r4, lr}
 80070b0:	4604      	mov	r4, r0
 80070b2:	e9c0 3300 	strd	r3, r3, [r0]
 80070b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ba:	6083      	str	r3, [r0, #8]
 80070bc:	8181      	strh	r1, [r0, #12]
 80070be:	6643      	str	r3, [r0, #100]	@ 0x64
 80070c0:	81c2      	strh	r2, [r0, #14]
 80070c2:	6183      	str	r3, [r0, #24]
 80070c4:	4619      	mov	r1, r3
 80070c6:	2208      	movs	r2, #8
 80070c8:	305c      	adds	r0, #92	@ 0x5c
 80070ca:	f000 f9e7 	bl	800749c <memset>
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <std+0x58>)
 80070d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <std+0x5c>)
 80070d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <std+0x60>)
 80070d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070da:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <std+0x64>)
 80070dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80070de:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <std+0x68>)
 80070e0:	6224      	str	r4, [r4, #32]
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d006      	beq.n	80070f4 <std+0x48>
 80070e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070ea:	4294      	cmp	r4, r2
 80070ec:	d002      	beq.n	80070f4 <std+0x48>
 80070ee:	33d0      	adds	r3, #208	@ 0xd0
 80070f0:	429c      	cmp	r4, r3
 80070f2:	d105      	bne.n	8007100 <std+0x54>
 80070f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070fc:	f000 ba46 	b.w	800758c <__retarget_lock_init_recursive>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	bf00      	nop
 8007104:	080072ed 	.word	0x080072ed
 8007108:	0800730f 	.word	0x0800730f
 800710c:	08007347 	.word	0x08007347
 8007110:	0800736b 	.word	0x0800736b
 8007114:	20000bbc 	.word	0x20000bbc

08007118 <stdio_exit_handler>:
 8007118:	4a02      	ldr	r2, [pc, #8]	@ (8007124 <stdio_exit_handler+0xc>)
 800711a:	4903      	ldr	r1, [pc, #12]	@ (8007128 <stdio_exit_handler+0x10>)
 800711c:	4803      	ldr	r0, [pc, #12]	@ (800712c <stdio_exit_handler+0x14>)
 800711e:	f000 b869 	b.w	80071f4 <_fwalk_sglue>
 8007122:	bf00      	nop
 8007124:	2000011c 	.word	0x2000011c
 8007128:	08007035 	.word	0x08007035
 800712c:	2000012c 	.word	0x2000012c

08007130 <cleanup_stdio>:
 8007130:	6841      	ldr	r1, [r0, #4]
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <cleanup_stdio+0x34>)
 8007134:	4299      	cmp	r1, r3
 8007136:	b510      	push	{r4, lr}
 8007138:	4604      	mov	r4, r0
 800713a:	d001      	beq.n	8007140 <cleanup_stdio+0x10>
 800713c:	f7ff ff7a 	bl	8007034 <_fflush_r>
 8007140:	68a1      	ldr	r1, [r4, #8]
 8007142:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <cleanup_stdio+0x38>)
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <cleanup_stdio+0x1e>
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff ff73 	bl	8007034 <_fflush_r>
 800714e:	68e1      	ldr	r1, [r4, #12]
 8007150:	4b06      	ldr	r3, [pc, #24]	@ (800716c <cleanup_stdio+0x3c>)
 8007152:	4299      	cmp	r1, r3
 8007154:	d004      	beq.n	8007160 <cleanup_stdio+0x30>
 8007156:	4620      	mov	r0, r4
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f7ff bf6a 	b.w	8007034 <_fflush_r>
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	20000bbc 	.word	0x20000bbc
 8007168:	20000c24 	.word	0x20000c24
 800716c:	20000c8c 	.word	0x20000c8c

08007170 <global_stdio_init.part.0>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <global_stdio_init.part.0+0x30>)
 8007174:	4c0b      	ldr	r4, [pc, #44]	@ (80071a4 <global_stdio_init.part.0+0x34>)
 8007176:	4a0c      	ldr	r2, [pc, #48]	@ (80071a8 <global_stdio_init.part.0+0x38>)
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	4620      	mov	r0, r4
 800717c:	2200      	movs	r2, #0
 800717e:	2104      	movs	r1, #4
 8007180:	f7ff ff94 	bl	80070ac <std>
 8007184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007188:	2201      	movs	r2, #1
 800718a:	2109      	movs	r1, #9
 800718c:	f7ff ff8e 	bl	80070ac <std>
 8007190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007194:	2202      	movs	r2, #2
 8007196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719a:	2112      	movs	r1, #18
 800719c:	f7ff bf86 	b.w	80070ac <std>
 80071a0:	20000cf4 	.word	0x20000cf4
 80071a4:	20000bbc 	.word	0x20000bbc
 80071a8:	08007119 	.word	0x08007119

080071ac <__sfp_lock_acquire>:
 80071ac:	4801      	ldr	r0, [pc, #4]	@ (80071b4 <__sfp_lock_acquire+0x8>)
 80071ae:	f000 b9ee 	b.w	800758e <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	20000cfd 	.word	0x20000cfd

080071b8 <__sfp_lock_release>:
 80071b8:	4801      	ldr	r0, [pc, #4]	@ (80071c0 <__sfp_lock_release+0x8>)
 80071ba:	f000 b9e9 	b.w	8007590 <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	20000cfd 	.word	0x20000cfd

080071c4 <__sinit>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4604      	mov	r4, r0
 80071c8:	f7ff fff0 	bl	80071ac <__sfp_lock_acquire>
 80071cc:	6a23      	ldr	r3, [r4, #32]
 80071ce:	b11b      	cbz	r3, 80071d8 <__sinit+0x14>
 80071d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d4:	f7ff bff0 	b.w	80071b8 <__sfp_lock_release>
 80071d8:	4b04      	ldr	r3, [pc, #16]	@ (80071ec <__sinit+0x28>)
 80071da:	6223      	str	r3, [r4, #32]
 80071dc:	4b04      	ldr	r3, [pc, #16]	@ (80071f0 <__sinit+0x2c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f5      	bne.n	80071d0 <__sinit+0xc>
 80071e4:	f7ff ffc4 	bl	8007170 <global_stdio_init.part.0>
 80071e8:	e7f2      	b.n	80071d0 <__sinit+0xc>
 80071ea:	bf00      	nop
 80071ec:	08007131 	.word	0x08007131
 80071f0:	20000cf4 	.word	0x20000cf4

080071f4 <_fwalk_sglue>:
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	4607      	mov	r7, r0
 80071fa:	4688      	mov	r8, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	2600      	movs	r6, #0
 8007200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007204:	f1b9 0901 	subs.w	r9, r9, #1
 8007208:	d505      	bpl.n	8007216 <_fwalk_sglue+0x22>
 800720a:	6824      	ldr	r4, [r4, #0]
 800720c:	2c00      	cmp	r4, #0
 800720e:	d1f7      	bne.n	8007200 <_fwalk_sglue+0xc>
 8007210:	4630      	mov	r0, r6
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d907      	bls.n	800722c <_fwalk_sglue+0x38>
 800721c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007220:	3301      	adds	r3, #1
 8007222:	d003      	beq.n	800722c <_fwalk_sglue+0x38>
 8007224:	4629      	mov	r1, r5
 8007226:	4638      	mov	r0, r7
 8007228:	47c0      	blx	r8
 800722a:	4306      	orrs	r6, r0
 800722c:	3568      	adds	r5, #104	@ 0x68
 800722e:	e7e9      	b.n	8007204 <_fwalk_sglue+0x10>

08007230 <_puts_r>:
 8007230:	6a03      	ldr	r3, [r0, #32]
 8007232:	b570      	push	{r4, r5, r6, lr}
 8007234:	6884      	ldr	r4, [r0, #8]
 8007236:	4605      	mov	r5, r0
 8007238:	460e      	mov	r6, r1
 800723a:	b90b      	cbnz	r3, 8007240 <_puts_r+0x10>
 800723c:	f7ff ffc2 	bl	80071c4 <__sinit>
 8007240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d405      	bmi.n	8007252 <_puts_r+0x22>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	0598      	lsls	r0, r3, #22
 800724a:	d402      	bmi.n	8007252 <_puts_r+0x22>
 800724c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800724e:	f000 f99e 	bl	800758e <__retarget_lock_acquire_recursive>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	0719      	lsls	r1, r3, #28
 8007256:	d502      	bpl.n	800725e <_puts_r+0x2e>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d135      	bne.n	80072ca <_puts_r+0x9a>
 800725e:	4621      	mov	r1, r4
 8007260:	4628      	mov	r0, r5
 8007262:	f000 f8c5 	bl	80073f0 <__swsetup_r>
 8007266:	b380      	cbz	r0, 80072ca <_puts_r+0x9a>
 8007268:	f04f 35ff 	mov.w	r5, #4294967295
 800726c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800726e:	07da      	lsls	r2, r3, #31
 8007270:	d405      	bmi.n	800727e <_puts_r+0x4e>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	059b      	lsls	r3, r3, #22
 8007276:	d402      	bmi.n	800727e <_puts_r+0x4e>
 8007278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727a:	f000 f989 	bl	8007590 <__retarget_lock_release_recursive>
 800727e:	4628      	mov	r0, r5
 8007280:	bd70      	pop	{r4, r5, r6, pc}
 8007282:	2b00      	cmp	r3, #0
 8007284:	da04      	bge.n	8007290 <_puts_r+0x60>
 8007286:	69a2      	ldr	r2, [r4, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	dc17      	bgt.n	80072bc <_puts_r+0x8c>
 800728c:	290a      	cmp	r1, #10
 800728e:	d015      	beq.n	80072bc <_puts_r+0x8c>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	6022      	str	r2, [r4, #0]
 8007296:	7019      	strb	r1, [r3, #0]
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800729e:	3b01      	subs	r3, #1
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	2900      	cmp	r1, #0
 80072a4:	d1ed      	bne.n	8007282 <_puts_r+0x52>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da11      	bge.n	80072ce <_puts_r+0x9e>
 80072aa:	4622      	mov	r2, r4
 80072ac:	210a      	movs	r1, #10
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f85f 	bl	8007372 <__swbuf_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0d7      	beq.n	8007268 <_puts_r+0x38>
 80072b8:	250a      	movs	r5, #10
 80072ba:	e7d7      	b.n	800726c <_puts_r+0x3c>
 80072bc:	4622      	mov	r2, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f857 	bl	8007372 <__swbuf_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d1e7      	bne.n	8007298 <_puts_r+0x68>
 80072c8:	e7ce      	b.n	8007268 <_puts_r+0x38>
 80072ca:	3e01      	subs	r6, #1
 80072cc:	e7e4      	b.n	8007298 <_puts_r+0x68>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	6022      	str	r2, [r4, #0]
 80072d4:	220a      	movs	r2, #10
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e7ee      	b.n	80072b8 <_puts_r+0x88>
	...

080072dc <puts>:
 80072dc:	4b02      	ldr	r3, [pc, #8]	@ (80072e8 <puts+0xc>)
 80072de:	4601      	mov	r1, r0
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	f7ff bfa5 	b.w	8007230 <_puts_r>
 80072e6:	bf00      	nop
 80072e8:	20000128 	.word	0x20000128

080072ec <__sread>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	460c      	mov	r4, r1
 80072f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f4:	f000 f8fc 	bl	80074f0 <_read_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	bfab      	itete	ge
 80072fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007300:	181b      	addge	r3, r3, r0
 8007302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007306:	bfac      	ite	ge
 8007308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800730a:	81a3      	strhlt	r3, [r4, #12]
 800730c:	bd10      	pop	{r4, pc}

0800730e <__swrite>:
 800730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007312:	461f      	mov	r7, r3
 8007314:	898b      	ldrh	r3, [r1, #12]
 8007316:	05db      	lsls	r3, r3, #23
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	4616      	mov	r6, r2
 800731e:	d505      	bpl.n	800732c <__swrite+0x1e>
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	2302      	movs	r3, #2
 8007326:	2200      	movs	r2, #0
 8007328:	f000 f8d0 	bl	80074cc <_lseek_r>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	4632      	mov	r2, r6
 800733a:	463b      	mov	r3, r7
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	f000 b8e7 	b.w	8007514 <_write_r>

08007346 <__sseek>:
 8007346:	b510      	push	{r4, lr}
 8007348:	460c      	mov	r4, r1
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 f8bd 	bl	80074cc <_lseek_r>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	bf15      	itete	ne
 8007358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800735a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800735e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007362:	81a3      	strheq	r3, [r4, #12]
 8007364:	bf18      	it	ne
 8007366:	81a3      	strhne	r3, [r4, #12]
 8007368:	bd10      	pop	{r4, pc}

0800736a <__sclose>:
 800736a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736e:	f000 b89d 	b.w	80074ac <_close_r>

08007372 <__swbuf_r>:
 8007372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007374:	460e      	mov	r6, r1
 8007376:	4614      	mov	r4, r2
 8007378:	4605      	mov	r5, r0
 800737a:	b118      	cbz	r0, 8007384 <__swbuf_r+0x12>
 800737c:	6a03      	ldr	r3, [r0, #32]
 800737e:	b90b      	cbnz	r3, 8007384 <__swbuf_r+0x12>
 8007380:	f7ff ff20 	bl	80071c4 <__sinit>
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	60a3      	str	r3, [r4, #8]
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	071a      	lsls	r2, r3, #28
 800738c:	d501      	bpl.n	8007392 <__swbuf_r+0x20>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	b943      	cbnz	r3, 80073a4 <__swbuf_r+0x32>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 f82b 	bl	80073f0 <__swsetup_r>
 800739a:	b118      	cbz	r0, 80073a4 <__swbuf_r+0x32>
 800739c:	f04f 37ff 	mov.w	r7, #4294967295
 80073a0:	4638      	mov	r0, r7
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	1a98      	subs	r0, r3, r2
 80073aa:	6963      	ldr	r3, [r4, #20]
 80073ac:	b2f6      	uxtb	r6, r6
 80073ae:	4283      	cmp	r3, r0
 80073b0:	4637      	mov	r7, r6
 80073b2:	dc05      	bgt.n	80073c0 <__swbuf_r+0x4e>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f7ff fe3c 	bl	8007034 <_fflush_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d1ed      	bne.n	800739c <__swbuf_r+0x2a>
 80073c0:	68a3      	ldr	r3, [r4, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60a3      	str	r3, [r4, #8]
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	6022      	str	r2, [r4, #0]
 80073cc:	701e      	strb	r6, [r3, #0]
 80073ce:	6962      	ldr	r2, [r4, #20]
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d004      	beq.n	80073e0 <__swbuf_r+0x6e>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	07db      	lsls	r3, r3, #31
 80073da:	d5e1      	bpl.n	80073a0 <__swbuf_r+0x2e>
 80073dc:	2e0a      	cmp	r6, #10
 80073de:	d1df      	bne.n	80073a0 <__swbuf_r+0x2e>
 80073e0:	4621      	mov	r1, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	f7ff fe26 	bl	8007034 <_fflush_r>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d0d9      	beq.n	80073a0 <__swbuf_r+0x2e>
 80073ec:	e7d6      	b.n	800739c <__swbuf_r+0x2a>
	...

080073f0 <__swsetup_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4b29      	ldr	r3, [pc, #164]	@ (8007498 <__swsetup_r+0xa8>)
 80073f4:	4605      	mov	r5, r0
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	460c      	mov	r4, r1
 80073fa:	b118      	cbz	r0, 8007404 <__swsetup_r+0x14>
 80073fc:	6a03      	ldr	r3, [r0, #32]
 80073fe:	b90b      	cbnz	r3, 8007404 <__swsetup_r+0x14>
 8007400:	f7ff fee0 	bl	80071c4 <__sinit>
 8007404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007408:	0719      	lsls	r1, r3, #28
 800740a:	d422      	bmi.n	8007452 <__swsetup_r+0x62>
 800740c:	06da      	lsls	r2, r3, #27
 800740e:	d407      	bmi.n	8007420 <__swsetup_r+0x30>
 8007410:	2209      	movs	r2, #9
 8007412:	602a      	str	r2, [r5, #0]
 8007414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	f04f 30ff 	mov.w	r0, #4294967295
 800741e:	e033      	b.n	8007488 <__swsetup_r+0x98>
 8007420:	0758      	lsls	r0, r3, #29
 8007422:	d512      	bpl.n	800744a <__swsetup_r+0x5a>
 8007424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007426:	b141      	cbz	r1, 800743a <__swsetup_r+0x4a>
 8007428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800742c:	4299      	cmp	r1, r3
 800742e:	d002      	beq.n	8007436 <__swsetup_r+0x46>
 8007430:	4628      	mov	r0, r5
 8007432:	f000 f8af 	bl	8007594 <_free_r>
 8007436:	2300      	movs	r3, #0
 8007438:	6363      	str	r3, [r4, #52]	@ 0x34
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	2300      	movs	r3, #0
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f043 0308 	orr.w	r3, r3, #8
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	b94b      	cbnz	r3, 800746a <__swsetup_r+0x7a>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800745c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007460:	d003      	beq.n	800746a <__swsetup_r+0x7a>
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 f9b3 	bl	80077d0 <__smakebuf_r>
 800746a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746e:	f013 0201 	ands.w	r2, r3, #1
 8007472:	d00a      	beq.n	800748a <__swsetup_r+0x9a>
 8007474:	2200      	movs	r2, #0
 8007476:	60a2      	str	r2, [r4, #8]
 8007478:	6962      	ldr	r2, [r4, #20]
 800747a:	4252      	negs	r2, r2
 800747c:	61a2      	str	r2, [r4, #24]
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	b942      	cbnz	r2, 8007494 <__swsetup_r+0xa4>
 8007482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007486:	d1c5      	bne.n	8007414 <__swsetup_r+0x24>
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	0799      	lsls	r1, r3, #30
 800748c:	bf58      	it	pl
 800748e:	6962      	ldrpl	r2, [r4, #20]
 8007490:	60a2      	str	r2, [r4, #8]
 8007492:	e7f4      	b.n	800747e <__swsetup_r+0x8e>
 8007494:	2000      	movs	r0, #0
 8007496:	e7f7      	b.n	8007488 <__swsetup_r+0x98>
 8007498:	20000128 	.word	0x20000128

0800749c <memset>:
 800749c:	4402      	add	r2, r0
 800749e:	4603      	mov	r3, r0
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d100      	bne.n	80074a6 <memset+0xa>
 80074a4:	4770      	bx	lr
 80074a6:	f803 1b01 	strb.w	r1, [r3], #1
 80074aa:	e7f9      	b.n	80074a0 <memset+0x4>

080074ac <_close_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d06      	ldr	r5, [pc, #24]	@ (80074c8 <_close_r+0x1c>)
 80074b0:	2300      	movs	r3, #0
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f7f9 f9f1 	bl	800089e <_close>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_close_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_close_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20000cf8 	.word	0x20000cf8

080074cc <_lseek_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d07      	ldr	r5, [pc, #28]	@ (80074ec <_lseek_r+0x20>)
 80074d0:	4604      	mov	r4, r0
 80074d2:	4608      	mov	r0, r1
 80074d4:	4611      	mov	r1, r2
 80074d6:	2200      	movs	r2, #0
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7f9 fa06 	bl	80008ec <_lseek>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_lseek_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_lseek_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	20000cf8 	.word	0x20000cf8

080074f0 <_read_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d07      	ldr	r5, [pc, #28]	@ (8007510 <_read_r+0x20>)
 80074f4:	4604      	mov	r4, r0
 80074f6:	4608      	mov	r0, r1
 80074f8:	4611      	mov	r1, r2
 80074fa:	2200      	movs	r2, #0
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7f9 f9b0 	bl	8000864 <_read>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_read_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_read_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	20000cf8 	.word	0x20000cf8

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	@ (8007534 <_write_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7f8 ffda 	bl	80004dc <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000cf8 	.word	0x20000cf8

08007538 <__errno>:
 8007538:	4b01      	ldr	r3, [pc, #4]	@ (8007540 <__errno+0x8>)
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20000128 	.word	0x20000128

08007544 <__libc_init_array>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4d0d      	ldr	r5, [pc, #52]	@ (800757c <__libc_init_array+0x38>)
 8007548:	4c0d      	ldr	r4, [pc, #52]	@ (8007580 <__libc_init_array+0x3c>)
 800754a:	1b64      	subs	r4, r4, r5
 800754c:	10a4      	asrs	r4, r4, #2
 800754e:	2600      	movs	r6, #0
 8007550:	42a6      	cmp	r6, r4
 8007552:	d109      	bne.n	8007568 <__libc_init_array+0x24>
 8007554:	4d0b      	ldr	r5, [pc, #44]	@ (8007584 <__libc_init_array+0x40>)
 8007556:	4c0c      	ldr	r4, [pc, #48]	@ (8007588 <__libc_init_array+0x44>)
 8007558:	f000 f9a8 	bl	80078ac <_init>
 800755c:	1b64      	subs	r4, r4, r5
 800755e:	10a4      	asrs	r4, r4, #2
 8007560:	2600      	movs	r6, #0
 8007562:	42a6      	cmp	r6, r4
 8007564:	d105      	bne.n	8007572 <__libc_init_array+0x2e>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	f855 3b04 	ldr.w	r3, [r5], #4
 800756c:	4798      	blx	r3
 800756e:	3601      	adds	r6, #1
 8007570:	e7ee      	b.n	8007550 <__libc_init_array+0xc>
 8007572:	f855 3b04 	ldr.w	r3, [r5], #4
 8007576:	4798      	blx	r3
 8007578:	3601      	adds	r6, #1
 800757a:	e7f2      	b.n	8007562 <__libc_init_array+0x1e>
 800757c:	08007934 	.word	0x08007934
 8007580:	08007934 	.word	0x08007934
 8007584:	08007934 	.word	0x08007934
 8007588:	08007938 	.word	0x08007938

0800758c <__retarget_lock_init_recursive>:
 800758c:	4770      	bx	lr

0800758e <__retarget_lock_acquire_recursive>:
 800758e:	4770      	bx	lr

08007590 <__retarget_lock_release_recursive>:
 8007590:	4770      	bx	lr
	...

08007594 <_free_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	2900      	cmp	r1, #0
 800759a:	d041      	beq.n	8007620 <_free_r+0x8c>
 800759c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a0:	1f0c      	subs	r4, r1, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfb8      	it	lt
 80075a6:	18e4      	addlt	r4, r4, r3
 80075a8:	f000 f8e0 	bl	800776c <__malloc_lock>
 80075ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007624 <_free_r+0x90>)
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	b933      	cbnz	r3, 80075c0 <_free_r+0x2c>
 80075b2:	6063      	str	r3, [r4, #4]
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	4628      	mov	r0, r5
 80075b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075bc:	f000 b8dc 	b.w	8007778 <__malloc_unlock>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d908      	bls.n	80075d6 <_free_r+0x42>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	1821      	adds	r1, r4, r0
 80075c8:	428b      	cmp	r3, r1
 80075ca:	bf01      	itttt	eq
 80075cc:	6819      	ldreq	r1, [r3, #0]
 80075ce:	685b      	ldreq	r3, [r3, #4]
 80075d0:	1809      	addeq	r1, r1, r0
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	e7ed      	b.n	80075b2 <_free_r+0x1e>
 80075d6:	461a      	mov	r2, r3
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b10b      	cbz	r3, 80075e0 <_free_r+0x4c>
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d9fa      	bls.n	80075d6 <_free_r+0x42>
 80075e0:	6811      	ldr	r1, [r2, #0]
 80075e2:	1850      	adds	r0, r2, r1
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d10b      	bne.n	8007600 <_free_r+0x6c>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	4401      	add	r1, r0
 80075ec:	1850      	adds	r0, r2, r1
 80075ee:	4283      	cmp	r3, r0
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	d1e0      	bne.n	80075b6 <_free_r+0x22>
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	6053      	str	r3, [r2, #4]
 80075fa:	4408      	add	r0, r1
 80075fc:	6010      	str	r0, [r2, #0]
 80075fe:	e7da      	b.n	80075b6 <_free_r+0x22>
 8007600:	d902      	bls.n	8007608 <_free_r+0x74>
 8007602:	230c      	movs	r3, #12
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	e7d6      	b.n	80075b6 <_free_r+0x22>
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1821      	adds	r1, r4, r0
 800760c:	428b      	cmp	r3, r1
 800760e:	bf04      	itt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	bf04      	itt	eq
 8007618:	1809      	addeq	r1, r1, r0
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	6054      	str	r4, [r2, #4]
 800761e:	e7ca      	b.n	80075b6 <_free_r+0x22>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	20000d04 	.word	0x20000d04

08007628 <sbrk_aligned>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4e0f      	ldr	r6, [pc, #60]	@ (8007668 <sbrk_aligned+0x40>)
 800762c:	460c      	mov	r4, r1
 800762e:	6831      	ldr	r1, [r6, #0]
 8007630:	4605      	mov	r5, r0
 8007632:	b911      	cbnz	r1, 800763a <sbrk_aligned+0x12>
 8007634:	f000 f92a 	bl	800788c <_sbrk_r>
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f925 	bl	800788c <_sbrk_r>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d103      	bne.n	800764e <sbrk_aligned+0x26>
 8007646:	f04f 34ff 	mov.w	r4, #4294967295
 800764a:	4620      	mov	r0, r4
 800764c:	bd70      	pop	{r4, r5, r6, pc}
 800764e:	1cc4      	adds	r4, r0, #3
 8007650:	f024 0403 	bic.w	r4, r4, #3
 8007654:	42a0      	cmp	r0, r4
 8007656:	d0f8      	beq.n	800764a <sbrk_aligned+0x22>
 8007658:	1a21      	subs	r1, r4, r0
 800765a:	4628      	mov	r0, r5
 800765c:	f000 f916 	bl	800788c <_sbrk_r>
 8007660:	3001      	adds	r0, #1
 8007662:	d1f2      	bne.n	800764a <sbrk_aligned+0x22>
 8007664:	e7ef      	b.n	8007646 <sbrk_aligned+0x1e>
 8007666:	bf00      	nop
 8007668:	20000d00 	.word	0x20000d00

0800766c <_malloc_r>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	1ccd      	adds	r5, r1, #3
 8007672:	f025 0503 	bic.w	r5, r5, #3
 8007676:	3508      	adds	r5, #8
 8007678:	2d0c      	cmp	r5, #12
 800767a:	bf38      	it	cc
 800767c:	250c      	movcc	r5, #12
 800767e:	2d00      	cmp	r5, #0
 8007680:	4606      	mov	r6, r0
 8007682:	db01      	blt.n	8007688 <_malloc_r+0x1c>
 8007684:	42a9      	cmp	r1, r5
 8007686:	d904      	bls.n	8007692 <_malloc_r+0x26>
 8007688:	230c      	movs	r3, #12
 800768a:	6033      	str	r3, [r6, #0]
 800768c:	2000      	movs	r0, #0
 800768e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007768 <_malloc_r+0xfc>
 8007696:	f000 f869 	bl	800776c <__malloc_lock>
 800769a:	f8d8 3000 	ldr.w	r3, [r8]
 800769e:	461c      	mov	r4, r3
 80076a0:	bb44      	cbnz	r4, 80076f4 <_malloc_r+0x88>
 80076a2:	4629      	mov	r1, r5
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff ffbf 	bl	8007628 <sbrk_aligned>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	4604      	mov	r4, r0
 80076ae:	d158      	bne.n	8007762 <_malloc_r+0xf6>
 80076b0:	f8d8 4000 	ldr.w	r4, [r8]
 80076b4:	4627      	mov	r7, r4
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d143      	bne.n	8007742 <_malloc_r+0xd6>
 80076ba:	2c00      	cmp	r4, #0
 80076bc:	d04b      	beq.n	8007756 <_malloc_r+0xea>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	eb04 0903 	add.w	r9, r4, r3
 80076c8:	f000 f8e0 	bl	800788c <_sbrk_r>
 80076cc:	4581      	cmp	r9, r0
 80076ce:	d142      	bne.n	8007756 <_malloc_r+0xea>
 80076d0:	6821      	ldr	r1, [r4, #0]
 80076d2:	1a6d      	subs	r5, r5, r1
 80076d4:	4629      	mov	r1, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff ffa6 	bl	8007628 <sbrk_aligned>
 80076dc:	3001      	adds	r0, #1
 80076de:	d03a      	beq.n	8007756 <_malloc_r+0xea>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	442b      	add	r3, r5
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	bb62      	cbnz	r2, 8007748 <_malloc_r+0xdc>
 80076ee:	f8c8 7000 	str.w	r7, [r8]
 80076f2:	e00f      	b.n	8007714 <_malloc_r+0xa8>
 80076f4:	6822      	ldr	r2, [r4, #0]
 80076f6:	1b52      	subs	r2, r2, r5
 80076f8:	d420      	bmi.n	800773c <_malloc_r+0xd0>
 80076fa:	2a0b      	cmp	r2, #11
 80076fc:	d917      	bls.n	800772e <_malloc_r+0xc2>
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	42a3      	cmp	r3, r4
 8007702:	6025      	str	r5, [r4, #0]
 8007704:	bf18      	it	ne
 8007706:	6059      	strne	r1, [r3, #4]
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	bf08      	it	eq
 800770c:	f8c8 1000 	streq.w	r1, [r8]
 8007710:	5162      	str	r2, [r4, r5]
 8007712:	604b      	str	r3, [r1, #4]
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f82f 	bl	8007778 <__malloc_unlock>
 800771a:	f104 000b 	add.w	r0, r4, #11
 800771e:	1d23      	adds	r3, r4, #4
 8007720:	f020 0007 	bic.w	r0, r0, #7
 8007724:	1ac2      	subs	r2, r0, r3
 8007726:	bf1c      	itt	ne
 8007728:	1a1b      	subne	r3, r3, r0
 800772a:	50a3      	strne	r3, [r4, r2]
 800772c:	e7af      	b.n	800768e <_malloc_r+0x22>
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	42a3      	cmp	r3, r4
 8007732:	bf0c      	ite	eq
 8007734:	f8c8 2000 	streq.w	r2, [r8]
 8007738:	605a      	strne	r2, [r3, #4]
 800773a:	e7eb      	b.n	8007714 <_malloc_r+0xa8>
 800773c:	4623      	mov	r3, r4
 800773e:	6864      	ldr	r4, [r4, #4]
 8007740:	e7ae      	b.n	80076a0 <_malloc_r+0x34>
 8007742:	463c      	mov	r4, r7
 8007744:	687f      	ldr	r7, [r7, #4]
 8007746:	e7b6      	b.n	80076b6 <_malloc_r+0x4a>
 8007748:	461a      	mov	r2, r3
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	d1fb      	bne.n	8007748 <_malloc_r+0xdc>
 8007750:	2300      	movs	r3, #0
 8007752:	6053      	str	r3, [r2, #4]
 8007754:	e7de      	b.n	8007714 <_malloc_r+0xa8>
 8007756:	230c      	movs	r3, #12
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	4630      	mov	r0, r6
 800775c:	f000 f80c 	bl	8007778 <__malloc_unlock>
 8007760:	e794      	b.n	800768c <_malloc_r+0x20>
 8007762:	6005      	str	r5, [r0, #0]
 8007764:	e7d6      	b.n	8007714 <_malloc_r+0xa8>
 8007766:	bf00      	nop
 8007768:	20000d04 	.word	0x20000d04

0800776c <__malloc_lock>:
 800776c:	4801      	ldr	r0, [pc, #4]	@ (8007774 <__malloc_lock+0x8>)
 800776e:	f7ff bf0e 	b.w	800758e <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	20000cfc 	.word	0x20000cfc

08007778 <__malloc_unlock>:
 8007778:	4801      	ldr	r0, [pc, #4]	@ (8007780 <__malloc_unlock+0x8>)
 800777a:	f7ff bf09 	b.w	8007590 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	20000cfc 	.word	0x20000cfc

08007784 <__swhatbuf_r>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	460c      	mov	r4, r1
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	2900      	cmp	r1, #0
 800778e:	b096      	sub	sp, #88	@ 0x58
 8007790:	4615      	mov	r5, r2
 8007792:	461e      	mov	r6, r3
 8007794:	da0d      	bge.n	80077b2 <__swhatbuf_r+0x2e>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800779c:	f04f 0100 	mov.w	r1, #0
 80077a0:	bf14      	ite	ne
 80077a2:	2340      	movne	r3, #64	@ 0x40
 80077a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077a8:	2000      	movs	r0, #0
 80077aa:	6031      	str	r1, [r6, #0]
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	b016      	add	sp, #88	@ 0x58
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	466a      	mov	r2, sp
 80077b4:	f000 f848 	bl	8007848 <_fstat_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dbec      	blt.n	8007796 <__swhatbuf_r+0x12>
 80077bc:	9901      	ldr	r1, [sp, #4]
 80077be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077c6:	4259      	negs	r1, r3
 80077c8:	4159      	adcs	r1, r3
 80077ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ce:	e7eb      	b.n	80077a8 <__swhatbuf_r+0x24>

080077d0 <__smakebuf_r>:
 80077d0:	898b      	ldrh	r3, [r1, #12]
 80077d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d4:	079d      	lsls	r5, r3, #30
 80077d6:	4606      	mov	r6, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	d507      	bpl.n	80077ec <__smakebuf_r+0x1c>
 80077dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	2301      	movs	r3, #1
 80077e6:	6163      	str	r3, [r4, #20]
 80077e8:	b003      	add	sp, #12
 80077ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ec:	ab01      	add	r3, sp, #4
 80077ee:	466a      	mov	r2, sp
 80077f0:	f7ff ffc8 	bl	8007784 <__swhatbuf_r>
 80077f4:	9f00      	ldr	r7, [sp, #0]
 80077f6:	4605      	mov	r5, r0
 80077f8:	4639      	mov	r1, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	f7ff ff36 	bl	800766c <_malloc_r>
 8007800:	b948      	cbnz	r0, 8007816 <__smakebuf_r+0x46>
 8007802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007806:	059a      	lsls	r2, r3, #22
 8007808:	d4ee      	bmi.n	80077e8 <__smakebuf_r+0x18>
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	f043 0302 	orr.w	r3, r3, #2
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	e7e2      	b.n	80077dc <__smakebuf_r+0xc>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	6020      	str	r0, [r4, #0]
 800781a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007826:	b15b      	cbz	r3, 8007840 <__smakebuf_r+0x70>
 8007828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800782c:	4630      	mov	r0, r6
 800782e:	f000 f81d 	bl	800786c <_isatty_r>
 8007832:	b128      	cbz	r0, 8007840 <__smakebuf_r+0x70>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	431d      	orrs	r5, r3
 8007844:	81a5      	strh	r5, [r4, #12]
 8007846:	e7cf      	b.n	80077e8 <__smakebuf_r+0x18>

08007848 <_fstat_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	@ (8007868 <_fstat_r+0x20>)
 800784c:	2300      	movs	r3, #0
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f7f9 f82e 	bl	80008b6 <_fstat>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	d102      	bne.n	8007864 <_fstat_r+0x1c>
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	b103      	cbz	r3, 8007864 <_fstat_r+0x1c>
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	20000cf8 	.word	0x20000cf8

0800786c <_isatty_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d06      	ldr	r5, [pc, #24]	@ (8007888 <_isatty_r+0x1c>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7f9 f82d 	bl	80008d6 <_isatty>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_isatty_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_isatty_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20000cf8 	.word	0x20000cf8

0800788c <_sbrk_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d06      	ldr	r5, [pc, #24]	@ (80078a8 <_sbrk_r+0x1c>)
 8007890:	2300      	movs	r3, #0
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	f7f9 f836 	bl	8000908 <_sbrk>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_sbrk_r+0x1a>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_sbrk_r+0x1a>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20000cf8 	.word	0x20000cf8

080078ac <_init>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr

080078b8 <_fini>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr
