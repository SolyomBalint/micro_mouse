
GYRO_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800ba58  0800ba58  0000ca58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be40  0800be40  0000d350  2**0
                  CONTENTS
  4 .ARM          00000008  0800be40  0800be40  0000ce40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be48  0800be48  0000d350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be48  0800be48  0000ce48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be4c  0800be4c  0000ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800be50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d350  2**0
                  CONTENTS
 10 .bss          00000c48  20000350  20000350  0000d350  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f98  20000f98  0000d350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d350  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014798  00000000  00000000  0000d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f4  00000000  00000000  00021b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00025410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4e  00000000  00000000  000265b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f5a  00000000  00000000  00027306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001699f  00000000  00000000  0004e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe4c  00000000  00000000  00064bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140a4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057e4  00000000  00000000  00140a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00146274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ba3c 	.word	0x0800ba3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0800ba3c 	.word	0x0800ba3c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <sendMouseReport>:
} HID_MouseReport;

HID_MouseReport mouseReport; //TODO get rid of filthy globals
extern USBD_HandleTypeDef hUsbDeviceHS;

void sendMouseReport() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&mouseReport, sizeof(mouseReport));
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	4903      	ldr	r1, [pc, #12]	@ (8000ecc <sendMouseReport+0x14>)
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <sendMouseReport+0x18>)
 8000ec2:	f006 f97f 	bl	80071c4 <USBD_HID_SendReport>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000040c 	.word	0x2000040c
 8000ed0:	20000478 	.word	0x20000478

08000ed4 <updateMouseReport>:

void updateMouseReport(int16_t deltaX, int16_t deltaY) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	80fb      	strh	r3, [r7, #6]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
    mouseReport.x = (int8_t)deltaX;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <updateMouseReport+0x38>)
 8000eea:	705a      	strb	r2, [r3, #1]
    mouseReport.y = (int8_t)deltaY;
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <updateMouseReport+0x38>)
 8000ef2:	709a      	strb	r2, [r3, #2]
    mouseReport.buttons = 0;  // No button press
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <updateMouseReport+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    mouseReport.wheel = 0;    // No wheel movement
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <updateMouseReport+0x38>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	70da      	strb	r2, [r3, #3]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	2000040c 	.word	0x2000040c

08000f10 <convertGyroToMouse>:

int16_t convertGyroToMouse(int16_t gyro_value) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
    return (int16_t)(gyro_value * GYRO_SENSITIVITY * MOUSE_SENSITIVITY);
 8000f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb10 	bl	8000544 <__aeabi_i2d>
 8000f24:	a30c      	add	r3, pc, #48	@ (adr r3, 8000f58 <convertGyroToMouse+0x48>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fb75 	bl	8000618 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f60 <convertGyroToMouse+0x50>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb6c 	bl	8000618 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe16 	bl	8000b78 <__aeabi_d2iz>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b21b      	sxth	r3, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	1eb851ec 	.word	0x1eb851ec
 8000f5c:	3f81eb85 	.word	0x3f81eb85
 8000f60:	33333333 	.word	0x33333333
 8000f64:	3fd33333 	.word	0x3fd33333

08000f68 <_write>:


int _write(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	 HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <_write+0x28>)
 8000f80:	f004 f86c 	bl	800505c <HAL_UART_Transmit>
}
 8000f84:	bf00      	nop
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200003c4 	.word	0x200003c4

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f001 f978 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f854 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f91c 	bl	80011e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fa8:	f000 f8f0 	bl	800118c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000fac:	f007 fc88 	bl	80088c0 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000fb0:	f000 f8b6 	bl	8001120 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000fb4:	f001 f8a4 	bl	8002100 <BSP_GYRO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_GYRO_GetXYZ(valxyz);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 f954 	bl	8002268 <BSP_GYRO_GetXYZ>
	  printf("x: %f y: %f z: %f \r\n", valxyz[0],valxyz[1] ,valxyz[2]);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fad0 	bl	8000568 <__aeabi_f2d>
 8000fc8:	4680      	mov	r8, r0
 8000fca:	4689      	mov	r9, r1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff faca 	bl	8000568 <__aeabi_f2d>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	460d      	mov	r5, r1
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fac4 	bl	8000568 <__aeabi_f2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fe8:	e9cd 4500 	strd	r4, r5, [sp]
 8000fec:	4642      	mov	r2, r8
 8000fee:	464b      	mov	r3, r9
 8000ff0:	4815      	ldr	r0, [pc, #84]	@ (8001048 <main+0xb4>)
 8000ff2:	f008 fda9 	bl	8009b48 <iprintf>
	  int16_t deltaX = convertGyroToMouse(valxyz[0]);
 8000ff6:	edd7 7a00 	vldr	s15, [r7]
 8000ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	b21b      	sxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff83 	bl	8000f10 <convertGyroToMouse>
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
	  int16_t deltaY = convertGyroToMouse(valxyz[1]);
 800100e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	b21b      	sxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff77 	bl	8000f10 <convertGyroToMouse>
 8001022:	4603      	mov	r3, r0
 8001024:	81bb      	strh	r3, [r7, #12]

	  //This is setup to fit the way i hold the mcu
	  updateMouseReport(-(deltaY), deltaX);
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	425b      	negs	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff4d 	bl	8000ed4 <updateMouseReport>
	  sendMouseReport();
 800103a:	f7ff ff3d 	bl	8000eb8 <sendMouseReport>
	  HAL_Delay(100);
 800103e:	2064      	movs	r0, #100	@ 0x64
 8001040:	f001 f998 	bl	8002374 <HAL_Delay>
  {
 8001044:	bf00      	nop
 8001046:	e7b7      	b.n	8000fb8 <main+0x24>
 8001048:	0800ba58 	.word	0x0800ba58

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	@ 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	@ 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 fdc9 	bl	8009bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <SystemClock_Config+0xcc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <SystemClock_Config+0xd0>)
 8001096:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010c0:	23a8      	movs	r3, #168	@ 0xa8
 80010c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c8:	2307      	movs	r3, #7
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 ff8f 	bl	8003ff4 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010dc:	f000 f8d8 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2105      	movs	r1, #5
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 f9f0 	bl	80044e4 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110a:	f000 f8c1 	bl	8001290 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <MX_SPI5_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI5_Init+0x64>)
 800112c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI5_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI5_Init+0x64>)
 800114c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001150:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001154:	2218      	movs	r2, #24
 8001156:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_SPI5_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI5_Init+0x64>)
 800116c:	220a      	movs	r2, #10
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_SPI5_Init+0x64>)
 8001172:	f003 fbd7 	bl	8004924 <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 f888 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000036c 	.word	0x2000036c
 8001188:	40015000 	.word	0x40015000

0800118c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_USART1_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011c4:	f003 fefa 	bl	8004fbc <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f85f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200003c4 	.word	0x200003c4
 80011dc:	40011000 	.word	0x40011000

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <MX_GPIO_Init+0xa8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a22      	ldr	r2, [pc, #136]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <MX_GPIO_Init+0xa8>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_GPIO_Init+0xa8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_GPIO_Init+0xac>)
 800127a:	f001 f9b1 	bl	80025e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <HAL_SPI_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 8001318:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_SPI_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001346:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001358:	2305      	movs	r3, #5
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <HAL_SPI_MspInit+0x8c>)
 8001364:	f001 f93c 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40015000 	.word	0x40015000
 8001374:	40023800 	.word	0x40023800
 8001378:	40021400 	.word	0x40021400

0800137c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_SPI_MspDeInit+0x30>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10a      	bne.n	80013a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_SPI_MspDeInit+0x34>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_SPI_MspDeInit+0x34>)
 8001394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800139a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <HAL_SPI_MspDeInit+0x38>)
 80013a0:	f001 faca 	bl	8002938 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40015000 	.word	0x40015000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021400 	.word	0x40021400

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12c      	bne.n	8001434 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_UART_MspInit+0x88>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <HAL_UART_MspInit+0x88>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_UART_MspInit+0x88>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <HAL_UART_MspInit+0x88>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001412:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001424:	2307      	movs	r3, #7
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <HAL_UART_MspInit+0x8c>)
 8001430:	f001 f8d6 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40011000 	.word	0x40011000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149e:	f000 ff49 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <OTG_HS_IRQHandler+0x10>)
 80014ae:	f001 fcac 	bl	8002e0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000954 	.word	0x20000954

080014bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_kill>:

int _kill(int pid, int sig)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d6:	f008 fbdf 	bl	8009c98 <__errno>
 80014da:	4603      	mov	r3, r0
 80014dc:	2216      	movs	r2, #22
 80014de:	601a      	str	r2, [r3, #0]
  return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_exit>:

void _exit (int status)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffe7 	bl	80014cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fe:	bf00      	nop
 8001500:	e7fd      	b.n	80014fe <_exit+0x12>

08001502 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e00a      	b.n	800152a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001514:	f3af 8000 	nop.w
 8001518:	4601      	mov	r1, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	b2ca      	uxtb	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbf0      	blt.n	8001514 <_read+0x12>
  }

  return len;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_close>:
  }
  return len;
}

int _close(int file)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001564:	605a      	str	r2, [r3, #4]
  return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_isatty>:

int _isatty(int file)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f008 fb60 	bl	8009c98 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20030000 	.word	0x20030000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000410 	.word	0x20000410
 800160c:	20000f98 	.word	0x20000f98

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001638:	f7ff ffea 	bl	8001610 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001662:	f008 fb1f 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fc95 	bl	8000f94 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001678:	0800be50 	.word	0x0800be50
  ldr r2, =_sbss
 800167c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001680:	20000f98 	.word	0x20000f98

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>

08001686 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8001694:	f000 fc7c 	bl	8001f90 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800169e:	f107 030f 	add.w	r3, r7, #15
 80016a2:	2201      	movs	r2, #1
 80016a4:	2120      	movs	r1, #32
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fcbe 	bl	8002028 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80016b6:	f107 030f 	add.w	r3, r7, #15
 80016ba:	2201      	movs	r2, #1
 80016bc:	2123      	movs	r1, #35	@ 0x23
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fcb2 	bl	8002028 <GYRO_IO_Write>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80016e0:	f000 fc56 	bl	8001f90 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	2201      	movs	r2, #1
 80016e8:	210f      	movs	r1, #15
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fcce 	bl	800208c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	2201      	movs	r2, #1
 8001704:	2124      	movs	r1, #36	@ 0x24
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fcc0 	bl	800208c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001712:	b2db      	uxtb	r3, r3
 8001714:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	2201      	movs	r2, #1
 800171a:	2124      	movs	r1, #36	@ 0x24
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc83 	bl	8002028 <GYRO_IO_Write>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800173e:	f107 030f 	add.w	r3, r7, #15
 8001742:	2201      	movs	r2, #1
 8001744:	2120      	movs	r1, #32
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fc6e 	bl	8002028 <GYRO_IO_Write>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	2300      	movs	r3, #0
 8001764:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001766:	f107 030f 	add.w	r3, r7, #15
 800176a:	2201      	movs	r2, #1
 800176c:	2130      	movs	r1, #48	@ 0x30
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fc8c 	bl	800208c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8001774:	f107 030e 	add.w	r3, r7, #14
 8001778:	2201      	movs	r2, #1
 800177a:	2122      	movs	r1, #34	@ 0x22
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fc85 	bl	800208c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001788:	b2db      	uxtb	r3, r3
 800178a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	b25a      	sxtb	r2, r3
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b25b      	sxtb	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	f023 0320 	bic.w	r3, r3, #32
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7bbb      	ldrb	r3, [r7, #14]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80017b6:	f107 030f 	add.w	r3, r7, #15
 80017ba:	2201      	movs	r2, #1
 80017bc:	2130      	movs	r1, #48	@ 0x30
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fc32 	bl	8002028 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80017c4:	f107 030e 	add.w	r3, r7, #14
 80017c8:	2201      	movs	r2, #1
 80017ca:	2122      	movs	r1, #34	@ 0x22
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fc2b 	bl	8002028 <GYRO_IO_Write>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80017e4:	f107 030f 	add.w	r3, r7, #15
 80017e8:	2201      	movs	r2, #1
 80017ea:	2122      	movs	r1, #34	@ 0x22
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fc4d 	bl	800208c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001808:	b2db      	uxtb	r3, r3
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e00c      	b.n	8001828 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d109      	bne.n	8001828 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	f023 0308 	bic.w	r3, r3, #8
 800181a:	b2db      	uxtb	r3, r3
 800181c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001828:	f107 030f 	add.w	r3, r7, #15
 800182c:	2201      	movs	r2, #1
 800182e:	2122      	movs	r1, #34	@ 0x22
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fbf9 	bl	8002028 <GYRO_IO_Write>
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001848:	f107 030f 	add.w	r3, r7, #15
 800184c:	2201      	movs	r2, #1
 800184e:	2122      	movs	r1, #34	@ 0x22
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fc1b 	bl	800208c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001862:	b2db      	uxtb	r3, r3
 8001864:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e009      	b.n	8001880 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d106      	bne.n	8001880 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f023 0308 	bic.w	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001880:	f107 030f 	add.w	r3, r7, #15
 8001884:	2201      	movs	r2, #1
 8001886:	2122      	movs	r1, #34	@ 0x22
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fbcd 	bl	8002028 <GYRO_IO_Write>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80018a0:	f107 030f 	add.w	r3, r7, #15
 80018a4:	2201      	movs	r2, #1
 80018a6:	2121      	movs	r1, #33	@ 0x21
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fbef 	bl	800208c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4313      	orrs	r3, r2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80018c2:	f107 030f 	add.w	r3, r7, #15
 80018c6:	2201      	movs	r2, #1
 80018c8:	2121      	movs	r1, #33	@ 0x21
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fbac 	bl	8002028 <GYRO_IO_Write>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80018e2:	f107 030f 	add.w	r3, r7, #15
 80018e6:	2201      	movs	r2, #1
 80018e8:	2124      	movs	r1, #36	@ 0x24
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fbce 	bl	800208c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f023 0310 	bic.w	r3, r3, #16
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4313      	orrs	r3, r2
 8001900:	b2db      	uxtb	r3, r3
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001904:	f107 030f 	add.w	r3, r7, #15
 8001908:	2201      	movs	r2, #1
 800190a:	2124      	movs	r1, #36	@ 0x24
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fb8b 	bl	8002028 <GYRO_IO_Write>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	2300      	movs	r3, #0
 800192a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8001944:	f107 030f 	add.w	r3, r7, #15
 8001948:	2201      	movs	r2, #1
 800194a:	2123      	movs	r1, #35	@ 0x23
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fb9d 	bl	800208c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	2206      	movs	r2, #6
 8001958:	2128      	movs	r1, #40	@ 0x28
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fb96 	bl	800208c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d121      	bne.n	80019ae <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	e01a      	b.n	80019a6 <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	3301      	adds	r3, #1
 8001976:	3328      	adds	r3, #40	@ 0x28
 8001978:	443b      	add	r3, r7
 800197a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	6a3a      	ldr	r2, [r7, #32]
 8001984:	0052      	lsls	r2, r2, #1
 8001986:	3228      	adds	r2, #40	@ 0x28
 8001988:	443a      	add	r2, r7
 800198a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800198e:	4413      	add	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	b21a      	sxth	r2, r3
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	3328      	adds	r3, #40	@ 0x28
 800199a:	443b      	add	r3, r7
 800199c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	3301      	adds	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	dde1      	ble.n	8001970 <I3G4250D_ReadXYZAngRate+0x54>
 80019ac:	e020      	b.n	80019f0 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	e01a      	b.n	80019ea <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3328      	adds	r3, #40	@ 0x28
 80019ba:	443b      	add	r3, r7
 80019bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	6a3a      	ldr	r2, [r7, #32]
 80019c6:	0052      	lsls	r2, r2, #1
 80019c8:	3201      	adds	r2, #1
 80019ca:	3228      	adds	r2, #40	@ 0x28
 80019cc:	443a      	add	r2, r7
 80019ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80019d2:	4413      	add	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3328      	adds	r3, #40	@ 0x28
 80019de:	443b      	add	r3, r7
 80019e0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	3301      	adds	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	dde1      	ble.n	80019b4 <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d00c      	beq.n	8001a14 <I3G4250D_ReadXYZAngRate+0xf8>
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	dc0d      	bgt.n	8001a1a <I3G4250D_ReadXYZAngRate+0xfe>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <I3G4250D_ReadXYZAngRate+0xec>
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d003      	beq.n	8001a0e <I3G4250D_ReadXYZAngRate+0xf2>
 8001a06:	e008      	b.n	8001a1a <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <I3G4250D_ReadXYZAngRate+0x144>)
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001a0c:	e005      	b.n	8001a1a <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <I3G4250D_ReadXYZAngRate+0x148>)
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001a12:	e002      	b.n	8001a1a <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <I3G4250D_ReadXYZAngRate+0x14c>)
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001a18:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	e016      	b.n	8001a4e <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	3328      	adds	r3, #40	@ 0x28
 8001a26:	443b      	add	r3, r7
 8001a28:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	dde5      	ble.n	8001a20 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	410c0000 	.word	0x410c0000
 8001a64:	418c0000 	.word	0x418c0000
 8001a68:	428c0000 	.word	0x428c0000

08001a6c <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001a7a:	f000 fa89 	bl	8001f90 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001a84:	f107 030f 	add.w	r3, r7, #15
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 facb 	bl	8002028 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001a9c:	f107 030f 	add.w	r3, r7, #15
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2123      	movs	r1, #35	@ 0x23
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fabf 	bl	8002028 <GYRO_IO_Write>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001ac6:	f000 fa63 	bl	8001f90 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	2201      	movs	r2, #1
 8001ace:	210f      	movs	r1, #15
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fadb 	bl	800208c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2124      	movs	r1, #36	@ 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 facd 	bl	800208c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	2201      	movs	r2, #1
 8001b00:	2124      	movs	r1, #36	@ 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa90 	bl	8002028 <GYRO_IO_Write>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b24:	f107 030f 	add.w	r3, r7, #15
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fa7b 	bl	8002028 <GYRO_IO_Write>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001b4c:	f107 030f 	add.w	r3, r7, #15
 8001b50:	2201      	movs	r2, #1
 8001b52:	2130      	movs	r1, #48	@ 0x30
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fa99 	bl	800208c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001b5a:	f107 030e 	add.w	r3, r7, #14
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2122      	movs	r1, #34	@ 0x22
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fa92 	bl	800208c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	121b      	asrs	r3, r3, #8
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	f023 0320 	bic.w	r3, r3, #32
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001b9c:	f107 030f 	add.w	r3, r7, #15
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2130      	movs	r1, #48	@ 0x30
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fa3f 	bl	8002028 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001baa:	f107 030e 	add.w	r3, r7, #14
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2122      	movs	r1, #34	@ 0x22
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fa38 	bl	8002028 <GYRO_IO_Write>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001bca:	f107 030f 	add.w	r3, r7, #15
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2122      	movs	r1, #34	@ 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fa5a 	bl	800208c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e00c      	b.n	8001c0e <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d109      	bne.n	8001c0e <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	f023 0308 	bic.w	r3, r3, #8
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c0e:	f107 030f 	add.w	r3, r7, #15
 8001c12:	2201      	movs	r2, #1
 8001c14:	2122      	movs	r1, #34	@ 0x22
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fa06 	bl	8002028 <GYRO_IO_Write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c2e:	f107 030f 	add.w	r3, r7, #15
 8001c32:	2201      	movs	r2, #1
 8001c34:	2122      	movs	r1, #34	@ 0x22
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fa28 	bl	800208c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e009      	b.n	8001c66 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	f023 0308 	bic.w	r3, r3, #8
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c66:	f107 030f 	add.w	r3, r7, #15
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2122      	movs	r1, #34	@ 0x22
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f9da 	bl	8002028 <GYRO_IO_Write>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001c86:	f107 030f 	add.w	r3, r7, #15
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2121      	movs	r1, #33	@ 0x21
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f9fc 	bl	800208c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001ca8:	f107 030f 	add.w	r3, r7, #15
 8001cac:	2201      	movs	r2, #1
 8001cae:	2121      	movs	r1, #33	@ 0x21
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f9b9 	bl	8002028 <GYRO_IO_Write>
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001cc8:	f107 030f 	add.w	r3, r7, #15
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2124      	movs	r1, #36	@ 0x24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f9db 	bl	800208c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	f023 0310 	bic.w	r3, r3, #16
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2124      	movs	r1, #36	@ 0x24
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f998 	bl	8002028 <GYRO_IO_Write>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001d28:	f107 030f 	add.w	r3, r7, #15
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2123      	movs	r1, #35	@ 0x23
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f9ab 	bl	800208c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001d36:	f107 0318 	add.w	r3, r7, #24
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	2128      	movs	r1, #40	@ 0x28
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f9a4 	bl	800208c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d121      	bne.n	8001d92 <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
 8001d52:	e01a      	b.n	8001d8a <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	3301      	adds	r3, #1
 8001d5a:	3328      	adds	r3, #40	@ 0x28
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	0052      	lsls	r2, r2, #1
 8001d6a:	3228      	adds	r2, #40	@ 0x28
 8001d6c:	443a      	add	r2, r7
 8001d6e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001d72:	4413      	add	r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	3328      	adds	r3, #40	@ 0x28
 8001d7e:	443b      	add	r3, r7
 8001d80:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	3301      	adds	r3, #1
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	dde1      	ble.n	8001d54 <L3GD20_ReadXYZAngRate+0x54>
 8001d90:	e020      	b.n	8001dd4 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	e01a      	b.n	8001dce <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	3328      	adds	r3, #40	@ 0x28
 8001d9e:	443b      	add	r3, r7
 8001da0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	0052      	lsls	r2, r2, #1
 8001dac:	3201      	adds	r2, #1
 8001dae:	3228      	adds	r2, #40	@ 0x28
 8001db0:	443a      	add	r2, r7
 8001db2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	3328      	adds	r3, #40	@ 0x28
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	dde1      	ble.n	8001d98 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d00c      	beq.n	8001df8 <L3GD20_ReadXYZAngRate+0xf8>
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	dc0d      	bgt.n	8001dfe <L3GD20_ReadXYZAngRate+0xfe>
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <L3GD20_ReadXYZAngRate+0xec>
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d003      	beq.n	8001df2 <L3GD20_ReadXYZAngRate+0xf2>
 8001dea:	e008      	b.n	8001dfe <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <L3GD20_ReadXYZAngRate+0x144>)
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001df0:	e005      	b.n	8001dfe <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <L3GD20_ReadXYZAngRate+0x148>)
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001df6:	e002      	b.n	8001dfe <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <L3GD20_ReadXYZAngRate+0x14c>)
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001dfc:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	e016      	b.n	8001e32 <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	3328      	adds	r3, #40	@ 0x28
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	dde5      	ble.n	8001e04 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	410c0000 	.word	0x410c0000
 8001e48:	418c0000 	.word	0x418c0000
 8001e4c:	428c0000 	.word	0x428c0000

08001e50 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e54:	4819      	ldr	r0, [pc, #100]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e56:	f002 ffc6 	bl	8004de6 <HAL_SPI_GetState>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12b      	bne.n	8001eb8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e62:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <SPIx_Init+0x70>)
 8001e64:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e68:	2218      	movs	r2, #24
 8001e6a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e86:	2207      	movs	r2, #7
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <SPIx_Init+0x6c>)
 8001e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <SPIx_Init+0x6c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <SPIx_Init+0x6c>)
 8001ea6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eaa:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <SPIx_Init+0x6c>)
 8001eae:	f000 f835 	bl	8001f1c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001eb2:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <SPIx_Init+0x6c>)
 8001eb4:	f002 fd36 	bl	8004924 <HAL_SPI_Init>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000414 	.word	0x20000414
 8001ec0:	40015000 	.word	0x40015000

08001ec4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <SPIx_WriteRead+0x38>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f107 020f 	add.w	r2, r7, #15
 8001eda:	1df9      	adds	r1, r7, #7
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <SPIx_WriteRead+0x3c>)
 8001ee2:	f002 fdd0 	bl	8004a86 <HAL_SPI_TransmitReceive>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001eec:	f000 f80a 	bl	8001f04 <SPIx_Error>
  }

  return receivedbyte;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000006c 	.word	0x2000006c
 8001f00:	20000414 	.word	0x20000414

08001f04 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <SPIx_Error+0x14>)
 8001f0a:	f002 fd94 	bl	8004a36 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001f0e:	f7ff ff9f 	bl	8001e50 <SPIx_Init>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000414 	.word	0x20000414

08001f1c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	4a0f      	ldr	r2, [pc, #60]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f4a:	f043 0320 	orr.w	r3, r3, #32
 8001f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <SPIx_MspInit+0x6c>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001f5c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <SPIx_MspInit+0x70>)
 8001f7a:	f000 fb31 	bl	80025e0 <HAL_GPIO_Init>
}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40021400 	.word	0x40021400

08001f90 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4815      	ldr	r0, [pc, #84]	@ (8002020 <GYRO_IO_Init+0x90>)
 8001fca:	f000 fb09 	bl	80025e0 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4813      	ldr	r0, [pc, #76]	@ (8002020 <GYRO_IO_Init+0x90>)
 8001fd4:	f000 fdbc 	bl	8002b50 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <GYRO_IO_Init+0x8c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001ff4:	2306      	movs	r3, #6
 8001ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <GYRO_IO_Init+0x94>)
 800200c:	f000 fae8 	bl	80025e0 <HAL_GPIO_Init>

  SPIx_Init();
 8002010:	f7ff ff1e 	bl	8001e50 <SPIx_Init>
}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800
 8002024:	40020000 	.word	0x40020000

08002028 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	4613      	mov	r3, r2
 8002036:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8002038:	883b      	ldrh	r3, [r7, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d903      	bls.n	8002046 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002044:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002046:	2200      	movs	r2, #0
 8002048:	2102      	movs	r1, #2
 800204a:	480f      	ldr	r0, [pc, #60]	@ (8002088 <GYRO_IO_Write+0x60>)
 800204c:	f000 fd80 	bl	8002b50 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff36 	bl	8001ec4 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8002058:	e00a      	b.n	8002070 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff30 	bl	8001ec4 <SPIx_WriteRead>
    NumByteToWrite--;
 8002064:	883b      	ldrh	r3, [r7, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3301      	adds	r3, #1
 800206e:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002070:	883b      	ldrh	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f1      	bne.n	800205a <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002076:	2201      	movs	r2, #1
 8002078:	2102      	movs	r1, #2
 800207a:	4803      	ldr	r0, [pc, #12]	@ (8002088 <GYRO_IO_Write+0x60>)
 800207c:	f000 fd68 	bl	8002b50 <HAL_GPIO_WritePin>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40020800 	.word	0x40020800

0800208c <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
 8002098:	4613      	mov	r3, r2
 800209a:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 800209c:	883b      	ldrh	r3, [r7, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d904      	bls.n	80020ac <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80020a8:	70fb      	strb	r3, [r7, #3]
 80020aa:	e003      	b.n	80020b4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020b2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80020b4:	2200      	movs	r2, #0
 80020b6:	2102      	movs	r1, #2
 80020b8:	4810      	ldr	r0, [pc, #64]	@ (80020fc <GYRO_IO_Read+0x70>)
 80020ba:	f000 fd49 	bl	8002b50 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff feff 	bl	8001ec4 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 80020c6:	e00c      	b.n	80020e2 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fefb 	bl	8001ec4 <SPIx_WriteRead>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80020d6:	883b      	ldrh	r3, [r7, #0]
 80020d8:	3b01      	subs	r3, #1
 80020da:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 80020e2:	883b      	ldrh	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ef      	bne.n	80020c8 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80020e8:	2201      	movs	r2, #1
 80020ea:	2102      	movs	r1, #2
 80020ec:	4803      	ldr	r0, [pc, #12]	@ (80020fc <GYRO_IO_Read+0x70>)
 80020ee:	f000 fd2f 	bl	8002b50 <HAL_GPIO_WritePin>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40020800 	.word	0x40020800

08002100 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800210a:	2300      	movs	r3, #0
 800210c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 800210e:	2300      	movs	r3, #0
 8002110:	703b      	strb	r3, [r7, #0]
 8002112:	2300      	movs	r3, #0
 8002114:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002116:	4b51      	ldr	r3, [pc, #324]	@ (800225c <BSP_GYRO_Init+0x15c>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4798      	blx	r3
 800211c:	4603      	mov	r3, r0
 800211e:	2bd4      	cmp	r3, #212	@ 0xd4
 8002120:	d005      	beq.n	800212e <BSP_GYRO_Init+0x2e>
 8002122:	4b4e      	ldr	r3, [pc, #312]	@ (800225c <BSP_GYRO_Init+0x15c>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4798      	blx	r3
 8002128:	4603      	mov	r3, r0
 800212a:	2bd5      	cmp	r3, #213	@ 0xd5
 800212c:	d145      	bne.n	80021ba <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800212e:	4b4c      	ldr	r3, [pc, #304]	@ (8002260 <BSP_GYRO_Init+0x160>)
 8002130:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <BSP_GYRO_Init+0x15c>)
 8002132:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002134:	2308      	movs	r3, #8
 8002136:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002138:	2300      	movs	r3, #0
 800213a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 800213c:	2307      	movs	r3, #7
 800213e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002140:	2330      	movs	r3, #48	@ 0x30
 8002142:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002144:	2300      	movs	r3, #0
 8002146:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002148:	2300      	movs	r3, #0
 800214a:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 800214c:	2310      	movs	r3, #16
 800214e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002150:	793a      	ldrb	r2, [r7, #4]
 8002152:	797b      	ldrb	r3, [r7, #5]
 8002154:	4313      	orrs	r3, r2
 8002156:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002158:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800215a:	4313      	orrs	r3, r2
 800215c:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800215e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002160:	4313      	orrs	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002166:	7a3a      	ldrb	r2, [r7, #8]
 8002168:	7a7b      	ldrb	r3, [r7, #9]
 800216a:	4313      	orrs	r3, r2
 800216c:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 800216e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002170:	4313      	orrs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b29a      	uxth	r2, r3
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800217e:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <BSP_GYRO_Init+0x160>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	89ba      	ldrh	r2, [r7, #12]
 8002186:	4610      	mov	r0, r2
 8002188:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800218a:	2300      	movs	r3, #0
 800218c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800218e:	2300      	movs	r3, #0
 8002190:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002192:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002194:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002196:	4313      	orrs	r3, r2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <BSP_GYRO_Init+0x160>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	89ba      	ldrh	r2, [r7, #12]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	4610      	mov	r0, r2
 80021a8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <BSP_GYRO_Init+0x160>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	2010      	movs	r0, #16
 80021b2:	4798      	blx	r3

    ret = GYRO_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e04a      	b.n	8002250 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <BSP_GYRO_Init+0x164>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4798      	blx	r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	2bd3      	cmp	r3, #211	@ 0xd3
 80021c4:	d144      	bne.n	8002250 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <BSP_GYRO_Init+0x160>)
 80021c8:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <BSP_GYRO_Init+0x164>)
 80021ca:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80021cc:	2308      	movs	r3, #8
 80021ce:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80021d4:	2307      	movs	r3, #7
 80021d6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80021d8:	2330      	movs	r3, #48	@ 0x30
 80021da:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80021dc:	2300      	movs	r3, #0
 80021de:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80021e0:	2300      	movs	r3, #0
 80021e2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80021e4:	2310      	movs	r3, #16
 80021e6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021e8:	793a      	ldrb	r2, [r7, #4]
 80021ea:	797b      	ldrb	r3, [r7, #5]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80021f0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80021fe:	7a3a      	ldrb	r2, [r7, #8]
 8002200:	7a7b      	ldrb	r3, [r7, #9]
 8002202:	4313      	orrs	r3, r2
 8002204:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002206:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002208:	4313      	orrs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	89bb      	ldrh	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <BSP_GYRO_Init+0x160>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	89ba      	ldrh	r2, [r7, #12]
 800221e:	4610      	mov	r0, r2
 8002220:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8002222:	2300      	movs	r3, #0
 8002224:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8002226:	2300      	movs	r3, #0
 8002228:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800222a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800222c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800222e:	4313      	orrs	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <BSP_GYRO_Init+0x160>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	89ba      	ldrh	r2, [r7, #12]
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	4610      	mov	r0, r2
 8002240:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <BSP_GYRO_Init+0x160>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	2010      	movs	r0, #16
 800224a:	4798      	blx	r3

    ret = GYRO_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
  }
/* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000038 	.word	0x20000038
 8002260:	2000046c 	.word	0x2000046c
 8002264:	20000004 	.word	0x20000004

08002268 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <BSP_GYRO_GetXYZ+0x24>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <BSP_GYRO_GetXYZ+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000046c 	.word	0x2000046c

08002290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <HAL_Init+0x40>)
 800229a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <HAL_Init+0x40>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <HAL_Init+0x40>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f94f 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7fe ffea 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f967 	bl	80025c6 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f92f 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	@ (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000000 	.word	0x20000000
 800232c:	20000074 	.word	0x20000074
 8002330:	20000070 	.word	0x20000070

08002334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000074 	.word	0x20000074
 8002358:	20000470 	.word	0x20000470

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000470 	.word	0x20000470

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff ffee 	bl	800235c <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffde 	bl	800235c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000074 	.word	0x20000074

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4907      	ldr	r1, [pc, #28]	@ (8002458 <__NVIC_EnableIRQ+0x38>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff29 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff3e 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff31 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa2 	bl	8002518 <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e177      	b.n	80028ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8166 	bne.w	80028e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80c0 	beq.w	80028e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a61      	ldr	r2, [pc, #388]	@ (8002908 <HAL_GPIO_Init+0x328>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	@ (800290c <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d037      	beq.n	800281e <HAL_GPIO_Init+0x23e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	@ (8002910 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x23a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	@ (8002914 <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x236>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	@ (8002918 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	@ (800291c <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	@ (8002920 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	@ (8002924 <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	@ (8002928 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	@ (800292c <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002930 <HAL_GPIO_Init+0x350>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x21a>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e012      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e010      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002802:	2307      	movs	r3, #7
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	@ (8002908 <HAL_GPIO_Init+0x328>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3d      	ldr	r3, [pc, #244]	@ (8002934 <HAL_GPIO_Init+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_GPIO_Init+0x354>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_GPIO_Init+0x354>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_GPIO_Init+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae84 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	@ 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40022000 	.word	0x40022000
 8002930:	40022400 	.word	0x40022400
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e0d9      	b.n	8002b08 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002954:	2201      	movs	r2, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	f040 80c9 	bne.w	8002b02 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002970:	4a6b      	ldr	r2, [pc, #428]	@ (8002b20 <HAL_GPIO_DeInit+0x1e8>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a63      	ldr	r2, [pc, #396]	@ (8002b24 <HAL_GPIO_DeInit+0x1ec>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d037      	beq.n	8002a0a <HAL_GPIO_DeInit+0xd2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a62      	ldr	r2, [pc, #392]	@ (8002b28 <HAL_GPIO_DeInit+0x1f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d031      	beq.n	8002a06 <HAL_GPIO_DeInit+0xce>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a61      	ldr	r2, [pc, #388]	@ (8002b2c <HAL_GPIO_DeInit+0x1f4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02b      	beq.n	8002a02 <HAL_GPIO_DeInit+0xca>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a60      	ldr	r2, [pc, #384]	@ (8002b30 <HAL_GPIO_DeInit+0x1f8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d025      	beq.n	80029fe <HAL_GPIO_DeInit+0xc6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b34 <HAL_GPIO_DeInit+0x1fc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <HAL_GPIO_DeInit+0xc2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002b38 <HAL_GPIO_DeInit+0x200>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_DeInit+0xbe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b3c <HAL_GPIO_DeInit+0x204>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_DeInit+0xba>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <HAL_GPIO_DeInit+0x208>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_DeInit+0xb6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_GPIO_DeInit+0x20c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_DeInit+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b48 <HAL_GPIO_DeInit+0x210>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_DeInit+0xae>
 80029e2:	2309      	movs	r3, #9
 80029e4:	e012      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029e6:	230a      	movs	r3, #10
 80029e8:	e010      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029ea:	2308      	movs	r3, #8
 80029ec:	e00e      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e00c      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e00a      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_DeInit+0xd4>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d132      	bne.n	8002a82 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4949      	ldr	r1, [pc, #292]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a2a:	4b48      	ldr	r3, [pc, #288]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4946      	ldr	r1, [pc, #280]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a38:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4942      	ldr	r1, [pc, #264]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a46:	4b41      	ldr	r3, [pc, #260]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	493f      	ldr	r1, [pc, #252]	@ (8002b4c <HAL_GPIO_DeInit+0x214>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a64:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_GPIO_DeInit+0x1e8>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	482a      	ldr	r0, [pc, #168]	@ (8002b20 <HAL_GPIO_DeInit+0x1e8>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	08d2      	lsrs	r2, r2, #3
 8002ab8:	4019      	ands	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2103      	movs	r1, #3
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2103      	movs	r1, #3
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f af22 	bls.w	8002954 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40021400 	.word	0x40021400
 8002b3c:	40021800 	.word	0x40021800
 8002b40:	40021c00 	.word	0x40021c00
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40022400 	.word	0x40022400
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e101      	b.n	8002d98 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f005 ffac 	bl	8008b0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc2:	d102      	bne.n	8002bca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 ff17 	bl	8005a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7c1a      	ldrb	r2, [r3, #16]
 8002bdc:	f88d 2000 	strb.w	r2, [sp]
 8002be0:	3304      	adds	r3, #4
 8002be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be4:	f002 fdf6 	bl	80057d4 <USB_CoreInit>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0ce      	b.n	8002d98 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 ff0f 	bl	8005a24 <USB_SetCurrentMode>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0bf      	b.n	8002d98 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e04a      	b.n	8002cb4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3315      	adds	r3, #21
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3314      	adds	r3, #20
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	b298      	uxth	r0, r3
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	332e      	adds	r3, #46	@ 0x2e
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331c      	adds	r3, #28
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3320      	adds	r3, #32
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3324      	adds	r3, #36	@ 0x24
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3af      	bcc.n	8002c1e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e044      	b.n	8002d4e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3b5      	bcc.n	8002cc4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7c1a      	ldrb	r2, [r3, #16]
 8002d60:	f88d 2000 	strb.w	r2, [sp]
 8002d64:	3304      	adds	r3, #4
 8002d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d68:	f002 fea8 	bl	8005abc <USB_DevInit>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00c      	b.n	8002d98 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 feec 	bl	8006b6e <USB_DevDisconnect>

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_PCD_Start+0x1c>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e022      	b.n	8002e02 <HAL_PCD_Start+0x62>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d009      	beq.n	8002de4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fdf9 	bl	80059e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fe9a 	bl	8006b2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b590      	push	{r4, r7, lr}
 8002e0c:	b08d      	sub	sp, #52	@ 0x34
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 ff58 	bl	8006cd6 <USB_GetMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f040 848c 	bne.w	8003746 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 febc 	bl	8006bb0 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8482 	beq.w	8003744 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fea9 	bl	8006bb0 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d107      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f002 0202 	and.w	r2, r2, #2
 8002e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fe97 	bl	8006bb0 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d161      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0210 	bic.w	r2, r2, #16
 8002e9a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	0c5b      	lsrs	r3, r3, #17
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d124      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d035      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6a38      	ldr	r0, [r7, #32]
 8002ee8:	f003 fcce 	bl	8006888 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef8:	441a      	add	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	441a      	add	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	e016      	b.n	8002f40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	0c5b      	lsrs	r3, r3, #17
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d110      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f24:	2208      	movs	r2, #8
 8002f26:	4619      	mov	r1, r3
 8002f28:	6a38      	ldr	r0, [r7, #32]
 8002f2a:	f003 fcad 	bl	8006888 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f3a:	441a      	add	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fe2b 	bl	8006bb0 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f64:	f040 80a7 	bne.w	80030b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fe30 	bl	8006bd6 <USB_ReadDevAllOutEpInterrupt>
 8002f76:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f78:	e099      	b.n	80030ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808e 	beq.w	80030a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fe54 	bl	8006c3e <USB_ReadDevOutEPInterrupt>
 8002f96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fe8a 	bl	8003cd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 ff60 	bl	8003ea0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d030      	beq.n	8003068 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b80      	cmp	r3, #128	@ 0x80
 8003010:	d109      	bne.n	8003026 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003020:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003024:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	3304      	adds	r3, #4
 800303a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	78db      	ldrb	r3, [r3, #3]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2200      	movs	r2, #0
 8003048:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f005 fe5d 	bl	8008d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2302      	movs	r3, #2
 8003066:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	2320      	movs	r3, #32
 8003082:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	3301      	adds	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f af62 	bne.w	8002f7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fd78 	bl	8006bb0 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030ca:	f040 80db 	bne.w	8003284 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fd99 	bl	8006c0a <USB_ReadDevAllInEpInterrupt>
 80030d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030de:	e0cd      	b.n	800327c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80c2 	beq.w	8003270 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fdbf 	bl	8006c7a <USB_ReadDevInEPInterrupt>
 80030fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d057      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	69f9      	ldr	r1, [r7, #28]
 8003124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003128:	4013      	ands	r3, r2
 800312a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	2301      	movs	r3, #1
 800313c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d132      	bne.n	80031ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3320      	adds	r3, #32
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4403      	add	r3, r0
 8003166:	331c      	adds	r3, #28
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4419      	add	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3320      	adds	r3, #32
 800317c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d113      	bne.n	80031ac <HAL_PCD_IRQHandler+0x3a2>
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3324      	adds	r3, #36	@ 0x24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031a4:	461a      	mov	r2, r3
 80031a6:	2101      	movs	r1, #1
 80031a8:	f003 fdc6 	bl	8006d38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f005 fd27 	bl	8008c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ce:	461a      	mov	r2, r3
 80031d0:	2308      	movs	r3, #8
 80031d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ea:	461a      	mov	r2, r3
 80031ec:	2310      	movs	r3, #16
 80031ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2340      	movs	r3, #64	@ 0x40
 800320a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d023      	beq.n	800325e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003218:	6a38      	ldr	r0, [r7, #32]
 800321a:	f002 fdb3 	bl	8005d84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800321e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	3310      	adds	r3, #16
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	78db      	ldrb	r3, [r3, #3]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 fd74 	bl	8008d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003258:	461a      	mov	r2, r3
 800325a:	2302      	movs	r3, #2
 800325c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fca3 	bl	8003bb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	f47f af2e 	bne.w	80030e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fc91 	bl	8006bb0 <USB_ReadInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003298:	d122      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d108      	bne.n	80032ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032c0:	2100      	movs	r1, #0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fe8a 	bl	8003fdc <HAL_PCDEx_LPM_Callback>
 80032c8:	e002      	b.n	80032d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f005 fd12 	bl	8008cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 fc63 	bl	8006bb0 <USB_ReadInterrupts>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f4:	d112      	bne.n	800331c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fcce 	bl	8008ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800331a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fc45 	bl	8006bb0 <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003330:	f040 80b7 	bne.w	80034a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2110      	movs	r1, #16
 800334e:	4618      	mov	r0, r3
 8003350:	f002 fd18 	bl	8005d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003358:	e046      	b.n	80033e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003366:	461a      	mov	r2, r3
 8003368:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800336c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	440a      	add	r2, r1
 8003384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003388:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800338c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800338e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b2:	0151      	lsls	r1, r2, #5
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	440a      	add	r2, r1
 80033b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e4:	3301      	adds	r3, #1
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	461a      	mov	r2, r3
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d3b2      	bcc.n	800335a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003402:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003406:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7bdb      	ldrb	r3, [r3, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003420:	f043 030b 	orr.w	r3, r3, #11
 8003424:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003436:	f043 030b 	orr.w	r3, r3, #11
 800343a:	6453      	str	r3, [r2, #68]	@ 0x44
 800343c:	e015      	b.n	800346a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003450:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003454:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003464:	f043 030b 	orr.w	r3, r3, #11
 8003468:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003478:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800347c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800348c:	461a      	mov	r2, r3
 800348e:	f003 fc53 	bl	8006d38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80034a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fb82 	bl	8006bb0 <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b6:	d123      	bne.n	8003500 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 fc18 	bl	8006cf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fcd5 	bl	8005e76 <USB_GetDevSpeed>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681c      	ldr	r4, [r3, #0]
 80034d8:	f001 f9f0 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034e2:	461a      	mov	r2, r3
 80034e4:	4620      	mov	r0, r4
 80034e6:	f002 f9d9 	bl	800589c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f005 fbb3 	bl	8008c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f003 fb53 	bl	8006bb0 <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d10a      	bne.n	800352a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f005 fb90 	bl	8008c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f002 0208 	and.w	r2, r2, #8
 8003528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f003 fb3e 	bl	8006bb0 <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d123      	bne.n	8003586 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	e014      	b.n	800357a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 faf0 	bl	8003b54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	3301      	adds	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	4293      	cmp	r3, r2
 8003584:	d3e4      	bcc.n	8003550 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fb10 	bl	8006bb0 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359a:	d13c      	bne.n	8003616 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800359c:	2301      	movs	r3, #1
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a0:	e02b      	b.n	80035fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3318      	adds	r3, #24
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d115      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da12      	bge.n	80035f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3317      	adds	r3, #23
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fab0 	bl	8003b54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	3301      	adds	r3, #1
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	791b      	ldrb	r3, [r3, #4]
 80035fe:	461a      	mov	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	4293      	cmp	r3, r2
 8003604:	d3cd      	bcc.n	80035a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 fac8 	bl	8006bb0 <USB_ReadInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800362a:	d156      	bne.n	80036da <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003630:	e045      	b.n	80036be <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d12e      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800365a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	da2b      	bge.n	80036b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800366c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003670:	429a      	cmp	r2, r3
 8003672:	d121      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036b4:	6053      	str	r3, [r2, #4]
            break;
 80036b6:	e008      	b.n	80036ca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	3301      	adds	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	791b      	ldrb	r3, [r3, #4]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d3b3      	bcc.n	8003632 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f003 fa66 	bl	8006bb0 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ee:	d10a      	bne.n	8003706 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f005 fb31 	bl	8008d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fa50 	bl	8006bb0 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d115      	bne.n	8003746 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f005 fb21 	bl	8008d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	e000      	b.n	8003746 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003744:	bf00      	nop
    }
  }
}
 8003746:	3734      	adds	r7, #52	@ 0x34
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_SetAddress+0x1a>
 8003762:	2302      	movs	r3, #2
 8003764:	e012      	b.n	800378c <HAL_PCD_SetAddress+0x40>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f003 f9af 	bl	8006ae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	70fb      	strb	r3, [r7, #3]
 80037a6:	460b      	mov	r3, r1
 80037a8:	803b      	strh	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da0f      	bge.n	80037da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3310      	adds	r3, #16
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00f      	b.n	80037fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003806:	883a      	ldrh	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	78ba      	ldrb	r2, [r7, #2]
 8003810:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003824:	78bb      	ldrb	r3, [r7, #2]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d102      	bne.n	8003830 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_PCD_EP_Open+0xaa>
 800383a:	2302      	movs	r3, #2
 800383c:	e00e      	b.n	800385c <HAL_PCD_EP_Open+0xc8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fb37 	bl	8005ec0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800385a:	7afb      	ldrb	r3, [r7, #11]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003874:	2b00      	cmp	r3, #0
 8003876:	da0f      	bge.n	8003898 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	3310      	adds	r3, #16
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	705a      	strb	r2, [r3, #1]
 8003896:	e00f      	b.n	80038b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_EP_Close+0x6e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e00e      	b.n	80038f0 <HAL_PCD_EP_Close+0x8c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fb75 	bl	8005fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800393a:	7afb      	ldrb	r3, [r7, #11]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	b2da      	uxtb	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	799b      	ldrb	r3, [r3, #6]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	799b      	ldrb	r3, [r3, #6]
 800395c:	461a      	mov	r2, r3
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	f002 fc12 	bl	8006188 <USB_EPStartXfer>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	460b      	mov	r3, r1
 800397c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397e:	7afb      	ldrb	r3, [r7, #11]
 8003980:	f003 020f 	and.w	r2, r3, #15
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	3310      	adds	r3, #16
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2201      	movs	r2, #1
 80039ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d102      	bne.n	80039c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	799b      	ldrb	r3, [r3, #6]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	f002 fbd8 	bl	8006188 <USB_EPStartXfer>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	7912      	ldrb	r2, [r2, #4]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e04f      	b.n	8003aa0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da0f      	bge.n	8003a28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3310      	adds	r3, #16
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	e00d      	b.n	8003a44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_PCD_EP_SetStall+0x82>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e01d      	b.n	8003aa0 <HAL_PCD_EP_SetStall+0xbe>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 ff60 	bl	8006938 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7999      	ldrb	r1, [r3, #6]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a90:	461a      	mov	r2, r3
 8003a92:	f003 f951 	bl	8006d38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	7912      	ldrb	r2, [r2, #4]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da0f      	bge.n	8003aee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3310      	adds	r3, #16
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	705a      	strb	r2, [r3, #1]
 8003aec:	e00f      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_EP_ClrStall+0x86>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e00e      	b.n	8003b4c <HAL_PCD_EP_ClrStall+0xa4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 ff69 	bl	8006a14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da0c      	bge.n	8003b82 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3310      	adds	r3, #16
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e00c      	b.n	8003b9c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 020f 	and.w	r2, r3, #15
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	3304      	adds	r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f002 fd88 	bl	80066b8 <USB_EPStopXfer>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bac:	7afb      	ldrb	r3, [r7, #11]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b08a      	sub	sp, #40	@ 0x28
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d901      	bls.n	8003bee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06b      	b.n	8003cc6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d902      	bls.n	8003c0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3303      	adds	r3, #3
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c12:	e02a      	b.n	8003c6a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d902      	bls.n	8003c30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3303      	adds	r3, #3
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6978      	ldr	r0, [r7, #20]
 8003c4e:	f002 fddd 	bl	800680c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	441a      	add	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d809      	bhi.n	8003c94 <PCD_WriteEmptyTxFifo+0xde>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d203      	bcs.n	8003c94 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1bf      	bne.n	8003c14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d811      	bhi.n	8003cc4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	333c      	adds	r3, #60	@ 0x3c
 8003ce8:	3304      	adds	r3, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	799b      	ldrb	r3, [r3, #6]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d17b      	bne.n	8003dfe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4a61      	ldr	r2, [pc, #388]	@ (8003e98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	f240 80b9 	bls.w	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80b3 	beq.w	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d32:	461a      	mov	r2, r3
 8003d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d38:	6093      	str	r3, [r2, #8]
 8003d3a:	e0a7      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	2320      	movs	r3, #32
 8003d56:	6093      	str	r3, [r2, #8]
 8003d58:	e098      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 8093 	bne.w	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	4a4b      	ldr	r2, [pc, #300]	@ (8003e98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d90f      	bls.n	8003d8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d84:	461a      	mov	r2, r3
 8003d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8a:	6093      	str	r3, [r2, #8]
 8003d8c:	e07e      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3304      	adds	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	1ad2      	subs	r2, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d114      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2101      	movs	r1, #1
 8003ddc:	f002 ffac 	bl	8006d38 <USB_EP0_OutStart>
 8003de0:	e006      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f004 feea 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
 8003dfc:	e046      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4a26      	ldr	r2, [pc, #152]	@ (8003e9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d124      	bne.n	8003e50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e22:	6093      	str	r3, [r2, #8]
 8003e24:	e032      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2320      	movs	r3, #32
 8003e40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f004 fec1 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
 8003e4e:	e01d      	b.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d114      	bne.n	8003e80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f002 ff5c 	bl	8006d38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f004 fea2 	bl	8008bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	4f54300a 	.word	0x4f54300a
 8003e9c:	4f54310a 	.word	0x4f54310a

08003ea0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	333c      	adds	r3, #60	@ 0x3c
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d90e      	bls.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eec:	461a      	mov	r2, r3
 8003eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f004 fe59 	bl	8008bac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d90c      	bls.n	8003f1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	799b      	ldrb	r3, [r3, #6]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f14:	461a      	mov	r2, r3
 8003f16:	2101      	movs	r1, #1
 8003f18:	f002 ff0e 	bl	8006d38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	4f54300a 	.word	0x4f54300a

08003f2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f4a:	883b      	ldrh	r3, [r7, #0]
 8003f4c:	0419      	lsls	r1, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f58:	e028      	b.n	8003fac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4413      	add	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e00d      	b.n	8003f8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	3340      	adds	r3, #64	@ 0x40
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	3301      	adds	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d3ec      	bcc.n	8003f6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f94:	883b      	ldrh	r3, [r7, #0]
 8003f96:	0418      	lsls	r0, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	3340      	adds	r3, #64	@ 0x40
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e267      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d075      	beq.n	80040fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b04      	cmp	r3, #4
 800401c:	d00c      	beq.n	8004038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401e:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d112      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402a:	4b82      	ldr	r3, [pc, #520]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004036:	d10b      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	4b7e      	ldr	r3, [pc, #504]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d05b      	beq.n	80040fc <HAL_RCC_OscConfig+0x108>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d157      	bne.n	80040fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e242      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x74>
 800405a:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a75      	ldr	r2, [pc, #468]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x98>
 8004072:	4b70      	ldr	r3, [pc, #448]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6f      	ldr	r2, [pc, #444]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b6d      	ldr	r3, [pc, #436]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6c      	ldr	r2, [pc, #432]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 800408c:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a68      	ldr	r2, [pc, #416]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b66      	ldr	r3, [pc, #408]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a65      	ldr	r2, [pc, #404]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe f956 	bl	800235c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe f952 	bl	800235c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e207      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0xc0>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe f942 	bl	800235c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe f93e 	bl	800235c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	@ 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e1f3      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	4b51      	ldr	r3, [pc, #324]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0xe8>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d063      	beq.n	80041d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410a:	4b4a      	ldr	r3, [pc, #296]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RCC_OscConfig+0x152>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1c7      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004146:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4937      	ldr	r1, [pc, #220]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	e03a      	b.n	80041d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x244>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe f8f7 	bl	800235c <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004172:	f7fe f8f3 	bl	800235c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1a8      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4925      	ldr	r1, [pc, #148]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	e015      	b.n	80041d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a6:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <HAL_RCC_OscConfig+0x244>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fe f8d6 	bl	800235c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b4:	f7fe f8d2 	bl	800235c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e187      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_RCC_OscConfig+0x248>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fe f8b6 	bl	800235c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fe f8b2 	bl	800235c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e167      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x200>
 8004212:	e01b      	b.n	800424c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCC_OscConfig+0x248>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fe f89f 	bl	800235c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	e00e      	b.n	8004240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004222:	f7fe f89b 	bl	800235c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d907      	bls.n	8004240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e150      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
 8004234:	40023800 	.word	0x40023800
 8004238:	42470000 	.word	0x42470000
 800423c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b88      	ldr	r3, [pc, #544]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ea      	bne.n	8004222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8097 	beq.w	8004388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b81      	ldr	r3, [pc, #516]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b7d      	ldr	r3, [pc, #500]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	4a7c      	ldr	r2, [pc, #496]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	@ 0x40
 800427a:	4b7a      	ldr	r3, [pc, #488]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b77      	ldr	r3, [pc, #476]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b74      	ldr	r3, [pc, #464]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a73      	ldr	r2, [pc, #460]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe f85b 	bl	800235c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fe f857 	bl	800235c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e10c      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x2ea>
 80042d0:	4b64      	ldr	r3, [pc, #400]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a63      	ldr	r2, [pc, #396]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
 80042dc:	e01c      	b.n	8004318 <HAL_RCC_OscConfig+0x324>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x30c>
 80042e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x324>
 8004300:	4b58      	ldr	r3, [pc, #352]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	4a57      	ldr	r2, [pc, #348]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6713      	str	r3, [r2, #112]	@ 0x70
 800430c:	4b55      	ldr	r3, [pc, #340]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a54      	ldr	r2, [pc, #336]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 0304 	bic.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f81c 	bl	800235c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe f818 	bl	800235c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0cb      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b49      	ldr	r3, [pc, #292]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RCC_OscConfig+0x334>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434c:	f7fe f806 	bl	800235c <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fe f802 	bl	800235c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0b5      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436a:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ee      	bne.n	8004354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a1 	beq.w	80044d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004392:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b08      	cmp	r3, #8
 800439c:	d05c      	beq.n	8004458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d141      	bne.n	800442a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b31      	ldr	r3, [pc, #196]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fd ffd6 	bl	800235c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fd ffd2 	bl	800235c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e087      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	491b      	ldr	r1, [pc, #108]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fc:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fd ffab 	bl	800235c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440a:	f7fd ffa7 	bl	800235c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e05c      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x416>
 8004428:	e054      	b.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b10      	ldr	r3, [pc, #64]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd ff94 	bl	800235c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd ff90 	bl	800235c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e045      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x444>
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e038      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
 8004464:	40023800 	.word	0x40023800
 8004468:	40007000 	.word	0x40007000
 800446c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004470:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x4ec>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d028      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d11a      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	3b01      	subs	r3, #1
 80044ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0cc      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b68      	ldr	r3, [pc, #416]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d90c      	bls.n	8004520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b65      	ldr	r3, [pc, #404]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0b8      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004538:	4b59      	ldr	r3, [pc, #356]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a58      	ldr	r2, [pc, #352]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004550:	4b53      	ldr	r3, [pc, #332]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a52      	ldr	r2, [pc, #328]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800455a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455c:	4b50      	ldr	r3, [pc, #320]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	494d      	ldr	r1, [pc, #308]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d044      	beq.n	8004604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d119      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e07f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	4b3f      	ldr	r3, [pc, #252]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e067      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4934      	ldr	r1, [pc, #208]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fd fec2 	bl	800235c <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fd febe 	bl	800235c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e04f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b2b      	ldr	r3, [pc, #172]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d20c      	bcs.n	800462c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b22      	ldr	r3, [pc, #136]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e032      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	490e      	ldr	r1, [pc, #56]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466a:	f000 f821 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490a      	ldr	r1, [pc, #40]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	fa22 f303 	lsr.w	r3, r2, r3
 8004682:	4a09      	ldr	r2, [pc, #36]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd fe22 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023c00 	.word	0x40023c00
 80046a0:	40023800 	.word	0x40023800
 80046a4:	0800bab8 	.word	0x0800bab8
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000070 	.word	0x20000070

080046b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b094      	sub	sp, #80	@ 0x50
 80046b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80046bc:	2300      	movs	r3, #0
 80046be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c0:	2300      	movs	r3, #0
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c8:	4b79      	ldr	r3, [pc, #484]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d00d      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x40>
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	f200 80e1 	bhi.w	800489c <HAL_RCC_GetSysClockFreq+0x1ec>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x34>
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x3a>
 80046e2:	e0db      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b73      	ldr	r3, [pc, #460]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80046e8:	e0db      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ea:	4b73      	ldr	r3, [pc, #460]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80046ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ee:	e0d8      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f0:	4b6f      	ldr	r3, [pc, #444]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fa:	4b6d      	ldr	r3, [pc, #436]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004706:	4b6a      	ldr	r3, [pc, #424]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	2200      	movs	r2, #0
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
 800471e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	f04f 0000 	mov.w	r0, #0
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	0159      	lsls	r1, r3, #5
 8004730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004734:	0150      	lsls	r0, r2, #5
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4621      	mov	r1, r4
 800473c:	1a51      	subs	r1, r2, r1
 800473e:	6139      	str	r1, [r7, #16]
 8004740:	4629      	mov	r1, r5
 8004742:	eb63 0301 	sbc.w	r3, r3, r1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004754:	4659      	mov	r1, fp
 8004756:	018b      	lsls	r3, r1, #6
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800475e:	4651      	mov	r1, sl
 8004760:	018a      	lsls	r2, r1, #6
 8004762:	4651      	mov	r1, sl
 8004764:	ebb2 0801 	subs.w	r8, r2, r1
 8004768:	4659      	mov	r1, fp
 800476a:	eb63 0901 	sbc.w	r9, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004782:	4690      	mov	r8, r2
 8004784:	4699      	mov	r9, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb18 0303 	adds.w	r3, r8, r3
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	462b      	mov	r3, r5
 8004790:	eb49 0303 	adc.w	r3, r9, r3
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047a2:	4629      	mov	r1, r5
 80047a4:	024b      	lsls	r3, r1, #9
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ac:	4621      	mov	r1, r4
 80047ae:	024a      	lsls	r2, r1, #9
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b6:	2200      	movs	r2, #0
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047c0:	f7fc fa02 	bl	8000bc8 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047cc:	e058      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ce:	4b38      	ldr	r3, [pc, #224]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	2200      	movs	r2, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	4611      	mov	r1, r2
 80047da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	f04f 0000 	mov.w	r0, #0
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	0159      	lsls	r1, r3, #5
 80047f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047fa:	0150      	lsls	r0, r2, #5
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4641      	mov	r1, r8
 8004802:	ebb2 0a01 	subs.w	sl, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb63 0b01 	sbc.w	fp, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800481c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004820:	ebb2 040a 	subs.w	r4, r2, sl
 8004824:	eb63 050b 	sbc.w	r5, r3, fp
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	00eb      	lsls	r3, r5, #3
 8004832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004836:	00e2      	lsls	r2, r4, #3
 8004838:	4614      	mov	r4, r2
 800483a:	461d      	mov	r5, r3
 800483c:	4643      	mov	r3, r8
 800483e:	18e3      	adds	r3, r4, r3
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	464b      	mov	r3, r9
 8004844:	eb45 0303 	adc.w	r3, r5, r3
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004856:	4629      	mov	r1, r5
 8004858:	028b      	lsls	r3, r1, #10
 800485a:	4621      	mov	r1, r4
 800485c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004860:	4621      	mov	r1, r4
 8004862:	028a      	lsls	r2, r1, #10
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800486a:	2200      	movs	r2, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	61fa      	str	r2, [r7, #28]
 8004870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004874:	f7fc f9a8 	bl	8000bc8 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4613      	mov	r3, r2
 800487e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	3301      	adds	r3, #1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800489a:	e002      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3750      	adds	r7, #80	@ 0x50
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	00f42400 	.word	0x00f42400
 80048b8:	007a1200 	.word	0x007a1200

080048bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000000 	.word	0x20000000

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d8:	f7ff fff0 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0a9b      	lsrs	r3, r3, #10
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4903      	ldr	r1, [pc, #12]	@ (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	0800bac8 	.word	0x0800bac8

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004900:	f7ff ffdc 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b05      	ldr	r3, [pc, #20]	@ (800491c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0b5b      	lsrs	r3, r3, #13
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4903      	ldr	r1, [pc, #12]	@ (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40023800 	.word	0x40023800
 8004920:	0800bac8 	.word	0x0800bac8

08004924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07b      	b.n	8004a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004946:	d009      	beq.n	800495c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
 800494e:	e005      	b.n	800495c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fcb8 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0104 	and.w	r1, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	f003 0210 	and.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e01a      	b.n	8004a7e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fc fc8b 	bl	800137c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b08c      	sub	sp, #48	@ 0x30
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x26>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e198      	b.n	8004dde <HAL_SPI_TransmitReceive+0x358>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab4:	f7fd fc52 	bl	800235c <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ace:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d00f      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x70>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004adc:	d107      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x68>
 8004ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d003      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004af4:	e16d      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x82>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x82>
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b0e:	e160      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d003      	beq.n	8004b24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2205      	movs	r2, #5
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	887a      	ldrh	r2, [r7, #2]
 8004b3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d007      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d17c      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x10a>
 8004b8a:	8b7b      	ldrh	r3, [r7, #26]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d16a      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb4:	e057      	b.n	8004c66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d11b      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x176>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x176>
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d113      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	881a      	ldrh	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	1c9a      	adds	r2, r3, #2
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d119      	bne.n	8004c3e <HAL_SPI_TransmitReceive+0x1b8>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d014      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c3e:	f7fd fb8d 	bl	800235c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d80b      	bhi.n	8004c66 <HAL_SPI_TransmitReceive+0x1e0>
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d007      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004c64:	e0b5      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1a2      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x130>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d19d      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x130>
 8004c7a:	e080      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x204>
 8004c84:	8b7b      	ldrh	r3, [r7, #26]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d16f      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb0:	e05b      	b.n	8004d6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d11c      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x274>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d017      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x274>
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d114      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d119      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x2b6>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d014      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d3c:	f7fd fb0e 	bl	800235c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d803      	bhi.n	8004d54 <HAL_SPI_TransmitReceive+0x2ce>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d102      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x2d4>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004d68:	e033      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d19e      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x22c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d199      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f8c6 	bl	8004f14 <SPI_EndRxTxTransaction>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d9a:	e01a      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc8:	e003      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004dda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3730      	adds	r7, #48	@ 0x30
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df4:	b2db      	uxtb	r3, r3
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e14:	f7fd faa2 	bl	800235c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e24:	f7fd fa9a 	bl	800235c <HAL_GetTick>
 8004e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e2a:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	015b      	lsls	r3, r3, #5
 8004e30:	0d1b      	lsrs	r3, r3, #20
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3a:	e054      	b.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d050      	beq.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e44:	f7fd fa8a 	bl	800235c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d902      	bls.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d13d      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e72:	d111      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e7c:	d004      	beq.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e86:	d107      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea0:	d10f      	bne.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e017      	b.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf0c      	ite	eq
 8004ef6:	2301      	moveq	r3, #1
 8004ef8:	2300      	movne	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d19b      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000000 	.word	0x20000000

08004f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2201      	movs	r2, #1
 8004f28:	2102      	movs	r1, #2
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff ff6a 	bl	8004e04 <SPI_WaitFlagStateUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e032      	b.n	8004fac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f46:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <SPI_EndRxTxTransaction+0xa0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <SPI_EndRxTxTransaction+0xa4>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	0d5b      	lsrs	r3, r3, #21
 8004f52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f64:	d112      	bne.n	8004f8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff ff47 	bl	8004e04 <SPI_WaitFlagStateUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e00f      	b.n	8004fac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d0f2      	beq.n	8004f8c <SPI_EndRxTxTransaction+0x78>
 8004fa6:	e000      	b.n	8004faa <SPI_EndRxTxTransaction+0x96>
        break;
 8004fa8:	bf00      	nop
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	165e9f81 	.word	0x165e9f81

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e042      	b.n	8005054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc f9e8 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	@ 0x24
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f973 	bl	80052ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d175      	bne.n	8005168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_UART_Transmit+0x2c>
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e06e      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2221      	movs	r2, #33	@ 0x21
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509a:	f7fd f95f 	bl	800235c <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e02e      	b.n	8005130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f848 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03a      	b.n	800516a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e007      	b.n	8005122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1cb      	bne.n	80050d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2140      	movs	r1, #64	@ 0x40
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f814 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e006      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e03b      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d037      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fd f8e6 	bl	800235c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e03a      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d023      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d020      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d01d      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d116      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f81d 	bl	8005224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2208      	movs	r2, #8
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e00f      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4013      	ands	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	429a      	cmp	r2, r3
 8005218:	d0b4      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b095      	sub	sp, #84	@ 0x54
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800524c:	643a      	str	r2, [r7, #64]	@ 0x40
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	2b01      	cmp	r3, #1
 800529a:	d119      	bne.n	80052d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 0310 	bic.w	r3, r3, #16
 80052b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052bc:	61ba      	str	r2, [r7, #24]
 80052be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052de:	bf00      	nop
 80052e0:	3754      	adds	r7, #84	@ 0x54
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f0:	b0c0      	sub	sp, #256	@ 0x100
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	ea40 0301 	orr.w	r3, r0, r1
 8005314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	431a      	orrs	r2, r3
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005344:	f021 010c 	bic.w	r1, r1, #12
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005352:	430b      	orrs	r3, r1
 8005354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	6999      	ldr	r1, [r3, #24]
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	ea40 0301 	orr.w	r3, r0, r1
 8005372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b8f      	ldr	r3, [pc, #572]	@ (80055b8 <UART_SetConfig+0x2cc>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d005      	beq.n	800538c <UART_SetConfig+0xa0>
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8d      	ldr	r3, [pc, #564]	@ (80055bc <UART_SetConfig+0x2d0>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d104      	bne.n	8005396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800538c:	f7ff fab6 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 8005390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005394:	e003      	b.n	800539e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005396:	f7ff fa9d 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 800539a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	f040 810c 	bne.w	80055c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	1891      	adds	r1, r2, r2
 80053c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053c6:	415b      	adcs	r3, r3
 80053c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ce:	4621      	mov	r1, r4
 80053d0:	eb12 0801 	adds.w	r8, r2, r1
 80053d4:	4629      	mov	r1, r5
 80053d6:	eb43 0901 	adc.w	r9, r3, r1
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ee:	4690      	mov	r8, r2
 80053f0:	4699      	mov	r9, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	eb18 0303 	adds.w	r3, r8, r3
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053fc:	462b      	mov	r3, r5
 80053fe:	eb49 0303 	adc.w	r3, r9, r3
 8005402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005412:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800541a:	460b      	mov	r3, r1
 800541c:	18db      	adds	r3, r3, r3
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005420:	4613      	mov	r3, r2
 8005422:	eb42 0303 	adc.w	r3, r2, r3
 8005426:	657b      	str	r3, [r7, #84]	@ 0x54
 8005428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800542c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005430:	f7fb fbca 	bl	8000bc8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b61      	ldr	r3, [pc, #388]	@ (80055c0 <UART_SetConfig+0x2d4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800544c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800545c:	415b      	adcs	r3, r3
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005464:	4641      	mov	r1, r8
 8005466:	eb12 0a01 	adds.w	sl, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb43 0b01 	adc.w	fp, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800547c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005484:	4692      	mov	sl, r2
 8005486:	469b      	mov	fp, r3
 8005488:	4643      	mov	r3, r8
 800548a:	eb1a 0303 	adds.w	r3, sl, r3
 800548e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005492:	464b      	mov	r3, r9
 8005494:	eb4b 0303 	adc.w	r3, fp, r3
 8005498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054b0:	460b      	mov	r3, r1
 80054b2:	18db      	adds	r3, r3, r3
 80054b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b6:	4613      	mov	r3, r2
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054c6:	f7fb fb7f 	bl	8000bc8 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80054d2:	fba3 2301 	umull	r2, r3, r3, r1
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2264      	movs	r2, #100	@ 0x64
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	1acb      	subs	r3, r1, r3
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054e6:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80054e8:	fba3 2302 	umull	r2, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054f4:	441c      	add	r4, r3
 80054f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005500:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005510:	415b      	adcs	r3, r3
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005518:	4641      	mov	r1, r8
 800551a:	1851      	adds	r1, r2, r1
 800551c:	6339      	str	r1, [r7, #48]	@ 0x30
 800551e:	4649      	mov	r1, r9
 8005520:	414b      	adcs	r3, r1
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005530:	4659      	mov	r1, fp
 8005532:	00cb      	lsls	r3, r1, #3
 8005534:	4651      	mov	r1, sl
 8005536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553a:	4651      	mov	r1, sl
 800553c:	00ca      	lsls	r2, r1, #3
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	4603      	mov	r3, r0
 8005544:	4642      	mov	r2, r8
 8005546:	189b      	adds	r3, r3, r2
 8005548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800554c:	464b      	mov	r3, r9
 800554e:	460a      	mov	r2, r1
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800556c:	460b      	mov	r3, r1
 800556e:	18db      	adds	r3, r3, r3
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005572:	4613      	mov	r3, r2
 8005574:	eb42 0303 	adc.w	r3, r2, r3
 8005578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800557e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005582:	f7fb fb21 	bl	8000bc8 <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <UART_SetConfig+0x2d4>)
 800558c:	fba3 1302 	umull	r1, r3, r3, r2
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	2164      	movs	r1, #100	@ 0x64
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	3332      	adds	r3, #50	@ 0x32
 800559e:	4a08      	ldr	r2, [pc, #32]	@ (80055c0 <UART_SetConfig+0x2d4>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	f003 0207 	and.w	r2, r3, #7
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4422      	add	r2, r4
 80055b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b4:	e106      	b.n	80057c4 <UART_SetConfig+0x4d8>
 80055b6:	bf00      	nop
 80055b8:	40011000 	.word	0x40011000
 80055bc:	40011400 	.word	0x40011400
 80055c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055d6:	4642      	mov	r2, r8
 80055d8:	464b      	mov	r3, r9
 80055da:	1891      	adds	r1, r2, r2
 80055dc:	6239      	str	r1, [r7, #32]
 80055de:	415b      	adcs	r3, r3
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055e6:	4641      	mov	r1, r8
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb43 0501 	adc.w	r5, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	00eb      	lsls	r3, r5, #3
 80055fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055fe:	00e2      	lsls	r2, r4, #3
 8005600:	4614      	mov	r4, r2
 8005602:	461d      	mov	r5, r3
 8005604:	4643      	mov	r3, r8
 8005606:	18e3      	adds	r3, r4, r3
 8005608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800560c:	464b      	mov	r3, r9
 800560e:	eb45 0303 	adc.w	r3, r5, r3
 8005612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005632:	4629      	mov	r1, r5
 8005634:	008b      	lsls	r3, r1, #2
 8005636:	4621      	mov	r1, r4
 8005638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563c:	4621      	mov	r1, r4
 800563e:	008a      	lsls	r2, r1, #2
 8005640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005644:	f7fb fac0 	bl	8000bc8 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4b60      	ldr	r3, [pc, #384]	@ (80057d0 <UART_SetConfig+0x4e4>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011c      	lsls	r4, r3, #4
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	61b9      	str	r1, [r7, #24]
 8005670:	415b      	adcs	r3, r3
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005678:	4641      	mov	r1, r8
 800567a:	1851      	adds	r1, r2, r1
 800567c:	6139      	str	r1, [r7, #16]
 800567e:	4649      	mov	r1, r9
 8005680:	414b      	adcs	r3, r1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005690:	4659      	mov	r1, fp
 8005692:	00cb      	lsls	r3, r1, #3
 8005694:	4651      	mov	r1, sl
 8005696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569a:	4651      	mov	r1, sl
 800569c:	00ca      	lsls	r2, r1, #3
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	4642      	mov	r2, r8
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ac:	464b      	mov	r3, r9
 80056ae:	460a      	mov	r2, r1
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056d0:	4649      	mov	r1, r9
 80056d2:	008b      	lsls	r3, r1, #2
 80056d4:	4641      	mov	r1, r8
 80056d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056da:	4641      	mov	r1, r8
 80056dc:	008a      	lsls	r2, r1, #2
 80056de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056e2:	f7fb fa71 	bl	8000bc8 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <UART_SetConfig+0x4e4>)
 80056ee:	fba3 2301 	umull	r2, r3, r3, r1
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2264      	movs	r2, #100	@ 0x64
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	1acb      	subs	r3, r1, r3
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	3332      	adds	r3, #50	@ 0x32
 8005700:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <UART_SetConfig+0x4e4>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800570c:	441c      	add	r4, r3
 800570e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005712:	2200      	movs	r2, #0
 8005714:	673b      	str	r3, [r7, #112]	@ 0x70
 8005716:	677a      	str	r2, [r7, #116]	@ 0x74
 8005718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	415b      	adcs	r3, r3
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800572c:	4641      	mov	r1, r8
 800572e:	1851      	adds	r1, r2, r1
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	4649      	mov	r1, r9
 8005734:	414b      	adcs	r3, r1
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005744:	4659      	mov	r1, fp
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574e:	4651      	mov	r1, sl
 8005750:	00ca      	lsls	r2, r1, #3
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4642      	mov	r2, r8
 800575a:	189b      	adds	r3, r3, r2
 800575c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800575e:	464b      	mov	r3, r9
 8005760:	460a      	mov	r2, r1
 8005762:	eb42 0303 	adc.w	r3, r2, r3
 8005766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	663b      	str	r3, [r7, #96]	@ 0x60
 8005772:	667a      	str	r2, [r7, #100]	@ 0x64
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005780:	4649      	mov	r1, r9
 8005782:	008b      	lsls	r3, r1, #2
 8005784:	4641      	mov	r1, r8
 8005786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800578a:	4641      	mov	r1, r8
 800578c:	008a      	lsls	r2, r1, #2
 800578e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005792:	f7fb fa19 	bl	8000bc8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <UART_SetConfig+0x4e4>)
 800579c:	fba3 1302 	umull	r1, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	2164      	movs	r1, #100	@ 0x64
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	3332      	adds	r3, #50	@ 0x32
 80057ae:	4a08      	ldr	r2, [pc, #32]	@ (80057d0 <UART_SetConfig+0x4e4>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4422      	add	r2, r4
 80057c2:	609a      	str	r2, [r3, #8]
}
 80057c4:	bf00      	nop
 80057c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d0:	51eb851f 	.word	0x51eb851f

080057d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d4:	b084      	sub	sp, #16
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	f107 001c 	add.w	r0, r7, #28
 80057e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d123      	bne.n	8005836 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fae2 	bl	8006df4 <USB_CoreReset>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e01b      	b.n	800586e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fad6 	bl	8006df4 <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800584c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005858:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005860:	e005      	b.n	800586e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800586e:	7fbb      	ldrb	r3, [r7, #30]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10b      	bne.n	800588c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f043 0206 	orr.w	r2, r3, #6
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f043 0220 	orr.w	r2, r3, #32
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005898:	b004      	add	sp, #16
 800589a:	4770      	bx	lr

0800589c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d165      	bne.n	800597c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a41      	ldr	r2, [pc, #260]	@ (80059b8 <USB_SetTurnaroundTime+0x11c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d906      	bls.n	80058c6 <USB_SetTurnaroundTime+0x2a>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a40      	ldr	r2, [pc, #256]	@ (80059bc <USB_SetTurnaroundTime+0x120>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d202      	bcs.n	80058c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058c0:	230f      	movs	r3, #15
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e062      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <USB_SetTurnaroundTime+0x120>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d306      	bcc.n	80058dc <USB_SetTurnaroundTime+0x40>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4a3b      	ldr	r2, [pc, #236]	@ (80059c0 <USB_SetTurnaroundTime+0x124>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d202      	bcs.n	80058dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058d6:	230e      	movs	r3, #14
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e057      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a38      	ldr	r2, [pc, #224]	@ (80059c0 <USB_SetTurnaroundTime+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d306      	bcc.n	80058f2 <USB_SetTurnaroundTime+0x56>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a37      	ldr	r2, [pc, #220]	@ (80059c4 <USB_SetTurnaroundTime+0x128>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d202      	bcs.n	80058f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058ec:	230d      	movs	r3, #13
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e04c      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a33      	ldr	r2, [pc, #204]	@ (80059c4 <USB_SetTurnaroundTime+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d306      	bcc.n	8005908 <USB_SetTurnaroundTime+0x6c>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4a32      	ldr	r2, [pc, #200]	@ (80059c8 <USB_SetTurnaroundTime+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d802      	bhi.n	8005908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005902:	230c      	movs	r3, #12
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e041      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a2f      	ldr	r2, [pc, #188]	@ (80059c8 <USB_SetTurnaroundTime+0x12c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d906      	bls.n	800591e <USB_SetTurnaroundTime+0x82>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a2e      	ldr	r2, [pc, #184]	@ (80059cc <USB_SetTurnaroundTime+0x130>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d802      	bhi.n	800591e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005918:	230b      	movs	r3, #11
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e036      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a2a      	ldr	r2, [pc, #168]	@ (80059cc <USB_SetTurnaroundTime+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d906      	bls.n	8005934 <USB_SetTurnaroundTime+0x98>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a29      	ldr	r2, [pc, #164]	@ (80059d0 <USB_SetTurnaroundTime+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d802      	bhi.n	8005934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800592e:	230a      	movs	r3, #10
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e02b      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <USB_SetTurnaroundTime+0x134>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d906      	bls.n	800594a <USB_SetTurnaroundTime+0xae>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a25      	ldr	r2, [pc, #148]	@ (80059d4 <USB_SetTurnaroundTime+0x138>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d202      	bcs.n	800594a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005944:	2309      	movs	r3, #9
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e020      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a21      	ldr	r2, [pc, #132]	@ (80059d4 <USB_SetTurnaroundTime+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d306      	bcc.n	8005960 <USB_SetTurnaroundTime+0xc4>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a20      	ldr	r2, [pc, #128]	@ (80059d8 <USB_SetTurnaroundTime+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d802      	bhi.n	8005960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800595a:	2308      	movs	r3, #8
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e015      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4a1d      	ldr	r2, [pc, #116]	@ (80059d8 <USB_SetTurnaroundTime+0x13c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d906      	bls.n	8005976 <USB_SetTurnaroundTime+0xda>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a1c      	ldr	r2, [pc, #112]	@ (80059dc <USB_SetTurnaroundTime+0x140>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d202      	bcs.n	8005976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005970:	2307      	movs	r3, #7
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e00a      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005976:	2306      	movs	r3, #6
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e007      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005982:	2309      	movs	r3, #9
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e001      	b.n	800598c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005988:	2309      	movs	r3, #9
 800598a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00d8acbf 	.word	0x00d8acbf
 80059bc:	00e4e1c0 	.word	0x00e4e1c0
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	01067380 	.word	0x01067380
 80059c8:	011a499f 	.word	0x011a499f
 80059cc:	01312cff 	.word	0x01312cff
 80059d0:	014ca43f 	.word	0x014ca43f
 80059d4:	016e3600 	.word	0x016e3600
 80059d8:	01a6ab1f 	.word	0x01a6ab1f
 80059dc:	01e84800 	.word	0x01e84800

080059e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d115      	bne.n	8005a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a52:	200a      	movs	r0, #10
 8005a54:	f7fc fc8e 	bl	8002374 <HAL_Delay>
      ms += 10U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	330a      	adds	r3, #10
 8005a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 f939 	bl	8006cd6 <USB_GetMode>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d01e      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a6e:	d9f0      	bls.n	8005a52 <USB_SetCurrentMode+0x2e>
 8005a70:	e01a      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d115      	bne.n	8005aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a84:	200a      	movs	r0, #10
 8005a86:	f7fc fc75 	bl	8002374 <HAL_Delay>
      ms += 10U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	330a      	adds	r3, #10
 8005a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f920 	bl	8006cd6 <USB_GetMode>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005aa0:	d9f0      	bls.n	8005a84 <USB_SetCurrentMode+0x60>
 8005aa2:	e001      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e005      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8005aac:	d101      	bne.n	8005ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005abc:	b084      	sub	sp, #16
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e009      	b.n	8005af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3340      	adds	r3, #64	@ 0x40
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3301      	adds	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b0e      	cmp	r3, #14
 8005af4:	d9f2      	bls.n	8005adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005af6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11c      	bne.n	8005b38 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b36:	e00b      	b.n	8005b50 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b56:	461a      	mov	r2, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d10d      	bne.n	8005b80 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f968 	bl	8005e44 <USB_SetDevSpeed>
 8005b74:	e008      	b.n	8005b88 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b76:	2101      	movs	r1, #1
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f963 	bl	8005e44 <USB_SetDevSpeed>
 8005b7e:	e003      	b.n	8005b88 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b80:	2103      	movs	r1, #3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f95e 	bl	8005e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b88:	2110      	movs	r1, #16
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8fa 	bl	8005d84 <USB_FlushTxFifo>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f924 	bl	8005de8 <USB_FlushRxFifo>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	e043      	b.n	8005c5c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005be6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bea:	d118      	bne.n	8005c1e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e013      	b.n	8005c30 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e008      	b.n	8005c30 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c60:	461a      	mov	r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d3b5      	bcc.n	8005bd4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	e043      	b.n	8005cf6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c84:	d118      	bne.n	8005cb8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e013      	b.n	8005cca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e008      	b.n	8005cca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d3b5      	bcc.n	8005c6e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d105      	bne.n	8005d38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f043 0210 	orr.w	r2, r3, #16
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <USB_DevInit+0x2c4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f043 0208 	orr.w	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d68:	f043 0304 	orr.w	r3, r3, #4
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d7c:	b004      	add	sp, #16
 8005d7e:	4770      	bx	lr
 8005d80:	803c3800 	.word	0x803c3800

08005d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d9e:	d901      	bls.n	8005da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e01b      	b.n	8005ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	daf2      	bge.n	8005d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	019b      	lsls	r3, r3, #6
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dc8:	d901      	bls.n	8005dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e006      	b.n	8005ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d0f0      	beq.n	8005dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e00:	d901      	bls.n	8005e06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e018      	b.n	8005e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	daf2      	bge.n	8005df4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2210      	movs	r2, #16
 8005e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e24:	d901      	bls.n	8005e2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e006      	b.n	8005e38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d0f0      	beq.n	8005e18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
 8005e9a:	e00a      	b.n	8005eb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d002      	beq.n	8005ea8 <USB_GetDevSpeed+0x32>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d102      	bne.n	8005eae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	75fb      	strb	r3, [r7, #23]
 8005eac:	e001      	b.n	8005eb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eae:	230f      	movs	r3, #15
 8005eb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d13a      	bne.n	8005f52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	68f9      	ldr	r1, [r7, #12]
 8005ef6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d155      	bne.n	8005fc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	791b      	ldrb	r3, [r3, #4]
 8005f2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	059b      	lsls	r3, r3, #22
 8005f36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e036      	b.n	8005fc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d161      	bne.n	80060b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006002:	d11f      	bne.n	8006044 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006022:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800603e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	2101      	movs	r1, #1
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006064:	4013      	ands	r3, r2
 8006066:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	2101      	movs	r1, #1
 800607a:	fa01 f303 	lsl.w	r3, r1, r3
 800607e:	b29b      	uxth	r3, r3
 8006080:	43db      	mvns	r3, r3
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006088:	4013      	ands	r3, r2
 800608a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	0159      	lsls	r1, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a6:	4619      	mov	r1, r3
 80060a8:	4b35      	ldr	r3, [pc, #212]	@ (8006180 <USB_DeactivateEndpoint+0x1b0>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	600b      	str	r3, [r1, #0]
 80060ae:	e060      	b.n	8006172 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060c6:	d11f      	bne.n	8006108 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006102:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2101      	movs	r1, #1
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	43db      	mvns	r3, r3
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006128:	4013      	ands	r3, r2
 800612a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	2101      	movs	r1, #1
 800613e:	fa01 f303 	lsl.w	r3, r1, r3
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	43db      	mvns	r3, r3
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800614c:	4013      	ands	r3, r2
 800614e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	0159      	lsls	r1, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	440b      	add	r3, r1
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	4619      	mov	r1, r3
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <USB_DeactivateEndpoint+0x1b4>)
 800616e:	4013      	ands	r3, r2
 8006170:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	ec337800 	.word	0xec337800
 8006184:	eff37800 	.word	0xeff37800

08006188 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	@ 0x28
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 817a 	bne.w	800649e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d132      	bne.n	8006218 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006210:	0cdb      	lsrs	r3, r3, #19
 8006212:	04db      	lsls	r3, r3, #19
 8006214:	6113      	str	r3, [r2, #16]
 8006216:	e092      	b.n	800633e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006232:	0cdb      	lsrs	r3, r3, #19
 8006234:	04db      	lsls	r3, r3, #19
 8006236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006252:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006256:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800625a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11a      	bne.n	8006298 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d903      	bls.n	8006276 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006294:	6113      	str	r3, [r2, #16]
 8006296:	e01b      	b.n	80062d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	440b      	add	r3, r1
 80062b0:	1e59      	subs	r1, r3, #1
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062bc:	4ba2      	ldr	r3, [pc, #648]	@ (8006548 <USB_EPStartXfer+0x3c0>)
 80062be:	400b      	ands	r3, r1
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	0148      	lsls	r0, r1, #5
 80062c4:	69f9      	ldr	r1, [r7, #28]
 80062c6:	4401      	add	r1, r0
 80062c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062cc:	4313      	orrs	r3, r2
 80062ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e6:	69b9      	ldr	r1, [r7, #24]
 80062e8:	0148      	lsls	r0, r1, #5
 80062ea:	69f9      	ldr	r1, [r7, #28]
 80062ec:	4401      	add	r1, r0
 80062ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062f2:	4313      	orrs	r3, r2
 80062f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d11f      	bne.n	800633e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006318:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800631c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800633c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d14b      	bne.n	80063dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	461a      	mov	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	791b      	ldrb	r3, [r3, #4]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d128      	bne.n	80063ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d110      	bne.n	800639a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006392:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e00f      	b.n	80063ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	e165      	b.n	80066a8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	791b      	ldrb	r3, [r3, #4]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d015      	beq.n	8006430 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 814d 	beq.w	80066a8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	2101      	movs	r1, #1
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800642a:	4313      	orrs	r3, r2
 800642c:	634b      	str	r3, [r1, #52]	@ 0x34
 800642e:	e13b      	b.n	80066a8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d110      	bne.n	8006462 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e00f      	b.n	8006482 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006480:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	68d9      	ldr	r1, [r3, #12]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	b298      	uxth	r0, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4603      	mov	r3, r0
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f9b8 	bl	800680c <USB_WritePacket>
 800649c:	e104      	b.n	80066a8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b8:	0cdb      	lsrs	r3, r3, #19
 80064ba:	04db      	lsls	r3, r3, #19
 80064bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064e0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d131      	bne.n	800654c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006516:	69b9      	ldr	r1, [r7, #24]
 8006518:	0148      	lsls	r0, r1, #5
 800651a:	69f9      	ldr	r1, [r7, #28]
 800651c:	4401      	add	r1, r0
 800651e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006522:	4313      	orrs	r3, r2
 8006524:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	440a      	add	r2, r1
 800653c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006544:	6113      	str	r3, [r2, #16]
 8006546:	e061      	b.n	800660c <USB_EPStartXfer+0x484>
 8006548:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d123      	bne.n	800659c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	0148      	lsls	r0, r1, #5
 800656e:	69f9      	ldr	r1, [r7, #28]
 8006570:	4401      	add	r1, r0
 8006572:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006594:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006598:	6113      	str	r3, [r2, #16]
 800659a:	e037      	b.n	800660c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	8afa      	ldrh	r2, [r7, #22]
 80065b8:	fb03 f202 	mul.w	r2, r3, r2
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	04d9      	lsls	r1, r3, #19
 80065d2:	4b38      	ldr	r3, [pc, #224]	@ (80066b4 <USB_EPStartXfer+0x52c>)
 80065d4:	400b      	ands	r3, r1
 80065d6:	69b9      	ldr	r1, [r7, #24]
 80065d8:	0148      	lsls	r0, r1, #5
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	4401      	add	r1, r0
 80065de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065e2:	4313      	orrs	r3, r2
 80065e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fc:	69b9      	ldr	r1, [r7, #24]
 80065fe:	0148      	lsls	r0, r1, #5
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	4401      	add	r1, r0
 8006604:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006608:	4313      	orrs	r3, r2
 800660a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10d      	bne.n	800662e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662a:	460a      	mov	r2, r1
 800662c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	791b      	ldrb	r3, [r3, #4]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d128      	bne.n	8006688 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d110      	bne.n	8006668 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006660:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e00f      	b.n	8006688 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	1ff80000 	.word	0x1ff80000

080066b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d14a      	bne.n	800676c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ee:	f040 8086 	bne.w	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006710:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006714:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006746:	4293      	cmp	r3, r2
 8006748:	d902      	bls.n	8006750 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
          break;
 800674e:	e056      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006768:	d0e7      	beq.n	800673a <USB_EPStopXfer+0x82>
 800676a:	e048      	b.n	80067fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006784:	d13b      	bne.n	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067da:	4293      	cmp	r3, r2
 80067dc:	d902      	bls.n	80067e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
          break;
 80067e2:	e00c      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067fc:	d0e7      	beq.n	80067ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	@ 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4611      	mov	r1, r2
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	4613      	mov	r3, r2
 8006820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800682a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d123      	bne.n	800687a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	3303      	adds	r3, #3
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e018      	b.n	8006872 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	031a      	lsls	r2, r3, #12
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	461a      	mov	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	3301      	adds	r3, #1
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d3e2      	bcc.n	8006840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3724      	adds	r7, #36	@ 0x24
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006888:	b480      	push	{r7}
 800688a:	b08b      	sub	sp, #44	@ 0x2c
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ae:	2300      	movs	r3, #0
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	e014      	b.n	80068de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	601a      	str	r2, [r3, #0]
    pDest++;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	3301      	adds	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	3301      	adds	r3, #1
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3e6      	bcc.n	80068b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01e      	beq.n	800692a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f6:	461a      	mov	r2, r3
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	701a      	strb	r2, [r3, #0]
      i++;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	3301      	adds	r3, #1
 8006916:	623b      	str	r3, [r7, #32]
      pDest++;
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	3301      	adds	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800691e:	8bfb      	ldrh	r3, [r7, #30]
 8006920:	3b01      	subs	r3, #1
 8006922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006924:	8bfb      	ldrh	r3, [r7, #30]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ea      	bne.n	8006900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800692c:	4618      	mov	r0, r3
 800692e:	372c      	adds	r7, #44	@ 0x2c
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d12c      	bne.n	80069ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db12      	blt.n	800698c <USB_EPSetStall+0x54>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00f      	beq.n	800698c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006986:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e02b      	b.n	8006a06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	db12      	blt.n	80069e6 <USB_EPSetStall+0xae>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d128      	bne.n	8006a82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d003      	beq.n	8006a60 <USB_EPClearStall+0x4c>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d138      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e027      	b.n	8006ad2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d003      	beq.n	8006ab2 <USB_EPClearStall+0x9e>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d10f      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006afe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b5a:	f023 0302 	bic.w	r3, r3, #2
 8006b5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	b29b      	uxth	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	460b      	mov	r3, r1
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	333c      	adds	r3, #60	@ 0x3c
 8006d4e:	3304      	adds	r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4a26      	ldr	r2, [pc, #152]	@ (8006df0 <USB_EP0_OutStart+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d90a      	bls.n	8006d72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d6c:	d101      	bne.n	8006d72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e037      	b.n	8006de2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da0:	f043 0318 	orr.w	r3, r3, #24
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006db8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10f      	bne.n	8006de0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dda:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	4f54300a 	.word	0x4f54300a

08006df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e0c:	d901      	bls.n	8006e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e01b      	b.n	8006e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	daf2      	bge.n	8006e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e36:	d901      	bls.n	8006e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d0f0      	beq.n	8006e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006e64:	2010      	movs	r0, #16
 8006e66:	f002 f911 	bl	800908c <USBD_static_malloc>
 8006e6a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	32b0      	adds	r2, #176	@ 0xb0
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e82:	2302      	movs	r3, #2
 8006e84:	e048      	b.n	8006f18 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	32b0      	adds	r2, #176	@ 0xb0
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <USBD_HID_Init+0xc8>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 020f 	and.w	r2, r3, #15
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3326      	adds	r3, #38	@ 0x26
 8006ec8:	2207      	movs	r2, #7
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e00c      	b.n	8006ee8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006ece:	4b14      	ldr	r3, [pc, #80]	@ (8006f20 <USBD_HID_Init+0xc8>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	3326      	adds	r3, #38	@ 0x26
 8006ee4:	220a      	movs	r2, #10
 8006ee6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <USBD_HID_Init+0xc8>)
 8006eea:	7819      	ldrb	r1, [r3, #0]
 8006eec:	2304      	movs	r3, #4
 8006eee:	2203      	movs	r2, #3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 ffba 	bl	8008e6a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f20 <USBD_HID_Init+0xc8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3324      	adds	r3, #36	@ 0x24
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000136 	.word	0x20000136

08006f24 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006f30:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb0 <USBD_HID_DeInit+0x8c>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 ffbd 	bl	8008eb6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb0 <USBD_HID_DeInit+0x8c>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3324      	adds	r3, #36	@ 0x24
 8006f52:	2200      	movs	r2, #0
 8006f54:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006f56:	4b16      	ldr	r3, [pc, #88]	@ (8006fb0 <USBD_HID_DeInit+0x8c>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	3326      	adds	r3, #38	@ 0x26
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32b0      	adds	r2, #176	@ 0xb0
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	32b0      	adds	r2, #176	@ 0xb0
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 f889 	bl	80090a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	32b0      	adds	r2, #176	@ 0xb0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000136 	.word	0x20000136

08006fb4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	32b0      	adds	r2, #176	@ 0xb0
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e0e8      	b.n	80071b2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d046      	beq.n	800707a <USBD_HID_Setup+0xc6>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	f040 80d8 	bne.w	80071a2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	3b02      	subs	r3, #2
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d836      	bhi.n	800706a <USBD_HID_Setup+0xb6>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <USBD_HID_Setup+0x50>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	0800705b 	.word	0x0800705b
 8007008:	0800703b 	.word	0x0800703b
 800700c:	0800706b 	.word	0x0800706b
 8007010:	0800706b 	.word	0x0800706b
 8007014:	0800706b 	.word	0x0800706b
 8007018:	0800706b 	.word	0x0800706b
 800701c:	0800706b 	.word	0x0800706b
 8007020:	0800706b 	.word	0x0800706b
 8007024:	08007049 	.word	0x08007049
 8007028:	0800702d 	.word	0x0800702d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]
          break;
 8007038:	e01e      	b.n	8007078 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fbd9 	bl	80087f8 <USBD_CtlSendData>
          break;
 8007046:	e017      	b.n	8007078 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	b29b      	uxth	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	605a      	str	r2, [r3, #4]
          break;
 8007058:	e00e      	b.n	8007078 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	2201      	movs	r2, #1
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fbc8 	bl	80087f8 <USBD_CtlSendData>
          break;
 8007068:	e006      	b.n	8007078 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fb52 	bl	8008716 <USBD_CtlError>
          ret = USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	75fb      	strb	r3, [r7, #23]
          break;
 8007076:	bf00      	nop
      }
      break;
 8007078:	e09a      	b.n	80071b0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b0b      	cmp	r3, #11
 8007080:	f200 8086 	bhi.w	8007190 <USBD_HID_Setup+0x1dc>
 8007084:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <USBD_HID_Setup+0xd8>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	080070bd 	.word	0x080070bd
 8007090:	0800719f 	.word	0x0800719f
 8007094:	08007191 	.word	0x08007191
 8007098:	08007191 	.word	0x08007191
 800709c:	08007191 	.word	0x08007191
 80070a0:	08007191 	.word	0x08007191
 80070a4:	080070e7 	.word	0x080070e7
 80070a8:	08007191 	.word	0x08007191
 80070ac:	08007191 	.word	0x08007191
 80070b0:	08007191 	.word	0x08007191
 80070b4:	0800713f 	.word	0x0800713f
 80070b8:	08007169 	.word	0x08007169
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d107      	bne.n	80070d8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070c8:	f107 030a 	add.w	r3, r7, #10
 80070cc:	2202      	movs	r2, #2
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fb91 	bl	80087f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070d6:	e063      	b.n	80071a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fb1b 	bl	8008716 <USBD_CtlError>
            ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
          break;
 80070e4:	e05c      	b.n	80071a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b22      	cmp	r3, #34	@ 0x22
 80070f0:	d108      	bne.n	8007104 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	88db      	ldrh	r3, [r3, #6]
 80070f6:	2b4a      	cmp	r3, #74	@ 0x4a
 80070f8:	bf28      	it	cs
 80070fa:	234a      	movcs	r3, #74	@ 0x4a
 80070fc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80070fe:	4b2f      	ldr	r3, [pc, #188]	@ (80071bc <USBD_HID_Setup+0x208>)
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	e015      	b.n	8007130 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	885b      	ldrh	r3, [r3, #2]
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b21      	cmp	r3, #33	@ 0x21
 800710e:	d108      	bne.n	8007122 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007110:	4b2b      	ldr	r3, [pc, #172]	@ (80071c0 <USBD_HID_Setup+0x20c>)
 8007112:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	2b09      	cmp	r3, #9
 800711a:	bf28      	it	cs
 800711c:	2309      	movcs	r3, #9
 800711e:	82bb      	strh	r3, [r7, #20]
 8007120:	e006      	b.n	8007130 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 faf6 	bl	8008716 <USBD_CtlError>
            ret = USBD_FAIL;
 800712a:	2303      	movs	r3, #3
 800712c:	75fb      	strb	r3, [r7, #23]
            break;
 800712e:	e037      	b.n	80071a0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007130:	8abb      	ldrh	r3, [r7, #20]
 8007132:	461a      	mov	r2, r3
 8007134:	6939      	ldr	r1, [r7, #16]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fb5e 	bl	80087f8 <USBD_CtlSendData>
          break;
 800713c:	e030      	b.n	80071a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d107      	bne.n	800715a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3308      	adds	r3, #8
 800714e:	2201      	movs	r2, #1
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fb50 	bl	80087f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007158:	e022      	b.n	80071a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 fada 	bl	8008716 <USBD_CtlError>
            ret = USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	75fb      	strb	r3, [r7, #23]
          break;
 8007166:	e01b      	b.n	80071a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b03      	cmp	r3, #3
 8007172:	d106      	bne.n	8007182 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007180:	e00e      	b.n	80071a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fac6 	bl	8008716 <USBD_CtlError>
            ret = USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	75fb      	strb	r3, [r7, #23]
          break;
 800718e:	e007      	b.n	80071a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fabf 	bl	8008716 <USBD_CtlError>
          ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	75fb      	strb	r3, [r7, #23]
          break;
 800719c:	e000      	b.n	80071a0 <USBD_HID_Setup+0x1ec>
          break;
 800719e:	bf00      	nop
      }
      break;
 80071a0:	e006      	b.n	80071b0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fab6 	bl	8008716 <USBD_CtlError>
      ret = USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200000ec 	.word	0x200000ec
 80071c0:	200000d4 	.word	0x200000d4

080071c4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	32b0      	adds	r2, #176	@ 0xb0
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e014      	b.n	8007216 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d10d      	bne.n	8007214 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	7b1b      	ldrb	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d109      	bne.n	8007214 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2201      	movs	r2, #1
 8007204:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007206:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <USBD_HID_SendReport+0x5c>)
 8007208:	7819      	ldrb	r1, [r3, #0]
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f001 fef9 	bl	8009006 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000136 	.word	0x20000136

08007224 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800722c:	2181      	movs	r1, #129	@ 0x81
 800722e:	4809      	ldr	r0, [pc, #36]	@ (8007254 <USBD_HID_GetFSCfgDesc+0x30>)
 8007230:	f000 fc3b 	bl	8007aaa <USBD_GetEpDesc>
 8007234:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	220a      	movs	r2, #10
 8007240:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2222      	movs	r2, #34	@ 0x22
 8007246:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	@ (8007254 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200000b0 	.word	0x200000b0

08007258 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007260:	2181      	movs	r1, #129	@ 0x81
 8007262:	4809      	ldr	r0, [pc, #36]	@ (8007288 <USBD_HID_GetHSCfgDesc+0x30>)
 8007264:	f000 fc21 	bl	8007aaa <USBD_GetEpDesc>
 8007268:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2207      	movs	r2, #7
 8007274:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2222      	movs	r2, #34	@ 0x22
 800727a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200000b0 	.word	0x200000b0

0800728c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007294:	2181      	movs	r1, #129	@ 0x81
 8007296:	4809      	ldr	r0, [pc, #36]	@ (80072bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007298:	f000 fc07 	bl	8007aaa <USBD_GetEpDesc>
 800729c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	220a      	movs	r2, #10
 80072a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2222      	movs	r2, #34	@ 0x22
 80072ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80072b0:	4b02      	ldr	r3, [pc, #8]	@ (80072bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	200000b0 	.word	0x200000b0

080072c0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32b0      	adds	r2, #176	@ 0xb0
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	2200      	movs	r2, #0
 80072dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	220a      	movs	r2, #10
 80072f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	200000e0 	.word	0x200000e0

0800730c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	e01f      	b.n	8007364 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	79fa      	ldrb	r2, [r7, #7]
 8007356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f001 fd19 	bl	8008d90 <USBD_LL_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e025      	b.n	80073d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32ae      	adds	r2, #174	@ 0xae
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32ae      	adds	r2, #174	@ 0xae
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	f107 020e 	add.w	r2, r7, #14
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	4602      	mov	r2, r0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fd27 	bl	8008e34 <USBD_LL_Start>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	4611      	mov	r1, r2
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	4611      	mov	r1, r2
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007464:	2303      	movs	r3, #3
 8007466:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f90c 	bl	80086a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d01a      	beq.n	80074e4 <USBD_LL_SetupStage+0x72>
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d822      	bhi.n	80074f8 <USBD_LL_SetupStage+0x86>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <USBD_LL_SetupStage+0x4a>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d00a      	beq.n	80074d0 <USBD_LL_SetupStage+0x5e>
 80074ba:	e01d      	b.n	80074f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fb63 	bl	8007b90 <USBD_StdDevReq>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]
      break;
 80074ce:	e020      	b.n	8007512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fbcb 	bl	8007c74 <USBD_StdItfReq>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	e016      	b.n	8007512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc2d 	bl	8007d4c <USBD_StdEPReq>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
      break;
 80074f6:	e00c      	b.n	8007512 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fcf4 	bl	8008ef4 <USBD_LL_StallEP>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
      break;
 8007510:	bf00      	nop
  }

  return ret;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	460b      	mov	r3, r1
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d16e      	bne.n	8007612 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800753a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007542:	2b03      	cmp	r3, #3
 8007544:	f040 8098 	bne.w	8007678 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d913      	bls.n	800757c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	1ad2      	subs	r2, r2, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4293      	cmp	r3, r2
 800756c:	bf28      	it	cs
 800756e:	4613      	movcs	r3, r2
 8007570:	461a      	mov	r2, r3
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f001 f96b 	bl	8008850 <USBD_CtlContinueRx>
 800757a:	e07d      	b.n	8007678 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2b02      	cmp	r3, #2
 8007588:	d014      	beq.n	80075b4 <USBD_LL_DataOutStage+0x98>
 800758a:	2b02      	cmp	r3, #2
 800758c:	d81d      	bhi.n	80075ca <USBD_LL_DataOutStage+0xae>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <USBD_LL_DataOutStage+0x7c>
 8007592:	2b01      	cmp	r3, #1
 8007594:	d003      	beq.n	800759e <USBD_LL_DataOutStage+0x82>
 8007596:	e018      	b.n	80075ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	75bb      	strb	r3, [r7, #22]
            break;
 800759c:	e018      	b.n	80075d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fa64 	bl	8007a76 <USBD_CoreFindIF>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75bb      	strb	r3, [r7, #22]
            break;
 80075b2:	e00d      	b.n	80075d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	4619      	mov	r1, r3
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fa66 	bl	8007a90 <USBD_CoreFindEP>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75bb      	strb	r3, [r7, #22]
            break;
 80075c8:	e002      	b.n	80075d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75bb      	strb	r3, [r7, #22]
            break;
 80075ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075d0:	7dbb      	ldrb	r3, [r7, #22]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d119      	bne.n	800760a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d113      	bne.n	800760a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075e2:	7dba      	ldrb	r2, [r7, #22]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	32ae      	adds	r2, #174	@ 0xae
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075f2:	7dba      	ldrb	r2, [r7, #22]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075fa:	7dba      	ldrb	r2, [r7, #22]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	32ae      	adds	r2, #174	@ 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 f931 	bl	8008872 <USBD_CtlSendStatus>
 8007610:	e032      	b.n	8007678 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fa37 	bl	8007a90 <USBD_CoreFindEP>
 8007622:	4603      	mov	r3, r0
 8007624:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007626:	7dbb      	ldrb	r3, [r7, #22]
 8007628:	2bff      	cmp	r3, #255	@ 0xff
 800762a:	d025      	beq.n	8007678 <USBD_LL_DataOutStage+0x15c>
 800762c:	7dbb      	ldrb	r3, [r7, #22]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d122      	bne.n	8007678 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d117      	bne.n	800766e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800763e:	7dba      	ldrb	r2, [r7, #22]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	32ae      	adds	r2, #174	@ 0xae
 8007644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800764e:	7dba      	ldrb	r2, [r7, #22]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007656:	7dba      	ldrb	r2, [r7, #22]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	32ae      	adds	r2, #174	@ 0xae
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	7afa      	ldrb	r2, [r7, #11]
 8007664:	4611      	mov	r1, r2
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	4798      	blx	r3
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	e000      	b.n	800767a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	460b      	mov	r3, r1
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d16f      	bne.n	8007776 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3314      	adds	r3, #20
 800769a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d15a      	bne.n	800775c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d914      	bls.n	80076dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 f8b0 	bl	800882e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076ce:	2300      	movs	r3, #0
 80076d0:	2200      	movs	r2, #0
 80076d2:	2100      	movs	r1, #0
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 fcb7 	bl	8009048 <USBD_LL_PrepareReceive>
 80076da:	e03f      	b.n	800775c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d11c      	bne.n	8007722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d316      	bcc.n	8007722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076fe:	429a      	cmp	r2, r3
 8007700:	d20f      	bcs.n	8007722 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 f891 	bl	800882e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 fc94 	bl	8009048 <USBD_LL_PrepareReceive>
 8007720:	e01c      	b.n	800775c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b03      	cmp	r3, #3
 800772c:	d10f      	bne.n	800774e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800774e:	2180      	movs	r1, #128	@ 0x80
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f001 fbcf 	bl	8008ef4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f001 f89e 	bl	8008898 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d03a      	beq.n	80077dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fe42 	bl	80073f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007774:	e032      	b.n	80077dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800777c:	b2db      	uxtb	r3, r3
 800777e:	4619      	mov	r1, r3
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f985 	bl	8007a90 <USBD_CoreFindEP>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2bff      	cmp	r3, #255	@ 0xff
 800778e:	d025      	beq.n	80077dc <USBD_LL_DataInStage+0x15a>
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d122      	bne.n	80077dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d11c      	bne.n	80077dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077a2:	7dfa      	ldrb	r2, [r7, #23]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	32ae      	adds	r2, #174	@ 0xae
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d014      	beq.n	80077dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077b2:	7dfa      	ldrb	r2, [r7, #23]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077ba:	7dfa      	ldrb	r2, [r7, #23]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	32ae      	adds	r2, #174	@ 0xae
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	7afa      	ldrb	r2, [r7, #11]
 80077c8:	4611      	mov	r1, r2
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	4798      	blx	r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077d8:	7dbb      	ldrb	r3, [r7, #22]
 80077da:	e000      	b.n	80077de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d014      	beq.n	800784c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00e      	beq.n	800784c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6852      	ldr	r2, [r2, #4]
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	4611      	mov	r1, r2
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800784c:	2340      	movs	r3, #64	@ 0x40
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 fb09 	bl	8008e6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2240      	movs	r2, #64	@ 0x40
 8007864:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007868:	2340      	movs	r3, #64	@ 0x40
 800786a:	2200      	movs	r2, #0
 800786c:	2180      	movs	r1, #128	@ 0x80
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fafb 	bl	8008e6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2240      	movs	r2, #64	@ 0x40
 800787e:	621a      	str	r2, [r3, #32]

  return ret;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d006      	beq.n	80078cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2204      	movs	r2, #4
 80078d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d106      	bne.n	8007904 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d110      	bne.n	8007948 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	32ae      	adds	r2, #174	@ 0xae
 8007968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	e01c      	b.n	80079ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b03      	cmp	r3, #3
 800797e:	d115      	bne.n	80079ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	@ 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	@ 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	4611      	mov	r1, r2
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	32ae      	adds	r2, #174	@ 0xae
 80079cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e01c      	b.n	8007a12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d115      	bne.n	8007a10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	@ 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32ae      	adds	r2, #174	@ 0xae
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6852      	ldr	r2, [r2, #4]
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	885b      	ldrh	r3, [r3, #2]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	7812      	ldrb	r2, [r2, #0]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d91f      	bls.n	8007b10 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ad6:	e013      	b.n	8007b00 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ad8:	f107 030a 	add.w	r3, r7, #10
 8007adc:	4619      	mov	r1, r3
 8007ade:	6978      	ldr	r0, [r7, #20]
 8007ae0:	f000 f81b 	bl	8007b1a <USBD_GetNextDesc>
 8007ae4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d108      	bne.n	8007b00 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d008      	beq.n	8007b0e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	897b      	ldrh	r3, [r7, #10]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d8e5      	bhi.n	8007ad8 <USBD_GetEpDesc+0x2e>
 8007b0c:	e000      	b.n	8007b10 <USBD_GetEpDesc+0x66>
          break;
 8007b0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b10:	693b      	ldr	r3, [r7, #16]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	4413      	add	r3, r2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	3301      	adds	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b70:	8a3b      	ldrh	r3, [r7, #16]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	b21a      	sxth	r2, r3
 8007b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b80:	89fb      	ldrh	r3, [r7, #14]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d005      	beq.n	8007bb6 <USBD_StdDevReq+0x26>
 8007baa:	2b40      	cmp	r3, #64	@ 0x40
 8007bac:	d857      	bhi.n	8007c5e <USBD_StdDevReq+0xce>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <USBD_StdDevReq+0x42>
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d153      	bne.n	8007c5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	32ae      	adds	r2, #174	@ 0xae
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd0:	e04a      	b.n	8007c68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b09      	cmp	r3, #9
 8007bd8:	d83b      	bhi.n	8007c52 <USBD_StdDevReq+0xc2>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <USBD_StdDevReq+0x50>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c35 	.word	0x08007c35
 8007be4:	08007c49 	.word	0x08007c49
 8007be8:	08007c53 	.word	0x08007c53
 8007bec:	08007c3f 	.word	0x08007c3f
 8007bf0:	08007c53 	.word	0x08007c53
 8007bf4:	08007c13 	.word	0x08007c13
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c53 	.word	0x08007c53
 8007c00:	08007c2b 	.word	0x08007c2b
 8007c04:	08007c1d 	.word	0x08007c1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa3c 	bl	8008088 <USBD_GetDescriptor>
          break;
 8007c10:	e024      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fba1 	bl	800835c <USBD_SetAddress>
          break;
 8007c1a:	e01f      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbe0 	bl	80083e4 <USBD_SetConfig>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
          break;
 8007c28:	e018      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fc83 	bl	8008538 <USBD_GetConfig>
          break;
 8007c32:	e013      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fcb4 	bl	80085a4 <USBD_GetStatus>
          break;
 8007c3c:	e00e      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fce3 	bl	800860c <USBD_SetFeature>
          break;
 8007c46:	e009      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fd07 	bl	800865e <USBD_ClrFeature>
          break;
 8007c50:	e004      	b.n	8007c5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fd5e 	bl	8008716 <USBD_CtlError>
          break;
 8007c5a:	bf00      	nop
      }
      break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fd58 	bl	8008716 <USBD_CtlError>
      break;
 8007c66:	bf00      	nop
  }

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop

08007c74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d005      	beq.n	8007c9a <USBD_StdItfReq+0x26>
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	d852      	bhi.n	8007d38 <USBD_StdItfReq+0xc4>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <USBD_StdItfReq+0x26>
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d14e      	bne.n	8007d38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d840      	bhi.n	8007d2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	889b      	ldrh	r3, [r3, #4]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d836      	bhi.n	8007d20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	889b      	ldrh	r3, [r3, #4]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7ff fedb 	bl	8007a76 <USBD_CoreFindIF>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2bff      	cmp	r3, #255	@ 0xff
 8007cc8:	d01d      	beq.n	8007d06 <USBD_StdItfReq+0x92>
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11a      	bne.n	8007d06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007cd0:	7bba      	ldrb	r2, [r7, #14]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	32ae      	adds	r2, #174	@ 0xae
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00f      	beq.n	8007d00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ce0:	7bba      	ldrb	r2, [r7, #14]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ce8:	7bba      	ldrb	r2, [r7, #14]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32ae      	adds	r2, #174	@ 0xae
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cfe:	e004      	b.n	8007d0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d00:	2303      	movs	r3, #3
 8007d02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d04:	e001      	b.n	8007d0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88db      	ldrh	r3, [r3, #6]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d110      	bne.n	8007d34 <USBD_StdItfReq+0xc0>
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10d      	bne.n	8007d34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fdaa 	bl	8008872 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d1e:	e009      	b.n	8007d34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fcf7 	bl	8008716 <USBD_CtlError>
          break;
 8007d28:	e004      	b.n	8007d34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcf2 	bl	8008716 <USBD_CtlError>
          break;
 8007d32:	e000      	b.n	8007d36 <USBD_StdItfReq+0xc2>
          break;
 8007d34:	bf00      	nop
      }
      break;
 8007d36:	e004      	b.n	8007d42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fceb 	bl	8008716 <USBD_CtlError>
      break;
 8007d40:	bf00      	nop
  }

  return ret;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	d007      	beq.n	8007d7c <USBD_StdEPReq+0x30>
 8007d6c:	2b40      	cmp	r3, #64	@ 0x40
 8007d6e:	f200 817f 	bhi.w	8008070 <USBD_StdEPReq+0x324>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d02a      	beq.n	8007dcc <USBD_StdEPReq+0x80>
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	f040 817a 	bne.w	8008070 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fe85 	bl	8007a90 <USBD_CoreFindEP>
 8007d86:	4603      	mov	r3, r0
 8007d88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d8a:	7b7b      	ldrb	r3, [r7, #13]
 8007d8c:	2bff      	cmp	r3, #255	@ 0xff
 8007d8e:	f000 8174 	beq.w	800807a <USBD_StdEPReq+0x32e>
 8007d92:	7b7b      	ldrb	r3, [r7, #13]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 8170 	bne.w	800807a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d9a:	7b7a      	ldrb	r2, [r7, #13]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007da2:	7b7a      	ldrb	r2, [r7, #13]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32ae      	adds	r2, #174	@ 0xae
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8163 	beq.w	800807a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007db4:	7b7a      	ldrb	r2, [r7, #13]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32ae      	adds	r2, #174	@ 0xae
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dca:	e156      	b.n	800807a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d008      	beq.n	8007de6 <USBD_StdEPReq+0x9a>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	f300 8145 	bgt.w	8008064 <USBD_StdEPReq+0x318>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 809b 	beq.w	8007f16 <USBD_StdEPReq+0x1ca>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d03c      	beq.n	8007e5e <USBD_StdEPReq+0x112>
 8007de4:	e13e      	b.n	8008064 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d002      	beq.n	8007df8 <USBD_StdEPReq+0xac>
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d016      	beq.n	8007e24 <USBD_StdEPReq+0xd8>
 8007df6:	e02c      	b.n	8007e52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00d      	beq.n	8007e1a <USBD_StdEPReq+0xce>
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b80      	cmp	r3, #128	@ 0x80
 8007e02:	d00a      	beq.n	8007e1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 f873 	bl	8008ef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e0e:	2180      	movs	r1, #128	@ 0x80
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f86f 	bl	8008ef4 <USBD_LL_StallEP>
 8007e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e18:	e020      	b.n	8007e5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc7a 	bl	8008716 <USBD_CtlError>
              break;
 8007e22:	e01b      	b.n	8007e5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	885b      	ldrh	r3, [r3, #2]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10e      	bne.n	8007e4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <USBD_StdEPReq+0xfe>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b80      	cmp	r3, #128	@ 0x80
 8007e36:	d008      	beq.n	8007e4a <USBD_StdEPReq+0xfe>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	88db      	ldrh	r3, [r3, #6]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d104      	bne.n	8007e4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f855 	bl	8008ef4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fd11 	bl	8008872 <USBD_CtlSendStatus>

              break;
 8007e50:	e004      	b.n	8007e5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fc5e 	bl	8008716 <USBD_CtlError>
              break;
 8007e5a:	bf00      	nop
          }
          break;
 8007e5c:	e107      	b.n	800806e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d002      	beq.n	8007e70 <USBD_StdEPReq+0x124>
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d016      	beq.n	8007e9c <USBD_StdEPReq+0x150>
 8007e6e:	e04b      	b.n	8007f08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <USBD_StdEPReq+0x146>
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b80      	cmp	r3, #128	@ 0x80
 8007e7a:	d00a      	beq.n	8007e92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 f837 	bl	8008ef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e86:	2180      	movs	r1, #128	@ 0x80
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 f833 	bl	8008ef4 <USBD_LL_StallEP>
 8007e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e90:	e040      	b.n	8007f14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fc3e 	bl	8008716 <USBD_CtlError>
              break;
 8007e9a:	e03b      	b.n	8007f14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	885b      	ldrh	r3, [r3, #2]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d136      	bne.n	8007f12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f83d 	bl	8008f32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fcda 	bl	8008872 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff fde4 	bl	8007a90 <USBD_CoreFindEP>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ecc:	7b7b      	ldrb	r3, [r7, #13]
 8007ece:	2bff      	cmp	r3, #255	@ 0xff
 8007ed0:	d01f      	beq.n	8007f12 <USBD_StdEPReq+0x1c6>
 8007ed2:	7b7b      	ldrb	r3, [r7, #13]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11c      	bne.n	8007f12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ed8:	7b7a      	ldrb	r2, [r7, #13]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ee0:	7b7a      	ldrb	r2, [r7, #13]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32ae      	adds	r2, #174	@ 0xae
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d010      	beq.n	8007f12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ef0:	7b7a      	ldrb	r2, [r7, #13]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	32ae      	adds	r2, #174	@ 0xae
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f06:	e004      	b.n	8007f12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fc03 	bl	8008716 <USBD_CtlError>
              break;
 8007f10:	e000      	b.n	8007f14 <USBD_StdEPReq+0x1c8>
              break;
 8007f12:	bf00      	nop
          }
          break;
 8007f14:	e0ab      	b.n	800806e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d002      	beq.n	8007f28 <USBD_StdEPReq+0x1dc>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d032      	beq.n	8007f8c <USBD_StdEPReq+0x240>
 8007f26:	e097      	b.n	8008058 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <USBD_StdEPReq+0x1f2>
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b80      	cmp	r3, #128	@ 0x80
 8007f32:	d004      	beq.n	8007f3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fbed 	bl	8008716 <USBD_CtlError>
                break;
 8007f3c:	e091      	b.n	8008062 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da0b      	bge.n	8007f5e <USBD_StdEPReq+0x212>
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	3310      	adds	r3, #16
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	e00b      	b.n	8007f76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2202      	movs	r2, #2
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fc37 	bl	80087f8 <USBD_CtlSendData>
              break;
 8007f8a:	e06a      	b.n	8008062 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da11      	bge.n	8007fb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	f003 020f 	and.w	r2, r3, #15
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3324      	adds	r3, #36	@ 0x24
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d117      	bne.n	8007fde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fbb0 	bl	8008716 <USBD_CtlError>
                  break;
 8007fb6:	e054      	b.n	8008062 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	f003 020f 	and.w	r2, r3, #15
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb9d 	bl	8008716 <USBD_CtlError>
                  break;
 8007fdc:	e041      	b.n	8008062 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da0b      	bge.n	8007ffe <USBD_StdEPReq+0x2b2>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	3310      	adds	r3, #16
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	e00b      	b.n	8008016 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	3304      	adds	r3, #4
 8008016:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <USBD_StdEPReq+0x2d8>
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b80      	cmp	r3, #128	@ 0x80
 8008022:	d103      	bne.n	800802c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e00e      	b.n	800804a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 ff9d 	bl	8008f70 <USBD_LL_IsStallEP>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e002      	b.n	800804a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2202      	movs	r2, #2
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fbd1 	bl	80087f8 <USBD_CtlSendData>
              break;
 8008056:	e004      	b.n	8008062 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fb5b 	bl	8008716 <USBD_CtlError>
              break;
 8008060:	bf00      	nop
          }
          break;
 8008062:	e004      	b.n	800806e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb55 	bl	8008716 <USBD_CtlError>
          break;
 800806c:	bf00      	nop
      }
      break;
 800806e:	e005      	b.n	800807c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fb4f 	bl	8008716 <USBD_CtlError>
      break;
 8008078:	e000      	b.n	800807c <USBD_StdEPReq+0x330>
      break;
 800807a:	bf00      	nop
  }

  return ret;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b06      	cmp	r3, #6
 80080aa:	f200 8128 	bhi.w	80082fe <USBD_GetDescriptor+0x276>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <USBD_GetDescriptor+0x2c>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	08008129 	.word	0x08008129
 80080c0:	080082ff 	.word	0x080082ff
 80080c4:	080082ff 	.word	0x080082ff
 80080c8:	0800829f 	.word	0x0800829f
 80080cc:	080082cb 	.word	0x080082cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 0108 	add.w	r1, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
      break;
 80080e6:	e112      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7c1b      	ldrb	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	2202      	movs	r2, #2
 8008108:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800810a:	e100      	b.n	800830e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008114:	f107 0208 	add.w	r2, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
      break;
 8008126:	e0f2      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b05      	cmp	r3, #5
 8008130:	f200 80ac 	bhi.w	800828c <USBD_GetDescriptor+0x204>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <USBD_GetDescriptor+0xb4>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008155 	.word	0x08008155
 8008140:	08008189 	.word	0x08008189
 8008144:	080081bd 	.word	0x080081bd
 8008148:	080081f1 	.word	0x080081f1
 800814c:	08008225 	.word	0x08008225
 8008150:	08008259 	.word	0x08008259
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008176:	e091      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 facb 	bl	8008716 <USBD_CtlError>
            err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
          break;
 8008186:	e089      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081aa:	e077      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fab1 	bl	8008716 <USBD_CtlError>
            err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ba:	e06f      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081de:	e05d      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa97 	bl	8008716 <USBD_CtlError>
            err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
          break;
 80081ee:	e055      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008212:	e043      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa7d 	bl	8008716 <USBD_CtlError>
            err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
          break;
 8008222:	e03b      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	7c12      	ldrb	r2, [r2, #16]
 800823c:	f107 0108 	add.w	r1, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008246:	e029      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa63 	bl	8008716 <USBD_CtlError>
            err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
          break;
 8008256:	e021      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e00f      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa49 	bl	8008716 <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e007      	b.n	800829c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa41 	bl	8008716 <USBD_CtlError>
          err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800829a:	bf00      	nop
      }
      break;
 800829c:	e037      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7c1b      	ldrb	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	f107 0208 	add.w	r2, r7, #8
 80082b2:	4610      	mov	r0, r2
 80082b4:	4798      	blx	r3
 80082b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b8:	e029      	b.n	800830e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa2a 	bl	8008716 <USBD_CtlError>
        err++;
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	3301      	adds	r3, #1
 80082c6:	72fb      	strb	r3, [r7, #11]
      break;
 80082c8:	e021      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7c1b      	ldrb	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082da:	f107 0208 	add.w	r2, r7, #8
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
 80082e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	2207      	movs	r2, #7
 80082ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ec:	e00f      	b.n	800830e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa10 	bl	8008716 <USBD_CtlError>
        err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
      break;
 80082fc:	e007      	b.n	800830e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fa08 	bl	8008716 <USBD_CtlError>
      err++;
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	3301      	adds	r3, #1
 800830a:	72fb      	strb	r3, [r7, #11]
      break;
 800830c:	bf00      	nop
  }

  if (err != 0U)
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11e      	bne.n	8008352 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	88db      	ldrh	r3, [r3, #6]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d016      	beq.n	800834a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00e      	beq.n	8008340 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	88da      	ldrh	r2, [r3, #6]
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	4293      	cmp	r3, r2
 800832a:	bf28      	it	cs
 800832c:	4613      	movcs	r3, r2
 800832e:	b29b      	uxth	r3, r3
 8008330:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008332:	893b      	ldrh	r3, [r7, #8]
 8008334:	461a      	mov	r2, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fa5d 	bl	80087f8 <USBD_CtlSendData>
 800833e:	e009      	b.n	8008354 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9e7 	bl	8008716 <USBD_CtlError>
 8008348:	e004      	b.n	8008354 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa91 	bl	8008872 <USBD_CtlSendStatus>
 8008350:	e000      	b.n	8008354 <USBD_GetDescriptor+0x2cc>
    return;
 8008352:	bf00      	nop
  }
}
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	889b      	ldrh	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d131      	bne.n	80083d2 <USBD_SetAddress+0x76>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12d      	bne.n	80083d2 <USBD_SetAddress+0x76>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b7f      	cmp	r3, #127	@ 0x7f
 800837c:	d829      	bhi.n	80083d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	885b      	ldrh	r3, [r3, #2]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b03      	cmp	r3, #3
 8008394:	d104      	bne.n	80083a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9bc 	bl	8008716 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839e:	e01d      	b.n	80083dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7bfa      	ldrb	r2, [r7, #15]
 80083a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fe0b 	bl	8008fc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa5d 	bl	8008872 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c6:	e009      	b.n	80083dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d0:	e004      	b.n	80083dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f99e 	bl	8008716 <USBD_CtlError>
  }
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	885b      	ldrh	r3, [r3, #2]
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	4b4e      	ldr	r3, [pc, #312]	@ (8008534 <USBD_SetConfig+0x150>)
 80083fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008534 <USBD_SetConfig+0x150>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d905      	bls.n	8008410 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f985 	bl	8008716 <USBD_CtlError>
    return USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	e08c      	b.n	800852a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d002      	beq.n	8008422 <USBD_SetConfig+0x3e>
 800841c:	2b03      	cmp	r3, #3
 800841e:	d029      	beq.n	8008474 <USBD_SetConfig+0x90>
 8008420:	e075      	b.n	800850e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008422:	4b44      	ldr	r3, [pc, #272]	@ (8008534 <USBD_SetConfig+0x150>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d020      	beq.n	800846c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800842a:	4b42      	ldr	r3, [pc, #264]	@ (8008534 <USBD_SetConfig+0x150>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008434:	4b3f      	ldr	r3, [pc, #252]	@ (8008534 <USBD_SetConfig+0x150>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe ffe3 	bl	8007406 <USBD_SetClassConfig>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f962 	bl	8008716 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800845a:	e065      	b.n	8008528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa08 	bl	8008872 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2203      	movs	r2, #3
 8008466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800846a:	e05d      	b.n	8008528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa00 	bl	8008872 <USBD_CtlSendStatus>
      break;
 8008472:	e059      	b.n	8008528 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008474:	4b2f      	ldr	r3, [pc, #188]	@ (8008534 <USBD_SetConfig+0x150>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d112      	bne.n	80084a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008484:	4b2b      	ldr	r3, [pc, #172]	@ (8008534 <USBD_SetConfig+0x150>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800848e:	4b29      	ldr	r3, [pc, #164]	@ (8008534 <USBD_SetConfig+0x150>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7fe ffd2 	bl	800743e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9e9 	bl	8008872 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084a0:	e042      	b.n	8008528 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80084a2:	4b24      	ldr	r3, [pc, #144]	@ (8008534 <USBD_SetConfig+0x150>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d02a      	beq.n	8008506 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fe ffc0 	bl	800743e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084be:	4b1d      	ldr	r3, [pc, #116]	@ (8008534 <USBD_SetConfig+0x150>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <USBD_SetConfig+0x150>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fe ff99 	bl	8007406 <USBD_SetClassConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00f      	beq.n	80084fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f918 	bl	8008716 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fe ffa5 	bl	800743e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084fc:	e014      	b.n	8008528 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f9b7 	bl	8008872 <USBD_CtlSendStatus>
      break;
 8008504:	e010      	b.n	8008528 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9b3 	bl	8008872 <USBD_CtlSendStatus>
      break;
 800850c:	e00c      	b.n	8008528 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f900 	bl	8008716 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008516:	4b07      	ldr	r3, [pc, #28]	@ (8008534 <USBD_SetConfig+0x150>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fe ff8e 	bl	800743e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008522:	2303      	movs	r3, #3
 8008524:	73fb      	strb	r3, [r7, #15]
      break;
 8008526:	bf00      	nop
  }

  return ret;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000474 	.word	0x20000474

08008538 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	88db      	ldrh	r3, [r3, #6]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d004      	beq.n	8008554 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8e2 	bl	8008716 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008552:	e023      	b.n	800859c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	dc02      	bgt.n	8008566 <USBD_GetConfig+0x2e>
 8008560:	2b00      	cmp	r3, #0
 8008562:	dc03      	bgt.n	800856c <USBD_GetConfig+0x34>
 8008564:	e015      	b.n	8008592 <USBD_GetConfig+0x5a>
 8008566:	2b03      	cmp	r3, #3
 8008568:	d00b      	beq.n	8008582 <USBD_GetConfig+0x4a>
 800856a:	e012      	b.n	8008592 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3308      	adds	r3, #8
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f93c 	bl	80087f8 <USBD_CtlSendData>
        break;
 8008580:	e00c      	b.n	800859c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3304      	adds	r3, #4
 8008586:	2201      	movs	r2, #1
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f934 	bl	80087f8 <USBD_CtlSendData>
        break;
 8008590:	e004      	b.n	800859c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f8be 	bl	8008716 <USBD_CtlError>
        break;
 800859a:	bf00      	nop
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d81e      	bhi.n	80085fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	88db      	ldrh	r3, [r3, #6]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d004      	beq.n	80085ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f8a5 	bl	8008716 <USBD_CtlError>
        break;
 80085cc:	e01a      	b.n	8008604 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f043 0202 	orr.w	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	330c      	adds	r3, #12
 80085ee:	2202      	movs	r2, #2
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f900 	bl	80087f8 <USBD_CtlSendData>
      break;
 80085f8:	e004      	b.n	8008604 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f88a 	bl	8008716 <USBD_CtlError>
      break;
 8008602:	bf00      	nop
  }
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d107      	bne.n	800862e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f923 	bl	8008872 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800862c:	e013      	b.n	8008656 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d10b      	bne.n	800864e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	889b      	ldrh	r3, [r3, #4]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b29b      	uxth	r3, r3
 800863e:	b2da      	uxtb	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f913 	bl	8008872 <USBD_CtlSendStatus>
}
 800864c:	e003      	b.n	8008656 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f860 	bl	8008716 <USBD_CtlError>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800866e:	b2db      	uxtb	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	2b02      	cmp	r3, #2
 8008674:	d80b      	bhi.n	800868e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	885b      	ldrh	r3, [r3, #2]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d10c      	bne.n	8008698 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8f3 	bl	8008872 <USBD_CtlSendStatus>
      }
      break;
 800868c:	e004      	b.n	8008698 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f840 	bl	8008716 <USBD_CtlError>
      break;
 8008696:	e000      	b.n	800869a <USBD_ClrFeature+0x3c>
      break;
 8008698:	bf00      	nop
  }
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fa40 	bl	8007b52 <SWAPBYTE>
 80086d2:	4603      	mov	r3, r0
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fa33 	bl	8007b52 <SWAPBYTE>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fa26 	bl	8007b52 <SWAPBYTE>
 8008706:	4603      	mov	r3, r0
 8008708:	461a      	mov	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	80da      	strh	r2, [r3, #6]
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008720:	2180      	movs	r1, #128	@ 0x80
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fbe6 	bl	8008ef4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008728:	2100      	movs	r1, #0
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fbe2 	bl	8008ef4 <USBD_LL_StallEP>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d036      	beq.n	80087bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f000 f836 	bl	80087c4 <USBD_GetLen>
 8008758:	4603      	mov	r3, r0
 800875a:	3301      	adds	r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	4413      	add	r3, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	701a      	strb	r2, [r3, #0]
  idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	2203      	movs	r2, #3
 8008780:	701a      	strb	r2, [r3, #0]
  idx++;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3301      	adds	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008788:	e013      	b.n	80087b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	4413      	add	r3, r2
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
    idx++;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	3301      	adds	r3, #1
 80087a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	4413      	add	r3, r2
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	3301      	adds	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e7      	bne.n	800878a <USBD_GetString+0x52>
 80087ba:	e000      	b.n	80087be <USBD_GetString+0x86>
    return;
 80087bc:	bf00      	nop
  }
}
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087d4:	e005      	b.n	80087e2 <USBD_GetLen+0x1e>
  {
    len++;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	3301      	adds	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3301      	adds	r3, #1
 80087e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f5      	bne.n	80087d6 <USBD_GetLen+0x12>
  }

  return len;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2202      	movs	r2, #2
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	2100      	movs	r1, #0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fbf1 	bl	8009006 <USBD_LL_Transmit>

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fbe0 	bl	8009006 <USBD_LL_Transmit>

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fbf0 	bl	8009048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fbbc 	bl	8009006 <USBD_LL_Transmit>

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2205      	movs	r2, #5
 80088a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fbca 	bl	8009048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80088c4:	2201      	movs	r2, #1
 80088c6:	490e      	ldr	r1, [pc, #56]	@ (8008900 <MX_USB_DEVICE_Init+0x40>)
 80088c8:	480e      	ldr	r0, [pc, #56]	@ (8008904 <MX_USB_DEVICE_Init+0x44>)
 80088ca:	f7fe fd1f 	bl	800730c <USBD_Init>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088d4:	f7f8 fcdc 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 80088d8:	490b      	ldr	r1, [pc, #44]	@ (8008908 <MX_USB_DEVICE_Init+0x48>)
 80088da:	480a      	ldr	r0, [pc, #40]	@ (8008904 <MX_USB_DEVICE_Init+0x44>)
 80088dc:	f7fe fd46 	bl	800736c <USBD_RegisterClass>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088e6:	f7f8 fcd3 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80088ea:	4806      	ldr	r0, [pc, #24]	@ (8008904 <MX_USB_DEVICE_Init+0x44>)
 80088ec:	f7fe fd74 	bl	80073d8 <USBD_Start>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80088f6:	f7f8 fccb 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088fa:	bf00      	nop
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000138 	.word	0x20000138
 8008904:	20000478 	.word	0x20000478
 8008908:	20000078 	.word	0x20000078

0800890c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2212      	movs	r2, #18
 800891c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800891e:	4b03      	ldr	r3, [pc, #12]	@ (800892c <USBD_HS_DeviceDescriptor+0x20>)
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	20000154 	.word	0x20000154

08008930 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	6039      	str	r1, [r7, #0]
 800893a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2204      	movs	r2, #4
 8008940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008942:	4b03      	ldr	r3, [pc, #12]	@ (8008950 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000168 	.word	0x20000168

08008954 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d105      	bne.n	8008972 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	4907      	ldr	r1, [pc, #28]	@ (8008988 <USBD_HS_ProductStrDescriptor+0x34>)
 800896a:	4808      	ldr	r0, [pc, #32]	@ (800898c <USBD_HS_ProductStrDescriptor+0x38>)
 800896c:	f7ff fee4 	bl	8008738 <USBD_GetString>
 8008970:	e004      	b.n	800897c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4904      	ldr	r1, [pc, #16]	@ (8008988 <USBD_HS_ProductStrDescriptor+0x34>)
 8008976:	4805      	ldr	r0, [pc, #20]	@ (800898c <USBD_HS_ProductStrDescriptor+0x38>)
 8008978:	f7ff fede 	bl	8008738 <USBD_GetString>
  }
  return USBD_StrDesc;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000754 	.word	0x20000754
 800898c:	0800ba70 	.word	0x0800ba70

08008990 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	4904      	ldr	r1, [pc, #16]	@ (80089b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80089a0:	4804      	ldr	r0, [pc, #16]	@ (80089b4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80089a2:	f7ff fec9 	bl	8008738 <USBD_GetString>
  return USBD_StrDesc;
 80089a6:	4b02      	ldr	r3, [pc, #8]	@ (80089b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000754 	.word	0x20000754
 80089b4:	0800ba88 	.word	0x0800ba88

080089b8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	221a      	movs	r2, #26
 80089c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089ca:	f000 f843 	bl	8008a54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80089ce:	4b02      	ldr	r3, [pc, #8]	@ (80089d8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	2000016c 	.word	0x2000016c

080089dc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d105      	bne.n	80089fa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4907      	ldr	r1, [pc, #28]	@ (8008a10 <USBD_HS_ConfigStrDescriptor+0x34>)
 80089f2:	4808      	ldr	r0, [pc, #32]	@ (8008a14 <USBD_HS_ConfigStrDescriptor+0x38>)
 80089f4:	f7ff fea0 	bl	8008738 <USBD_GetString>
 80089f8:	e004      	b.n	8008a04 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4904      	ldr	r1, [pc, #16]	@ (8008a10 <USBD_HS_ConfigStrDescriptor+0x34>)
 80089fe:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008a00:	f7ff fe9a 	bl	8008738 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a04:	4b02      	ldr	r3, [pc, #8]	@ (8008a10 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000754 	.word	0x20000754
 8008a14:	0800ba9c 	.word	0x0800ba9c

08008a18 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	6039      	str	r1, [r7, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d105      	bne.n	8008a36 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	4907      	ldr	r1, [pc, #28]	@ (8008a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008a2e:	4808      	ldr	r0, [pc, #32]	@ (8008a50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008a30:	f7ff fe82 	bl	8008738 <USBD_GetString>
 8008a34:	e004      	b.n	8008a40 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4904      	ldr	r1, [pc, #16]	@ (8008a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008a3a:	4805      	ldr	r0, [pc, #20]	@ (8008a50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008a3c:	f7ff fe7c 	bl	8008738 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a40:	4b02      	ldr	r3, [pc, #8]	@ (8008a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000754 	.word	0x20000754
 8008a50:	0800baa8 	.word	0x0800baa8

08008a54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4413      	add	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a68:	2208      	movs	r2, #8
 8008a6a:	4906      	ldr	r1, [pc, #24]	@ (8008a84 <Get_SerialNum+0x30>)
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f80d 	bl	8008a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a72:	2204      	movs	r2, #4
 8008a74:	4904      	ldr	r1, [pc, #16]	@ (8008a88 <Get_SerialNum+0x34>)
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f808 	bl	8008a8c <IntToUnicode>
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	2000016e 	.word	0x2000016e
 8008a88:	2000017e 	.word	0x2000017e

08008a8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e027      	b.n	8008af4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	0f1b      	lsrs	r3, r3, #28
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d80b      	bhi.n	8008ac4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	0f1b      	lsrs	r3, r3, #28
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	440b      	add	r3, r1
 8008abc:	3230      	adds	r2, #48	@ 0x30
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e00a      	b.n	8008ada <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	0f1b      	lsrs	r3, r3, #28
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3237      	adds	r2, #55	@ 0x37
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4413      	add	r3, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	3301      	adds	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	7dfa      	ldrb	r2, [r7, #23]
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3d3      	bcc.n	8008aa4 <IntToUnicode+0x18>
  }
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	@ 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b14:	f107 0314 	add.w	r3, r7, #20
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	605a      	str	r2, [r3, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
 8008b20:	60da      	str	r2, [r3, #12]
 8008b22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <HAL_PCD_MspInit+0x94>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d134      	bne.n	8008b98 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b2e:	2300      	movs	r3, #0
 8008b30:	613b      	str	r3, [r7, #16]
 8008b32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b36:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b38:	f043 0302 	orr.w	r3, r3, #2
 8008b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b3e:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008b4a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b50:	2302      	movs	r3, #2
 8008b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b60:	f107 0314 	add.w	r3, r7, #20
 8008b64:	4619      	mov	r1, r3
 8008b66:	4810      	ldr	r0, [pc, #64]	@ (8008ba8 <HAL_PCD_MspInit+0x9c>)
 8008b68:	f7f9 fd3a 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b74:	4a0b      	ldr	r2, [pc, #44]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ba4 <HAL_PCD_MspInit+0x98>)
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	204d      	movs	r0, #77	@ 0x4d
 8008b8e:	f7f9 fcf0 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008b92:	204d      	movs	r0, #77	@ 0x4d
 8008b94:	f7f9 fd09 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008b98:	bf00      	nop
 8008b9a:	3728      	adds	r7, #40	@ 0x28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40040000 	.word	0x40040000
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	40020400 	.word	0x40020400

08008bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fc55 	bl	8007472 <USBD_LL_SetupStage>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f7fe fc8f 	bl	800751c <USBD_LL_DataOutStage>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3320      	adds	r3, #32
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f7fe fd28 	bl	8007682 <USBD_LL_DataInStage>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fe62 	bl	8007912 <USBD_LL_SOF>
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	79db      	ldrb	r3, [r3, #7]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e008      	b.n	8008c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	79db      	ldrb	r3, [r3, #7]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d102      	bne.n	8008c7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	e001      	b.n	8008c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c7e:	f7f8 fb07 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c88:	7bfa      	ldrb	r2, [r7, #15]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fdfc 	bl	800788a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fda4 	bl	80077e6 <USBD_LL_Reset>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fdf7 	bl	80078aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7adb      	ldrb	r3, [r3, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cdc:	4b04      	ldr	r3, [pc, #16]	@ (8008cf0 <HAL_PCD_SuspendCallback+0x48>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	4a03      	ldr	r2, [pc, #12]	@ (8008cf0 <HAL_PCD_SuspendCallback+0x48>)
 8008ce2:	f043 0306 	orr.w	r3, r3, #6
 8008ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	e000ed00 	.word	0xe000ed00

08008cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fded 	bl	80078e2 <USBD_LL_Resume>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fe45 	bl	80079b6 <USBD_LL_IsoOUTIncomplete>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fe01 	bl	8007952 <USBD_LL_IsoINIncomplete>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fe57 	bl	8007a1a <USBD_LL_DevConnected>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fe54 	bl	8007a30 <USBD_LL_DevDisconnected>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d140      	bne.n	8008e22 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008da0:	4a22      	ldr	r2, [pc, #136]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a20      	ldr	r2, [pc, #128]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008db0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008db2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e30 <USBD_LL_Init+0xa0>)
 8008db4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008db6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008db8:	2206      	movs	r2, #6
 8008dba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008dc8:	4b18      	ldr	r3, [pc, #96]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dca:	2202      	movs	r2, #2
 8008dcc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008dce:	4b17      	ldr	r3, [pc, #92]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008dd4:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008dda:	4b14      	ldr	r3, [pc, #80]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008de0:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008de6:	4b11      	ldr	r3, [pc, #68]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008dec:	4b0f      	ldr	r3, [pc, #60]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008df2:	480e      	ldr	r0, [pc, #56]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008df4:	f7f9 fec5 	bl	8002b82 <HAL_PCD_Init>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008dfe:	f7f8 fa47 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008e02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e06:	4809      	ldr	r0, [pc, #36]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008e08:	f7fb f8d7 	bl	8003fba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008e0c:	2280      	movs	r2, #128	@ 0x80
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4806      	ldr	r0, [pc, #24]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008e12:	f7fb f88b 	bl	8003f2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008e16:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	4803      	ldr	r0, [pc, #12]	@ (8008e2c <USBD_LL_Init+0x9c>)
 8008e1e:	f7fb f885 	bl	8003f2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000954 	.word	0x20000954
 8008e30:	40040000 	.word	0x40040000

08008e34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7f9 ffa8 	bl	8002da0 <HAL_PCD_Start>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f930 	bl	80090bc <USBD_Get_USB_Status>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	4608      	mov	r0, r1
 8008e74:	4611      	mov	r1, r2
 8008e76:	461a      	mov	r2, r3
 8008e78:	4603      	mov	r3, r0
 8008e7a:	70fb      	strb	r3, [r7, #3]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70bb      	strb	r3, [r7, #2]
 8008e80:	4613      	mov	r3, r2
 8008e82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e92:	78bb      	ldrb	r3, [r7, #2]
 8008e94:	883a      	ldrh	r2, [r7, #0]
 8008e96:	78f9      	ldrb	r1, [r7, #3]
 8008e98:	f7fa fc7c 	bl	8003794 <HAL_PCD_EP_Open>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f90a 	bl	80090bc <USBD_Get_USB_Status>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa fcc5 	bl	8003864 <HAL_PCD_EP_Close>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 f8eb 	bl	80090bc <USBD_Get_USB_Status>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fa fd65 	bl	80039e2 <HAL_PCD_EP_SetStall>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f8cc 	bl	80090bc <USBD_Get_USB_Status>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fa fda9 	bl	8003aa8 <HAL_PCD_EP_ClrStall>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f8ad 	bl	80090bc <USBD_Get_USB_Status>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da0b      	bge.n	8008fa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f92:	68f9      	ldr	r1, [r7, #12]
 8008f94:	4613      	mov	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	3316      	adds	r3, #22
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	e00b      	b.n	8008fbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008fba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fa fbb0 	bl	800374c <HAL_PCD_SetAddress>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f862 	bl	80090bc <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	460b      	mov	r3, r1
 8009014:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009024:	7af9      	ldrb	r1, [r7, #11]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	f7fa fca0 	bl	800396e <HAL_PCD_EP_Transmit>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f841 	bl	80090bc <USBD_Get_USB_Status>
 800903a:	4603      	mov	r3, r0
 800903c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800903e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	460b      	mov	r3, r1
 8009056:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009066:	7af9      	ldrb	r1, [r7, #11]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	f7fa fc44 	bl	80038f8 <HAL_PCD_EP_Receive>
 8009070:	4603      	mov	r3, r0
 8009072:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f820 	bl	80090bc <USBD_Get_USB_Status>
 800907c:	4603      	mov	r3, r0
 800907e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009080:	7dbb      	ldrb	r3, [r7, #22]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009094:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <USBD_static_malloc+0x18>)
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000e38 	.word	0x20000e38

080090a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d817      	bhi.n	8009100 <USBD_Get_USB_Status+0x44>
 80090d0:	a201      	add	r2, pc, #4	@ (adr r2, 80090d8 <USBD_Get_USB_Status+0x1c>)
 80090d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d6:	bf00      	nop
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	080090ef 	.word	0x080090ef
 80090e0:	080090f5 	.word	0x080090f5
 80090e4:	080090fb 	.word	0x080090fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
    break;
 80090ec:	e00b      	b.n	8009106 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ee:	2303      	movs	r3, #3
 80090f0:	73fb      	strb	r3, [r7, #15]
    break;
 80090f2:	e008      	b.n	8009106 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
    break;
 80090f8:	e005      	b.n	8009106 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090fa:	2303      	movs	r3, #3
 80090fc:	73fb      	strb	r3, [r7, #15]
    break;
 80090fe:	e002      	b.n	8009106 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	73fb      	strb	r3, [r7, #15]
    break;
 8009104:	bf00      	nop
  }
  return usb_status;
 8009106:	7bfb      	ldrb	r3, [r7, #15]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <__cvt>:
 8009114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	ec57 6b10 	vmov	r6, r7, d0
 800911c:	2f00      	cmp	r7, #0
 800911e:	460c      	mov	r4, r1
 8009120:	4619      	mov	r1, r3
 8009122:	463b      	mov	r3, r7
 8009124:	bfbb      	ittet	lt
 8009126:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800912a:	461f      	movlt	r7, r3
 800912c:	2300      	movge	r3, #0
 800912e:	232d      	movlt	r3, #45	@ 0x2d
 8009130:	700b      	strb	r3, [r1, #0]
 8009132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009134:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009138:	4691      	mov	r9, r2
 800913a:	f023 0820 	bic.w	r8, r3, #32
 800913e:	bfbc      	itt	lt
 8009140:	4632      	movlt	r2, r6
 8009142:	4616      	movlt	r6, r2
 8009144:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009148:	d005      	beq.n	8009156 <__cvt+0x42>
 800914a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800914e:	d100      	bne.n	8009152 <__cvt+0x3e>
 8009150:	3401      	adds	r4, #1
 8009152:	2102      	movs	r1, #2
 8009154:	e000      	b.n	8009158 <__cvt+0x44>
 8009156:	2103      	movs	r1, #3
 8009158:	ab03      	add	r3, sp, #12
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	ab02      	add	r3, sp, #8
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	ec47 6b10 	vmov	d0, r6, r7
 8009164:	4653      	mov	r3, sl
 8009166:	4622      	mov	r2, r4
 8009168:	f000 fe4e 	bl	8009e08 <_dtoa_r>
 800916c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009170:	4605      	mov	r5, r0
 8009172:	d119      	bne.n	80091a8 <__cvt+0x94>
 8009174:	f019 0f01 	tst.w	r9, #1
 8009178:	d00e      	beq.n	8009198 <__cvt+0x84>
 800917a:	eb00 0904 	add.w	r9, r0, r4
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	f7f7 fcaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800918a:	b108      	cbz	r0, 8009190 <__cvt+0x7c>
 800918c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009190:	2230      	movs	r2, #48	@ 0x30
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	454b      	cmp	r3, r9
 8009196:	d31e      	bcc.n	80091d6 <__cvt+0xc2>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800919c:	1b5b      	subs	r3, r3, r5
 800919e:	4628      	mov	r0, r5
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	b004      	add	sp, #16
 80091a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091ac:	eb00 0904 	add.w	r9, r0, r4
 80091b0:	d1e5      	bne.n	800917e <__cvt+0x6a>
 80091b2:	7803      	ldrb	r3, [r0, #0]
 80091b4:	2b30      	cmp	r3, #48	@ 0x30
 80091b6:	d10a      	bne.n	80091ce <__cvt+0xba>
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f7f7 fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 80091c4:	b918      	cbnz	r0, 80091ce <__cvt+0xba>
 80091c6:	f1c4 0401 	rsb	r4, r4, #1
 80091ca:	f8ca 4000 	str.w	r4, [sl]
 80091ce:	f8da 3000 	ldr.w	r3, [sl]
 80091d2:	4499      	add	r9, r3
 80091d4:	e7d3      	b.n	800917e <__cvt+0x6a>
 80091d6:	1c59      	adds	r1, r3, #1
 80091d8:	9103      	str	r1, [sp, #12]
 80091da:	701a      	strb	r2, [r3, #0]
 80091dc:	e7d9      	b.n	8009192 <__cvt+0x7e>

080091de <__exponent>:
 80091de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e0:	2900      	cmp	r1, #0
 80091e2:	bfba      	itte	lt
 80091e4:	4249      	neglt	r1, r1
 80091e6:	232d      	movlt	r3, #45	@ 0x2d
 80091e8:	232b      	movge	r3, #43	@ 0x2b
 80091ea:	2909      	cmp	r1, #9
 80091ec:	7002      	strb	r2, [r0, #0]
 80091ee:	7043      	strb	r3, [r0, #1]
 80091f0:	dd29      	ble.n	8009246 <__exponent+0x68>
 80091f2:	f10d 0307 	add.w	r3, sp, #7
 80091f6:	461d      	mov	r5, r3
 80091f8:	270a      	movs	r7, #10
 80091fa:	461a      	mov	r2, r3
 80091fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009200:	fb07 1416 	mls	r4, r7, r6, r1
 8009204:	3430      	adds	r4, #48	@ 0x30
 8009206:	f802 4c01 	strb.w	r4, [r2, #-1]
 800920a:	460c      	mov	r4, r1
 800920c:	2c63      	cmp	r4, #99	@ 0x63
 800920e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009212:	4631      	mov	r1, r6
 8009214:	dcf1      	bgt.n	80091fa <__exponent+0x1c>
 8009216:	3130      	adds	r1, #48	@ 0x30
 8009218:	1e94      	subs	r4, r2, #2
 800921a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800921e:	1c41      	adds	r1, r0, #1
 8009220:	4623      	mov	r3, r4
 8009222:	42ab      	cmp	r3, r5
 8009224:	d30a      	bcc.n	800923c <__exponent+0x5e>
 8009226:	f10d 0309 	add.w	r3, sp, #9
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	42ac      	cmp	r4, r5
 800922e:	bf88      	it	hi
 8009230:	2300      	movhi	r3, #0
 8009232:	3302      	adds	r3, #2
 8009234:	4403      	add	r3, r0
 8009236:	1a18      	subs	r0, r3, r0
 8009238:	b003      	add	sp, #12
 800923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009240:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009244:	e7ed      	b.n	8009222 <__exponent+0x44>
 8009246:	2330      	movs	r3, #48	@ 0x30
 8009248:	3130      	adds	r1, #48	@ 0x30
 800924a:	7083      	strb	r3, [r0, #2]
 800924c:	70c1      	strb	r1, [r0, #3]
 800924e:	1d03      	adds	r3, r0, #4
 8009250:	e7f1      	b.n	8009236 <__exponent+0x58>
	...

08009254 <_printf_float>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	b08d      	sub	sp, #52	@ 0x34
 800925a:	460c      	mov	r4, r1
 800925c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009260:	4616      	mov	r6, r2
 8009262:	461f      	mov	r7, r3
 8009264:	4605      	mov	r5, r0
 8009266:	f000 fccd 	bl	8009c04 <_localeconv_r>
 800926a:	6803      	ldr	r3, [r0, #0]
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	4618      	mov	r0, r3
 8009270:	f7f7 f80e 	bl	8000290 <strlen>
 8009274:	2300      	movs	r3, #0
 8009276:	930a      	str	r3, [sp, #40]	@ 0x28
 8009278:	f8d8 3000 	ldr.w	r3, [r8]
 800927c:	9005      	str	r0, [sp, #20]
 800927e:	3307      	adds	r3, #7
 8009280:	f023 0307 	bic.w	r3, r3, #7
 8009284:	f103 0208 	add.w	r2, r3, #8
 8009288:	f894 a018 	ldrb.w	sl, [r4, #24]
 800928c:	f8d4 b000 	ldr.w	fp, [r4]
 8009290:	f8c8 2000 	str.w	r2, [r8]
 8009294:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009298:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800929c:	9307      	str	r3, [sp, #28]
 800929e:	f8cd 8018 	str.w	r8, [sp, #24]
 80092a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092aa:	4b9c      	ldr	r3, [pc, #624]	@ (800951c <_printf_float+0x2c8>)
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	f7f7 fc4c 	bl	8000b4c <__aeabi_dcmpun>
 80092b4:	bb70      	cbnz	r0, 8009314 <_printf_float+0xc0>
 80092b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ba:	4b98      	ldr	r3, [pc, #608]	@ (800951c <_printf_float+0x2c8>)
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	f7f7 fc26 	bl	8000b10 <__aeabi_dcmple>
 80092c4:	bb30      	cbnz	r0, 8009314 <_printf_float+0xc0>
 80092c6:	2200      	movs	r2, #0
 80092c8:	2300      	movs	r3, #0
 80092ca:	4640      	mov	r0, r8
 80092cc:	4649      	mov	r1, r9
 80092ce:	f7f7 fc15 	bl	8000afc <__aeabi_dcmplt>
 80092d2:	b110      	cbz	r0, 80092da <_printf_float+0x86>
 80092d4:	232d      	movs	r3, #45	@ 0x2d
 80092d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092da:	4a91      	ldr	r2, [pc, #580]	@ (8009520 <_printf_float+0x2cc>)
 80092dc:	4b91      	ldr	r3, [pc, #580]	@ (8009524 <_printf_float+0x2d0>)
 80092de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092e2:	bf94      	ite	ls
 80092e4:	4690      	movls	r8, r2
 80092e6:	4698      	movhi	r8, r3
 80092e8:	2303      	movs	r3, #3
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	f02b 0304 	bic.w	r3, fp, #4
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	f04f 0900 	mov.w	r9, #0
 80092f6:	9700      	str	r7, [sp, #0]
 80092f8:	4633      	mov	r3, r6
 80092fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f9d2 	bl	80096a8 <_printf_common>
 8009304:	3001      	adds	r0, #1
 8009306:	f040 808d 	bne.w	8009424 <_printf_float+0x1d0>
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	b00d      	add	sp, #52	@ 0x34
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	4642      	mov	r2, r8
 8009316:	464b      	mov	r3, r9
 8009318:	4640      	mov	r0, r8
 800931a:	4649      	mov	r1, r9
 800931c:	f7f7 fc16 	bl	8000b4c <__aeabi_dcmpun>
 8009320:	b140      	cbz	r0, 8009334 <_printf_float+0xe0>
 8009322:	464b      	mov	r3, r9
 8009324:	2b00      	cmp	r3, #0
 8009326:	bfbc      	itt	lt
 8009328:	232d      	movlt	r3, #45	@ 0x2d
 800932a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800932e:	4a7e      	ldr	r2, [pc, #504]	@ (8009528 <_printf_float+0x2d4>)
 8009330:	4b7e      	ldr	r3, [pc, #504]	@ (800952c <_printf_float+0x2d8>)
 8009332:	e7d4      	b.n	80092de <_printf_float+0x8a>
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800933a:	9206      	str	r2, [sp, #24]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	d13b      	bne.n	80093b8 <_printf_float+0x164>
 8009340:	2306      	movs	r3, #6
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009348:	2300      	movs	r3, #0
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009350:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009354:	ab09      	add	r3, sp, #36	@ 0x24
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	6861      	ldr	r1, [r4, #4]
 800935a:	ec49 8b10 	vmov	d0, r8, r9
 800935e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009362:	4628      	mov	r0, r5
 8009364:	f7ff fed6 	bl	8009114 <__cvt>
 8009368:	9b06      	ldr	r3, [sp, #24]
 800936a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800936c:	2b47      	cmp	r3, #71	@ 0x47
 800936e:	4680      	mov	r8, r0
 8009370:	d129      	bne.n	80093c6 <_printf_float+0x172>
 8009372:	1cc8      	adds	r0, r1, #3
 8009374:	db02      	blt.n	800937c <_printf_float+0x128>
 8009376:	6863      	ldr	r3, [r4, #4]
 8009378:	4299      	cmp	r1, r3
 800937a:	dd41      	ble.n	8009400 <_printf_float+0x1ac>
 800937c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009380:	fa5f fa8a 	uxtb.w	sl, sl
 8009384:	3901      	subs	r1, #1
 8009386:	4652      	mov	r2, sl
 8009388:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800938c:	9109      	str	r1, [sp, #36]	@ 0x24
 800938e:	f7ff ff26 	bl	80091de <__exponent>
 8009392:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009394:	1813      	adds	r3, r2, r0
 8009396:	2a01      	cmp	r2, #1
 8009398:	4681      	mov	r9, r0
 800939a:	6123      	str	r3, [r4, #16]
 800939c:	dc02      	bgt.n	80093a4 <_printf_float+0x150>
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	07d2      	lsls	r2, r2, #31
 80093a2:	d501      	bpl.n	80093a8 <_printf_float+0x154>
 80093a4:	3301      	adds	r3, #1
 80093a6:	6123      	str	r3, [r4, #16]
 80093a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0a2      	beq.n	80092f6 <_printf_float+0xa2>
 80093b0:	232d      	movs	r3, #45	@ 0x2d
 80093b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b6:	e79e      	b.n	80092f6 <_printf_float+0xa2>
 80093b8:	9a06      	ldr	r2, [sp, #24]
 80093ba:	2a47      	cmp	r2, #71	@ 0x47
 80093bc:	d1c2      	bne.n	8009344 <_printf_float+0xf0>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1c0      	bne.n	8009344 <_printf_float+0xf0>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7bd      	b.n	8009342 <_printf_float+0xee>
 80093c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093ca:	d9db      	bls.n	8009384 <_printf_float+0x130>
 80093cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093d0:	d118      	bne.n	8009404 <_printf_float+0x1b0>
 80093d2:	2900      	cmp	r1, #0
 80093d4:	6863      	ldr	r3, [r4, #4]
 80093d6:	dd0b      	ble.n	80093f0 <_printf_float+0x19c>
 80093d8:	6121      	str	r1, [r4, #16]
 80093da:	b913      	cbnz	r3, 80093e2 <_printf_float+0x18e>
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	07d0      	lsls	r0, r2, #31
 80093e0:	d502      	bpl.n	80093e8 <_printf_float+0x194>
 80093e2:	3301      	adds	r3, #1
 80093e4:	440b      	add	r3, r1
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	e7db      	b.n	80093a8 <_printf_float+0x154>
 80093f0:	b913      	cbnz	r3, 80093f8 <_printf_float+0x1a4>
 80093f2:	6822      	ldr	r2, [r4, #0]
 80093f4:	07d2      	lsls	r2, r2, #31
 80093f6:	d501      	bpl.n	80093fc <_printf_float+0x1a8>
 80093f8:	3302      	adds	r3, #2
 80093fa:	e7f4      	b.n	80093e6 <_printf_float+0x192>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e7f2      	b.n	80093e6 <_printf_float+0x192>
 8009400:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009406:	4299      	cmp	r1, r3
 8009408:	db05      	blt.n	8009416 <_printf_float+0x1c2>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	6121      	str	r1, [r4, #16]
 800940e:	07d8      	lsls	r0, r3, #31
 8009410:	d5ea      	bpl.n	80093e8 <_printf_float+0x194>
 8009412:	1c4b      	adds	r3, r1, #1
 8009414:	e7e7      	b.n	80093e6 <_printf_float+0x192>
 8009416:	2900      	cmp	r1, #0
 8009418:	bfd4      	ite	le
 800941a:	f1c1 0202 	rsble	r2, r1, #2
 800941e:	2201      	movgt	r2, #1
 8009420:	4413      	add	r3, r2
 8009422:	e7e0      	b.n	80093e6 <_printf_float+0x192>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	055a      	lsls	r2, r3, #21
 8009428:	d407      	bmi.n	800943a <_printf_float+0x1e6>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	4642      	mov	r2, r8
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	d12b      	bne.n	8009490 <_printf_float+0x23c>
 8009438:	e767      	b.n	800930a <_printf_float+0xb6>
 800943a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800943e:	f240 80dd 	bls.w	80095fc <_printf_float+0x3a8>
 8009442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009446:	2200      	movs	r2, #0
 8009448:	2300      	movs	r3, #0
 800944a:	f7f7 fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800944e:	2800      	cmp	r0, #0
 8009450:	d033      	beq.n	80094ba <_printf_float+0x266>
 8009452:	4a37      	ldr	r2, [pc, #220]	@ (8009530 <_printf_float+0x2dc>)
 8009454:	2301      	movs	r3, #1
 8009456:	4631      	mov	r1, r6
 8009458:	4628      	mov	r0, r5
 800945a:	47b8      	blx	r7
 800945c:	3001      	adds	r0, #1
 800945e:	f43f af54 	beq.w	800930a <_printf_float+0xb6>
 8009462:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009466:	4543      	cmp	r3, r8
 8009468:	db02      	blt.n	8009470 <_printf_float+0x21c>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	07d8      	lsls	r0, r3, #31
 800946e:	d50f      	bpl.n	8009490 <_printf_float+0x23c>
 8009470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af45 	beq.w	800930a <_printf_float+0xb6>
 8009480:	f04f 0900 	mov.w	r9, #0
 8009484:	f108 38ff 	add.w	r8, r8, #4294967295
 8009488:	f104 0a1a 	add.w	sl, r4, #26
 800948c:	45c8      	cmp	r8, r9
 800948e:	dc09      	bgt.n	80094a4 <_printf_float+0x250>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	079b      	lsls	r3, r3, #30
 8009494:	f100 8103 	bmi.w	800969e <_printf_float+0x44a>
 8009498:	68e0      	ldr	r0, [r4, #12]
 800949a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800949c:	4298      	cmp	r0, r3
 800949e:	bfb8      	it	lt
 80094a0:	4618      	movlt	r0, r3
 80094a2:	e734      	b.n	800930e <_printf_float+0xba>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4652      	mov	r2, sl
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	f43f af2b 	beq.w	800930a <_printf_float+0xb6>
 80094b4:	f109 0901 	add.w	r9, r9, #1
 80094b8:	e7e8      	b.n	800948c <_printf_float+0x238>
 80094ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dc39      	bgt.n	8009534 <_printf_float+0x2e0>
 80094c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009530 <_printf_float+0x2dc>)
 80094c2:	2301      	movs	r3, #1
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	f43f af1d 	beq.w	800930a <_printf_float+0xb6>
 80094d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094d4:	ea59 0303 	orrs.w	r3, r9, r3
 80094d8:	d102      	bne.n	80094e0 <_printf_float+0x28c>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	07d9      	lsls	r1, r3, #31
 80094de:	d5d7      	bpl.n	8009490 <_printf_float+0x23c>
 80094e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af0d 	beq.w	800930a <_printf_float+0xb6>
 80094f0:	f04f 0a00 	mov.w	sl, #0
 80094f4:	f104 0b1a 	add.w	fp, r4, #26
 80094f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fa:	425b      	negs	r3, r3
 80094fc:	4553      	cmp	r3, sl
 80094fe:	dc01      	bgt.n	8009504 <_printf_float+0x2b0>
 8009500:	464b      	mov	r3, r9
 8009502:	e793      	b.n	800942c <_printf_float+0x1d8>
 8009504:	2301      	movs	r3, #1
 8009506:	465a      	mov	r2, fp
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	f43f aefb 	beq.w	800930a <_printf_float+0xb6>
 8009514:	f10a 0a01 	add.w	sl, sl, #1
 8009518:	e7ee      	b.n	80094f8 <_printf_float+0x2a4>
 800951a:	bf00      	nop
 800951c:	7fefffff 	.word	0x7fefffff
 8009520:	0800bad0 	.word	0x0800bad0
 8009524:	0800bad4 	.word	0x0800bad4
 8009528:	0800bad8 	.word	0x0800bad8
 800952c:	0800badc 	.word	0x0800badc
 8009530:	0800bae0 	.word	0x0800bae0
 8009534:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009536:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800953a:	4553      	cmp	r3, sl
 800953c:	bfa8      	it	ge
 800953e:	4653      	movge	r3, sl
 8009540:	2b00      	cmp	r3, #0
 8009542:	4699      	mov	r9, r3
 8009544:	dc36      	bgt.n	80095b4 <_printf_float+0x360>
 8009546:	f04f 0b00 	mov.w	fp, #0
 800954a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800954e:	f104 021a 	add.w	r2, r4, #26
 8009552:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009554:	9306      	str	r3, [sp, #24]
 8009556:	eba3 0309 	sub.w	r3, r3, r9
 800955a:	455b      	cmp	r3, fp
 800955c:	dc31      	bgt.n	80095c2 <_printf_float+0x36e>
 800955e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009560:	459a      	cmp	sl, r3
 8009562:	dc3a      	bgt.n	80095da <_printf_float+0x386>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	07da      	lsls	r2, r3, #31
 8009568:	d437      	bmi.n	80095da <_printf_float+0x386>
 800956a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956c:	ebaa 0903 	sub.w	r9, sl, r3
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	ebaa 0303 	sub.w	r3, sl, r3
 8009576:	4599      	cmp	r9, r3
 8009578:	bfa8      	it	ge
 800957a:	4699      	movge	r9, r3
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	dc33      	bgt.n	80095ea <_printf_float+0x396>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800958a:	f104 0b1a 	add.w	fp, r4, #26
 800958e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009590:	ebaa 0303 	sub.w	r3, sl, r3
 8009594:	eba3 0309 	sub.w	r3, r3, r9
 8009598:	4543      	cmp	r3, r8
 800959a:	f77f af79 	ble.w	8009490 <_printf_float+0x23c>
 800959e:	2301      	movs	r3, #1
 80095a0:	465a      	mov	r2, fp
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	f43f aeae 	beq.w	800930a <_printf_float+0xb6>
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	e7ec      	b.n	800958e <_printf_float+0x33a>
 80095b4:	4642      	mov	r2, r8
 80095b6:	4631      	mov	r1, r6
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b8      	blx	r7
 80095bc:	3001      	adds	r0, #1
 80095be:	d1c2      	bne.n	8009546 <_printf_float+0x2f2>
 80095c0:	e6a3      	b.n	800930a <_printf_float+0xb6>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	9206      	str	r2, [sp, #24]
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	f43f ae9c 	beq.w	800930a <_printf_float+0xb6>
 80095d2:	9a06      	ldr	r2, [sp, #24]
 80095d4:	f10b 0b01 	add.w	fp, fp, #1
 80095d8:	e7bb      	b.n	8009552 <_printf_float+0x2fe>
 80095da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	d1c0      	bne.n	800956a <_printf_float+0x316>
 80095e8:	e68f      	b.n	800930a <_printf_float+0xb6>
 80095ea:	9a06      	ldr	r2, [sp, #24]
 80095ec:	464b      	mov	r3, r9
 80095ee:	4442      	add	r2, r8
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	d1c3      	bne.n	8009582 <_printf_float+0x32e>
 80095fa:	e686      	b.n	800930a <_printf_float+0xb6>
 80095fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009600:	f1ba 0f01 	cmp.w	sl, #1
 8009604:	dc01      	bgt.n	800960a <_printf_float+0x3b6>
 8009606:	07db      	lsls	r3, r3, #31
 8009608:	d536      	bpl.n	8009678 <_printf_float+0x424>
 800960a:	2301      	movs	r3, #1
 800960c:	4642      	mov	r2, r8
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f ae78 	beq.w	800930a <_printf_float+0xb6>
 800961a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae70 	beq.w	800930a <_printf_float+0xb6>
 800962a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009636:	f7f7 fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800963a:	b9c0      	cbnz	r0, 800966e <_printf_float+0x41a>
 800963c:	4653      	mov	r3, sl
 800963e:	f108 0201 	add.w	r2, r8, #1
 8009642:	4631      	mov	r1, r6
 8009644:	4628      	mov	r0, r5
 8009646:	47b8      	blx	r7
 8009648:	3001      	adds	r0, #1
 800964a:	d10c      	bne.n	8009666 <_printf_float+0x412>
 800964c:	e65d      	b.n	800930a <_printf_float+0xb6>
 800964e:	2301      	movs	r3, #1
 8009650:	465a      	mov	r2, fp
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae56 	beq.w	800930a <_printf_float+0xb6>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	45d0      	cmp	r8, sl
 8009664:	dbf3      	blt.n	800964e <_printf_float+0x3fa>
 8009666:	464b      	mov	r3, r9
 8009668:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800966c:	e6df      	b.n	800942e <_printf_float+0x1da>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0b1a 	add.w	fp, r4, #26
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x40e>
 8009678:	2301      	movs	r3, #1
 800967a:	4642      	mov	r2, r8
 800967c:	e7e1      	b.n	8009642 <_printf_float+0x3ee>
 800967e:	2301      	movs	r3, #1
 8009680:	464a      	mov	r2, r9
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	f43f ae3e 	beq.w	800930a <_printf_float+0xb6>
 800968e:	f108 0801 	add.w	r8, r8, #1
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009696:	1a5b      	subs	r3, r3, r1
 8009698:	4543      	cmp	r3, r8
 800969a:	dcf0      	bgt.n	800967e <_printf_float+0x42a>
 800969c:	e6fc      	b.n	8009498 <_printf_float+0x244>
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	f104 0919 	add.w	r9, r4, #25
 80096a6:	e7f4      	b.n	8009692 <_printf_float+0x43e>

080096a8 <_printf_common>:
 80096a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	4616      	mov	r6, r2
 80096ae:	4698      	mov	r8, r3
 80096b0:	688a      	ldr	r2, [r1, #8]
 80096b2:	690b      	ldr	r3, [r1, #16]
 80096b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	bfb8      	it	lt
 80096bc:	4613      	movlt	r3, r2
 80096be:	6033      	str	r3, [r6, #0]
 80096c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096c4:	4607      	mov	r7, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	b10a      	cbz	r2, 80096ce <_printf_common+0x26>
 80096ca:	3301      	adds	r3, #1
 80096cc:	6033      	str	r3, [r6, #0]
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	0699      	lsls	r1, r3, #26
 80096d2:	bf42      	ittt	mi
 80096d4:	6833      	ldrmi	r3, [r6, #0]
 80096d6:	3302      	addmi	r3, #2
 80096d8:	6033      	strmi	r3, [r6, #0]
 80096da:	6825      	ldr	r5, [r4, #0]
 80096dc:	f015 0506 	ands.w	r5, r5, #6
 80096e0:	d106      	bne.n	80096f0 <_printf_common+0x48>
 80096e2:	f104 0a19 	add.w	sl, r4, #25
 80096e6:	68e3      	ldr	r3, [r4, #12]
 80096e8:	6832      	ldr	r2, [r6, #0]
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	dc26      	bgt.n	800973e <_printf_common+0x96>
 80096f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	3b00      	subs	r3, #0
 80096f8:	bf18      	it	ne
 80096fa:	2301      	movne	r3, #1
 80096fc:	0692      	lsls	r2, r2, #26
 80096fe:	d42b      	bmi.n	8009758 <_printf_common+0xb0>
 8009700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009704:	4641      	mov	r1, r8
 8009706:	4638      	mov	r0, r7
 8009708:	47c8      	blx	r9
 800970a:	3001      	adds	r0, #1
 800970c:	d01e      	beq.n	800974c <_printf_common+0xa4>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	6922      	ldr	r2, [r4, #16]
 8009712:	f003 0306 	and.w	r3, r3, #6
 8009716:	2b04      	cmp	r3, #4
 8009718:	bf02      	ittt	eq
 800971a:	68e5      	ldreq	r5, [r4, #12]
 800971c:	6833      	ldreq	r3, [r6, #0]
 800971e:	1aed      	subeq	r5, r5, r3
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	bf0c      	ite	eq
 8009724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009728:	2500      	movne	r5, #0
 800972a:	4293      	cmp	r3, r2
 800972c:	bfc4      	itt	gt
 800972e:	1a9b      	subgt	r3, r3, r2
 8009730:	18ed      	addgt	r5, r5, r3
 8009732:	2600      	movs	r6, #0
 8009734:	341a      	adds	r4, #26
 8009736:	42b5      	cmp	r5, r6
 8009738:	d11a      	bne.n	8009770 <_printf_common+0xc8>
 800973a:	2000      	movs	r0, #0
 800973c:	e008      	b.n	8009750 <_printf_common+0xa8>
 800973e:	2301      	movs	r3, #1
 8009740:	4652      	mov	r2, sl
 8009742:	4641      	mov	r1, r8
 8009744:	4638      	mov	r0, r7
 8009746:	47c8      	blx	r9
 8009748:	3001      	adds	r0, #1
 800974a:	d103      	bne.n	8009754 <_printf_common+0xac>
 800974c:	f04f 30ff 	mov.w	r0, #4294967295
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009754:	3501      	adds	r5, #1
 8009756:	e7c6      	b.n	80096e6 <_printf_common+0x3e>
 8009758:	18e1      	adds	r1, r4, r3
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	2030      	movs	r0, #48	@ 0x30
 800975e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009762:	4422      	add	r2, r4
 8009764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800976c:	3302      	adds	r3, #2
 800976e:	e7c7      	b.n	8009700 <_printf_common+0x58>
 8009770:	2301      	movs	r3, #1
 8009772:	4622      	mov	r2, r4
 8009774:	4641      	mov	r1, r8
 8009776:	4638      	mov	r0, r7
 8009778:	47c8      	blx	r9
 800977a:	3001      	adds	r0, #1
 800977c:	d0e6      	beq.n	800974c <_printf_common+0xa4>
 800977e:	3601      	adds	r6, #1
 8009780:	e7d9      	b.n	8009736 <_printf_common+0x8e>
	...

08009784 <_printf_i>:
 8009784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009788:	7e0f      	ldrb	r7, [r1, #24]
 800978a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800978c:	2f78      	cmp	r7, #120	@ 0x78
 800978e:	4691      	mov	r9, r2
 8009790:	4680      	mov	r8, r0
 8009792:	460c      	mov	r4, r1
 8009794:	469a      	mov	sl, r3
 8009796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800979a:	d807      	bhi.n	80097ac <_printf_i+0x28>
 800979c:	2f62      	cmp	r7, #98	@ 0x62
 800979e:	d80a      	bhi.n	80097b6 <_printf_i+0x32>
 80097a0:	2f00      	cmp	r7, #0
 80097a2:	f000 80d2 	beq.w	800994a <_printf_i+0x1c6>
 80097a6:	2f58      	cmp	r7, #88	@ 0x58
 80097a8:	f000 80b9 	beq.w	800991e <_printf_i+0x19a>
 80097ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097b4:	e03a      	b.n	800982c <_printf_i+0xa8>
 80097b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097ba:	2b15      	cmp	r3, #21
 80097bc:	d8f6      	bhi.n	80097ac <_printf_i+0x28>
 80097be:	a101      	add	r1, pc, #4	@ (adr r1, 80097c4 <_printf_i+0x40>)
 80097c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097c4:	0800981d 	.word	0x0800981d
 80097c8:	08009831 	.word	0x08009831
 80097cc:	080097ad 	.word	0x080097ad
 80097d0:	080097ad 	.word	0x080097ad
 80097d4:	080097ad 	.word	0x080097ad
 80097d8:	080097ad 	.word	0x080097ad
 80097dc:	08009831 	.word	0x08009831
 80097e0:	080097ad 	.word	0x080097ad
 80097e4:	080097ad 	.word	0x080097ad
 80097e8:	080097ad 	.word	0x080097ad
 80097ec:	080097ad 	.word	0x080097ad
 80097f0:	08009931 	.word	0x08009931
 80097f4:	0800985b 	.word	0x0800985b
 80097f8:	080098eb 	.word	0x080098eb
 80097fc:	080097ad 	.word	0x080097ad
 8009800:	080097ad 	.word	0x080097ad
 8009804:	08009953 	.word	0x08009953
 8009808:	080097ad 	.word	0x080097ad
 800980c:	0800985b 	.word	0x0800985b
 8009810:	080097ad 	.word	0x080097ad
 8009814:	080097ad 	.word	0x080097ad
 8009818:	080098f3 	.word	0x080098f3
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	1d1a      	adds	r2, r3, #4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6032      	str	r2, [r6, #0]
 8009824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800982c:	2301      	movs	r3, #1
 800982e:	e09d      	b.n	800996c <_printf_i+0x1e8>
 8009830:	6833      	ldr	r3, [r6, #0]
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	1d19      	adds	r1, r3, #4
 8009836:	6031      	str	r1, [r6, #0]
 8009838:	0606      	lsls	r6, r0, #24
 800983a:	d501      	bpl.n	8009840 <_printf_i+0xbc>
 800983c:	681d      	ldr	r5, [r3, #0]
 800983e:	e003      	b.n	8009848 <_printf_i+0xc4>
 8009840:	0645      	lsls	r5, r0, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0xb8>
 8009844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009848:	2d00      	cmp	r5, #0
 800984a:	da03      	bge.n	8009854 <_printf_i+0xd0>
 800984c:	232d      	movs	r3, #45	@ 0x2d
 800984e:	426d      	negs	r5, r5
 8009850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009854:	4859      	ldr	r0, [pc, #356]	@ (80099bc <_printf_i+0x238>)
 8009856:	230a      	movs	r3, #10
 8009858:	e011      	b.n	800987e <_printf_i+0xfa>
 800985a:	6821      	ldr	r1, [r4, #0]
 800985c:	6833      	ldr	r3, [r6, #0]
 800985e:	0608      	lsls	r0, r1, #24
 8009860:	f853 5b04 	ldr.w	r5, [r3], #4
 8009864:	d402      	bmi.n	800986c <_printf_i+0xe8>
 8009866:	0649      	lsls	r1, r1, #25
 8009868:	bf48      	it	mi
 800986a:	b2ad      	uxthmi	r5, r5
 800986c:	2f6f      	cmp	r7, #111	@ 0x6f
 800986e:	4853      	ldr	r0, [pc, #332]	@ (80099bc <_printf_i+0x238>)
 8009870:	6033      	str	r3, [r6, #0]
 8009872:	bf14      	ite	ne
 8009874:	230a      	movne	r3, #10
 8009876:	2308      	moveq	r3, #8
 8009878:	2100      	movs	r1, #0
 800987a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800987e:	6866      	ldr	r6, [r4, #4]
 8009880:	60a6      	str	r6, [r4, #8]
 8009882:	2e00      	cmp	r6, #0
 8009884:	bfa2      	ittt	ge
 8009886:	6821      	ldrge	r1, [r4, #0]
 8009888:	f021 0104 	bicge.w	r1, r1, #4
 800988c:	6021      	strge	r1, [r4, #0]
 800988e:	b90d      	cbnz	r5, 8009894 <_printf_i+0x110>
 8009890:	2e00      	cmp	r6, #0
 8009892:	d04b      	beq.n	800992c <_printf_i+0x1a8>
 8009894:	4616      	mov	r6, r2
 8009896:	fbb5 f1f3 	udiv	r1, r5, r3
 800989a:	fb03 5711 	mls	r7, r3, r1, r5
 800989e:	5dc7      	ldrb	r7, [r0, r7]
 80098a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098a4:	462f      	mov	r7, r5
 80098a6:	42bb      	cmp	r3, r7
 80098a8:	460d      	mov	r5, r1
 80098aa:	d9f4      	bls.n	8009896 <_printf_i+0x112>
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d10b      	bne.n	80098c8 <_printf_i+0x144>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	07df      	lsls	r7, r3, #31
 80098b4:	d508      	bpl.n	80098c8 <_printf_i+0x144>
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	4299      	cmp	r1, r3
 80098bc:	bfde      	ittt	le
 80098be:	2330      	movle	r3, #48	@ 0x30
 80098c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098c8:	1b92      	subs	r2, r2, r6
 80098ca:	6122      	str	r2, [r4, #16]
 80098cc:	f8cd a000 	str.w	sl, [sp]
 80098d0:	464b      	mov	r3, r9
 80098d2:	aa03      	add	r2, sp, #12
 80098d4:	4621      	mov	r1, r4
 80098d6:	4640      	mov	r0, r8
 80098d8:	f7ff fee6 	bl	80096a8 <_printf_common>
 80098dc:	3001      	adds	r0, #1
 80098de:	d14a      	bne.n	8009976 <_printf_i+0x1f2>
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	b004      	add	sp, #16
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	f043 0320 	orr.w	r3, r3, #32
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	4833      	ldr	r0, [pc, #204]	@ (80099c0 <_printf_i+0x23c>)
 80098f4:	2778      	movs	r7, #120	@ 0x78
 80098f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	6831      	ldr	r1, [r6, #0]
 80098fe:	061f      	lsls	r7, r3, #24
 8009900:	f851 5b04 	ldr.w	r5, [r1], #4
 8009904:	d402      	bmi.n	800990c <_printf_i+0x188>
 8009906:	065f      	lsls	r7, r3, #25
 8009908:	bf48      	it	mi
 800990a:	b2ad      	uxthmi	r5, r5
 800990c:	6031      	str	r1, [r6, #0]
 800990e:	07d9      	lsls	r1, r3, #31
 8009910:	bf44      	itt	mi
 8009912:	f043 0320 	orrmi.w	r3, r3, #32
 8009916:	6023      	strmi	r3, [r4, #0]
 8009918:	b11d      	cbz	r5, 8009922 <_printf_i+0x19e>
 800991a:	2310      	movs	r3, #16
 800991c:	e7ac      	b.n	8009878 <_printf_i+0xf4>
 800991e:	4827      	ldr	r0, [pc, #156]	@ (80099bc <_printf_i+0x238>)
 8009920:	e7e9      	b.n	80098f6 <_printf_i+0x172>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	f023 0320 	bic.w	r3, r3, #32
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	e7f6      	b.n	800991a <_printf_i+0x196>
 800992c:	4616      	mov	r6, r2
 800992e:	e7bd      	b.n	80098ac <_printf_i+0x128>
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	6825      	ldr	r5, [r4, #0]
 8009934:	6961      	ldr	r1, [r4, #20]
 8009936:	1d18      	adds	r0, r3, #4
 8009938:	6030      	str	r0, [r6, #0]
 800993a:	062e      	lsls	r6, r5, #24
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	d501      	bpl.n	8009944 <_printf_i+0x1c0>
 8009940:	6019      	str	r1, [r3, #0]
 8009942:	e002      	b.n	800994a <_printf_i+0x1c6>
 8009944:	0668      	lsls	r0, r5, #25
 8009946:	d5fb      	bpl.n	8009940 <_printf_i+0x1bc>
 8009948:	8019      	strh	r1, [r3, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	4616      	mov	r6, r2
 8009950:	e7bc      	b.n	80098cc <_printf_i+0x148>
 8009952:	6833      	ldr	r3, [r6, #0]
 8009954:	1d1a      	adds	r2, r3, #4
 8009956:	6032      	str	r2, [r6, #0]
 8009958:	681e      	ldr	r6, [r3, #0]
 800995a:	6862      	ldr	r2, [r4, #4]
 800995c:	2100      	movs	r1, #0
 800995e:	4630      	mov	r0, r6
 8009960:	f7f6 fc46 	bl	80001f0 <memchr>
 8009964:	b108      	cbz	r0, 800996a <_printf_i+0x1e6>
 8009966:	1b80      	subs	r0, r0, r6
 8009968:	6060      	str	r0, [r4, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	6123      	str	r3, [r4, #16]
 800996e:	2300      	movs	r3, #0
 8009970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009974:	e7aa      	b.n	80098cc <_printf_i+0x148>
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	4632      	mov	r2, r6
 800997a:	4649      	mov	r1, r9
 800997c:	4640      	mov	r0, r8
 800997e:	47d0      	blx	sl
 8009980:	3001      	adds	r0, #1
 8009982:	d0ad      	beq.n	80098e0 <_printf_i+0x15c>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	079b      	lsls	r3, r3, #30
 8009988:	d413      	bmi.n	80099b2 <_printf_i+0x22e>
 800998a:	68e0      	ldr	r0, [r4, #12]
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	4298      	cmp	r0, r3
 8009990:	bfb8      	it	lt
 8009992:	4618      	movlt	r0, r3
 8009994:	e7a6      	b.n	80098e4 <_printf_i+0x160>
 8009996:	2301      	movs	r3, #1
 8009998:	4632      	mov	r2, r6
 800999a:	4649      	mov	r1, r9
 800999c:	4640      	mov	r0, r8
 800999e:	47d0      	blx	sl
 80099a0:	3001      	adds	r0, #1
 80099a2:	d09d      	beq.n	80098e0 <_printf_i+0x15c>
 80099a4:	3501      	adds	r5, #1
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	9903      	ldr	r1, [sp, #12]
 80099aa:	1a5b      	subs	r3, r3, r1
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dcf2      	bgt.n	8009996 <_printf_i+0x212>
 80099b0:	e7eb      	b.n	800998a <_printf_i+0x206>
 80099b2:	2500      	movs	r5, #0
 80099b4:	f104 0619 	add.w	r6, r4, #25
 80099b8:	e7f5      	b.n	80099a6 <_printf_i+0x222>
 80099ba:	bf00      	nop
 80099bc:	0800bae2 	.word	0x0800bae2
 80099c0:	0800baf3 	.word	0x0800baf3

080099c4 <std>:
 80099c4:	2300      	movs	r3, #0
 80099c6:	b510      	push	{r4, lr}
 80099c8:	4604      	mov	r4, r0
 80099ca:	e9c0 3300 	strd	r3, r3, [r0]
 80099ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099d2:	6083      	str	r3, [r0, #8]
 80099d4:	8181      	strh	r1, [r0, #12]
 80099d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099d8:	81c2      	strh	r2, [r0, #14]
 80099da:	6183      	str	r3, [r0, #24]
 80099dc:	4619      	mov	r1, r3
 80099de:	2208      	movs	r2, #8
 80099e0:	305c      	adds	r0, #92	@ 0x5c
 80099e2:	f000 f906 	bl	8009bf2 <memset>
 80099e6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a1c <std+0x58>)
 80099e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <std+0x5c>)
 80099ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <std+0x60>)
 80099f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <std+0x64>)
 80099f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <std+0x68>)
 80099f8:	6224      	str	r4, [r4, #32]
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d006      	beq.n	8009a0c <std+0x48>
 80099fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a02:	4294      	cmp	r4, r2
 8009a04:	d002      	beq.n	8009a0c <std+0x48>
 8009a06:	33d0      	adds	r3, #208	@ 0xd0
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	d105      	bne.n	8009a18 <std+0x54>
 8009a0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f000 b96a 	b.w	8009cec <__retarget_lock_init_recursive>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	bf00      	nop
 8009a1c:	08009b6d 	.word	0x08009b6d
 8009a20:	08009b8f 	.word	0x08009b8f
 8009a24:	08009bc7 	.word	0x08009bc7
 8009a28:	08009beb 	.word	0x08009beb
 8009a2c:	20000e4c 	.word	0x20000e4c

08009a30 <stdio_exit_handler>:
 8009a30:	4a02      	ldr	r2, [pc, #8]	@ (8009a3c <stdio_exit_handler+0xc>)
 8009a32:	4903      	ldr	r1, [pc, #12]	@ (8009a40 <stdio_exit_handler+0x10>)
 8009a34:	4803      	ldr	r0, [pc, #12]	@ (8009a44 <stdio_exit_handler+0x14>)
 8009a36:	f000 b869 	b.w	8009b0c <_fwalk_sglue>
 8009a3a:	bf00      	nop
 8009a3c:	20000188 	.word	0x20000188
 8009a40:	0800b621 	.word	0x0800b621
 8009a44:	20000198 	.word	0x20000198

08009a48 <cleanup_stdio>:
 8009a48:	6841      	ldr	r1, [r0, #4]
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a7c <cleanup_stdio+0x34>)
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	d001      	beq.n	8009a58 <cleanup_stdio+0x10>
 8009a54:	f001 fde4 	bl	800b620 <_fflush_r>
 8009a58:	68a1      	ldr	r1, [r4, #8]
 8009a5a:	4b09      	ldr	r3, [pc, #36]	@ (8009a80 <cleanup_stdio+0x38>)
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	d002      	beq.n	8009a66 <cleanup_stdio+0x1e>
 8009a60:	4620      	mov	r0, r4
 8009a62:	f001 fddd 	bl	800b620 <_fflush_r>
 8009a66:	68e1      	ldr	r1, [r4, #12]
 8009a68:	4b06      	ldr	r3, [pc, #24]	@ (8009a84 <cleanup_stdio+0x3c>)
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	d004      	beq.n	8009a78 <cleanup_stdio+0x30>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f001 bdd4 	b.w	800b620 <_fflush_r>
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000e4c 	.word	0x20000e4c
 8009a80:	20000eb4 	.word	0x20000eb4
 8009a84:	20000f1c 	.word	0x20000f1c

08009a88 <global_stdio_init.part.0>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab8 <global_stdio_init.part.0+0x30>)
 8009a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009abc <global_stdio_init.part.0+0x34>)
 8009a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac0 <global_stdio_init.part.0+0x38>)
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	4620      	mov	r0, r4
 8009a94:	2200      	movs	r2, #0
 8009a96:	2104      	movs	r1, #4
 8009a98:	f7ff ff94 	bl	80099c4 <std>
 8009a9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	2109      	movs	r1, #9
 8009aa4:	f7ff ff8e 	bl	80099c4 <std>
 8009aa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009aac:	2202      	movs	r2, #2
 8009aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab2:	2112      	movs	r1, #18
 8009ab4:	f7ff bf86 	b.w	80099c4 <std>
 8009ab8:	20000f84 	.word	0x20000f84
 8009abc:	20000e4c 	.word	0x20000e4c
 8009ac0:	08009a31 	.word	0x08009a31

08009ac4 <__sfp_lock_acquire>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	@ (8009acc <__sfp_lock_acquire+0x8>)
 8009ac6:	f000 b912 	b.w	8009cee <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	20000f8d 	.word	0x20000f8d

08009ad0 <__sfp_lock_release>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__sfp_lock_release+0x8>)
 8009ad2:	f000 b90d 	b.w	8009cf0 <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000f8d 	.word	0x20000f8d

08009adc <__sinit>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	f7ff fff0 	bl	8009ac4 <__sfp_lock_acquire>
 8009ae4:	6a23      	ldr	r3, [r4, #32]
 8009ae6:	b11b      	cbz	r3, 8009af0 <__sinit+0x14>
 8009ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aec:	f7ff bff0 	b.w	8009ad0 <__sfp_lock_release>
 8009af0:	4b04      	ldr	r3, [pc, #16]	@ (8009b04 <__sinit+0x28>)
 8009af2:	6223      	str	r3, [r4, #32]
 8009af4:	4b04      	ldr	r3, [pc, #16]	@ (8009b08 <__sinit+0x2c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f5      	bne.n	8009ae8 <__sinit+0xc>
 8009afc:	f7ff ffc4 	bl	8009a88 <global_stdio_init.part.0>
 8009b00:	e7f2      	b.n	8009ae8 <__sinit+0xc>
 8009b02:	bf00      	nop
 8009b04:	08009a49 	.word	0x08009a49
 8009b08:	20000f84 	.word	0x20000f84

08009b0c <_fwalk_sglue>:
 8009b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b10:	4607      	mov	r7, r0
 8009b12:	4688      	mov	r8, r1
 8009b14:	4614      	mov	r4, r2
 8009b16:	2600      	movs	r6, #0
 8009b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b20:	d505      	bpl.n	8009b2e <_fwalk_sglue+0x22>
 8009b22:	6824      	ldr	r4, [r4, #0]
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	d1f7      	bne.n	8009b18 <_fwalk_sglue+0xc>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d907      	bls.n	8009b44 <_fwalk_sglue+0x38>
 8009b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	d003      	beq.n	8009b44 <_fwalk_sglue+0x38>
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c0      	blx	r8
 8009b42:	4306      	orrs	r6, r0
 8009b44:	3568      	adds	r5, #104	@ 0x68
 8009b46:	e7e9      	b.n	8009b1c <_fwalk_sglue+0x10>

08009b48 <iprintf>:
 8009b48:	b40f      	push	{r0, r1, r2, r3}
 8009b4a:	b507      	push	{r0, r1, r2, lr}
 8009b4c:	4906      	ldr	r1, [pc, #24]	@ (8009b68 <iprintf+0x20>)
 8009b4e:	ab04      	add	r3, sp, #16
 8009b50:	6808      	ldr	r0, [r1, #0]
 8009b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b56:	6881      	ldr	r1, [r0, #8]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	f001 fbc5 	bl	800b2e8 <_vfiprintf_r>
 8009b5e:	b003      	add	sp, #12
 8009b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b64:	b004      	add	sp, #16
 8009b66:	4770      	bx	lr
 8009b68:	20000194 	.word	0x20000194

08009b6c <__sread>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b74:	f000 f86c 	bl	8009c50 <_read_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	bfab      	itete	ge
 8009b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b80:	181b      	addge	r3, r3, r0
 8009b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b86:	bfac      	ite	ge
 8009b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b8a:	81a3      	strhlt	r3, [r4, #12]
 8009b8c:	bd10      	pop	{r4, pc}

08009b8e <__swrite>:
 8009b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b92:	461f      	mov	r7, r3
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	05db      	lsls	r3, r3, #23
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	d505      	bpl.n	8009bac <__swrite+0x1e>
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f000 f840 	bl	8009c2c <_lseek_r>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc2:	f000 b857 	b.w	8009c74 <_write_r>

08009bc6 <__sseek>:
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	460c      	mov	r4, r1
 8009bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bce:	f000 f82d 	bl	8009c2c <_lseek_r>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	bf15      	itete	ne
 8009bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009be2:	81a3      	strheq	r3, [r4, #12]
 8009be4:	bf18      	it	ne
 8009be6:	81a3      	strhne	r3, [r4, #12]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__sclose>:
 8009bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bee:	f000 b80d 	b.w	8009c0c <_close_r>

08009bf2 <memset>:
 8009bf2:	4402      	add	r2, r0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d100      	bne.n	8009bfc <memset+0xa>
 8009bfa:	4770      	bx	lr
 8009bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8009c00:	e7f9      	b.n	8009bf6 <memset+0x4>
	...

08009c04 <_localeconv_r>:
 8009c04:	4800      	ldr	r0, [pc, #0]	@ (8009c08 <_localeconv_r+0x4>)
 8009c06:	4770      	bx	lr
 8009c08:	200002d4 	.word	0x200002d4

08009c0c <_close_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	@ (8009c28 <_close_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f7 fc90 	bl	800153c <_close>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_close_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_close_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20000f88 	.word	0x20000f88

08009c2c <_lseek_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	@ (8009c4c <_lseek_r+0x20>)
 8009c30:	4604      	mov	r4, r0
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	2200      	movs	r2, #0
 8009c38:	602a      	str	r2, [r5, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7f7 fca5 	bl	800158a <_lseek>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_lseek_r+0x1e>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_lseek_r+0x1e>
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	20000f88 	.word	0x20000f88

08009c50 <_read_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d07      	ldr	r5, [pc, #28]	@ (8009c70 <_read_r+0x20>)
 8009c54:	4604      	mov	r4, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	4611      	mov	r1, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f7f7 fc4f 	bl	8001502 <_read>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_read_r+0x1e>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_read_r+0x1e>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000f88 	.word	0x20000f88

08009c74 <_write_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	@ (8009c94 <_write_r+0x20>)
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	602a      	str	r2, [r5, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7f7 f970 	bl	8000f68 <_write>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_write_r+0x1e>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_write_r+0x1e>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20000f88 	.word	0x20000f88

08009c98 <__errno>:
 8009c98:	4b01      	ldr	r3, [pc, #4]	@ (8009ca0 <__errno+0x8>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000194 	.word	0x20000194

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1b64      	subs	r4, r4, r5
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2600      	movs	r6, #0
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f001 fec0 	bl	800ba3c <_init>
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	4798      	blx	r3
 8009cce:	3601      	adds	r6, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	4798      	blx	r3
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800be48 	.word	0x0800be48
 8009ce0:	0800be48 	.word	0x0800be48
 8009ce4:	0800be48 	.word	0x0800be48
 8009ce8:	0800be4c 	.word	0x0800be4c

08009cec <__retarget_lock_init_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_acquire_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__retarget_lock_release_recursive>:
 8009cf0:	4770      	bx	lr

08009cf2 <quorem>:
 8009cf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf6:	6903      	ldr	r3, [r0, #16]
 8009cf8:	690c      	ldr	r4, [r1, #16]
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	db7e      	blt.n	8009dfe <quorem+0x10c>
 8009d00:	3c01      	subs	r4, #1
 8009d02:	f101 0814 	add.w	r8, r1, #20
 8009d06:	00a3      	lsls	r3, r4, #2
 8009d08:	f100 0514 	add.w	r5, r0, #20
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d24:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d28:	d32e      	bcc.n	8009d88 <quorem+0x96>
 8009d2a:	f04f 0a00 	mov.w	sl, #0
 8009d2e:	46c4      	mov	ip, r8
 8009d30:	46ae      	mov	lr, r5
 8009d32:	46d3      	mov	fp, sl
 8009d34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d38:	b298      	uxth	r0, r3
 8009d3a:	fb06 a000 	mla	r0, r6, r0, sl
 8009d3e:	0c02      	lsrs	r2, r0, #16
 8009d40:	0c1b      	lsrs	r3, r3, #16
 8009d42:	fb06 2303 	mla	r3, r6, r3, r2
 8009d46:	f8de 2000 	ldr.w	r2, [lr]
 8009d4a:	b280      	uxth	r0, r0
 8009d4c:	b292      	uxth	r2, r2
 8009d4e:	1a12      	subs	r2, r2, r0
 8009d50:	445a      	add	r2, fp
 8009d52:	f8de 0000 	ldr.w	r0, [lr]
 8009d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d64:	b292      	uxth	r2, r2
 8009d66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d6a:	45e1      	cmp	r9, ip
 8009d6c:	f84e 2b04 	str.w	r2, [lr], #4
 8009d70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d74:	d2de      	bcs.n	8009d34 <quorem+0x42>
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	58eb      	ldr	r3, [r5, r3]
 8009d7a:	b92b      	cbnz	r3, 8009d88 <quorem+0x96>
 8009d7c:	9b01      	ldr	r3, [sp, #4]
 8009d7e:	3b04      	subs	r3, #4
 8009d80:	429d      	cmp	r5, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	d32f      	bcc.n	8009de6 <quorem+0xf4>
 8009d86:	613c      	str	r4, [r7, #16]
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f001 f97b 	bl	800b084 <__mcmp>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	db25      	blt.n	8009dde <quorem+0xec>
 8009d92:	4629      	mov	r1, r5
 8009d94:	2000      	movs	r0, #0
 8009d96:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d9a:	f8d1 c000 	ldr.w	ip, [r1]
 8009d9e:	fa1f fe82 	uxth.w	lr, r2
 8009da2:	fa1f f38c 	uxth.w	r3, ip
 8009da6:	eba3 030e 	sub.w	r3, r3, lr
 8009daa:	4403      	add	r3, r0
 8009dac:	0c12      	lsrs	r2, r2, #16
 8009dae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009db2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dbc:	45c1      	cmp	r9, r8
 8009dbe:	f841 3b04 	str.w	r3, [r1], #4
 8009dc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009dc6:	d2e6      	bcs.n	8009d96 <quorem+0xa4>
 8009dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd0:	b922      	cbnz	r2, 8009ddc <quorem+0xea>
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	429d      	cmp	r5, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	d30b      	bcc.n	8009df2 <quorem+0x100>
 8009dda:	613c      	str	r4, [r7, #16]
 8009ddc:	3601      	adds	r6, #1
 8009dde:	4630      	mov	r0, r6
 8009de0:	b003      	add	sp, #12
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	6812      	ldr	r2, [r2, #0]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	2a00      	cmp	r2, #0
 8009dec:	d1cb      	bne.n	8009d86 <quorem+0x94>
 8009dee:	3c01      	subs	r4, #1
 8009df0:	e7c6      	b.n	8009d80 <quorem+0x8e>
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	3b04      	subs	r3, #4
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	d1ef      	bne.n	8009dda <quorem+0xe8>
 8009dfa:	3c01      	subs	r4, #1
 8009dfc:	e7ea      	b.n	8009dd4 <quorem+0xe2>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e7ee      	b.n	8009de0 <quorem+0xee>
 8009e02:	0000      	movs	r0, r0
 8009e04:	0000      	movs	r0, r0
	...

08009e08 <_dtoa_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	69c7      	ldr	r7, [r0, #28]
 8009e0e:	b099      	sub	sp, #100	@ 0x64
 8009e10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e14:	ec55 4b10 	vmov	r4, r5, d0
 8009e18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e1c:	4683      	mov	fp, r0
 8009e1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e22:	b97f      	cbnz	r7, 8009e44 <_dtoa_r+0x3c>
 8009e24:	2010      	movs	r0, #16
 8009e26:	f000 fdfd 	bl	800aa24 <malloc>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e30:	b920      	cbnz	r0, 8009e3c <_dtoa_r+0x34>
 8009e32:	4ba7      	ldr	r3, [pc, #668]	@ (800a0d0 <_dtoa_r+0x2c8>)
 8009e34:	21ef      	movs	r1, #239	@ 0xef
 8009e36:	48a7      	ldr	r0, [pc, #668]	@ (800a0d4 <_dtoa_r+0x2cc>)
 8009e38:	f001 fccc 	bl	800b7d4 <__assert_func>
 8009e3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e40:	6007      	str	r7, [r0, #0]
 8009e42:	60c7      	str	r7, [r0, #12]
 8009e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	b159      	cbz	r1, 8009e64 <_dtoa_r+0x5c>
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	604a      	str	r2, [r1, #4]
 8009e50:	2301      	movs	r3, #1
 8009e52:	4093      	lsls	r3, r2
 8009e54:	608b      	str	r3, [r1, #8]
 8009e56:	4658      	mov	r0, fp
 8009e58:	f000 feda 	bl	800ac10 <_Bfree>
 8009e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	1e2b      	subs	r3, r5, #0
 8009e66:	bfb9      	ittee	lt
 8009e68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e6c:	9303      	strlt	r3, [sp, #12]
 8009e6e:	2300      	movge	r3, #0
 8009e70:	6033      	strge	r3, [r6, #0]
 8009e72:	9f03      	ldr	r7, [sp, #12]
 8009e74:	4b98      	ldr	r3, [pc, #608]	@ (800a0d8 <_dtoa_r+0x2d0>)
 8009e76:	bfbc      	itt	lt
 8009e78:	2201      	movlt	r2, #1
 8009e7a:	6032      	strlt	r2, [r6, #0]
 8009e7c:	43bb      	bics	r3, r7
 8009e7e:	d112      	bne.n	8009ea6 <_dtoa_r+0x9e>
 8009e80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e8c:	4323      	orrs	r3, r4
 8009e8e:	f000 854d 	beq.w	800a92c <_dtoa_r+0xb24>
 8009e92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a0ec <_dtoa_r+0x2e4>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 854f 	beq.w	800a93c <_dtoa_r+0xb34>
 8009e9e:	f10a 0303 	add.w	r3, sl, #3
 8009ea2:	f000 bd49 	b.w	800a938 <_dtoa_r+0xb30>
 8009ea6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	ec51 0b17 	vmov	r0, r1, d7
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009eb6:	f7f6 fe17 	bl	8000ae8 <__aeabi_dcmpeq>
 8009eba:	4680      	mov	r8, r0
 8009ebc:	b158      	cbz	r0, 8009ed6 <_dtoa_r+0xce>
 8009ebe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ec6:	b113      	cbz	r3, 8009ece <_dtoa_r+0xc6>
 8009ec8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009eca:	4b84      	ldr	r3, [pc, #528]	@ (800a0dc <_dtoa_r+0x2d4>)
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a0f0 <_dtoa_r+0x2e8>
 8009ed2:	f000 bd33 	b.w	800a93c <_dtoa_r+0xb34>
 8009ed6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009eda:	aa16      	add	r2, sp, #88	@ 0x58
 8009edc:	a917      	add	r1, sp, #92	@ 0x5c
 8009ede:	4658      	mov	r0, fp
 8009ee0:	f001 f980 	bl	800b1e4 <__d2b>
 8009ee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ee8:	4681      	mov	r9, r0
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	d077      	beq.n	8009fde <_dtoa_r+0x1d6>
 8009eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ef0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009efc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f08:	4619      	mov	r1, r3
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	4b74      	ldr	r3, [pc, #464]	@ (800a0e0 <_dtoa_r+0x2d8>)
 8009f0e:	f7f6 f9cb 	bl	80002a8 <__aeabi_dsub>
 8009f12:	a369      	add	r3, pc, #420	@ (adr r3, 800a0b8 <_dtoa_r+0x2b0>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 fb7e 	bl	8000618 <__aeabi_dmul>
 8009f1c:	a368      	add	r3, pc, #416	@ (adr r3, 800a0c0 <_dtoa_r+0x2b8>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 f9c3 	bl	80002ac <__adddf3>
 8009f26:	4604      	mov	r4, r0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	f7f6 fb0a 	bl	8000544 <__aeabi_i2d>
 8009f30:	a365      	add	r3, pc, #404	@ (adr r3, 800a0c8 <_dtoa_r+0x2c0>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	f7f6 fb6f 	bl	8000618 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 f9b3 	bl	80002ac <__adddf3>
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	f7f6 fe15 	bl	8000b78 <__aeabi_d2iz>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4607      	mov	r7, r0
 8009f52:	2300      	movs	r3, #0
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8009f5c:	b140      	cbz	r0, 8009f70 <_dtoa_r+0x168>
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7f6 faf0 	bl	8000544 <__aeabi_i2d>
 8009f64:	4622      	mov	r2, r4
 8009f66:	462b      	mov	r3, r5
 8009f68:	f7f6 fdbe 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f6c:	b900      	cbnz	r0, 8009f70 <_dtoa_r+0x168>
 8009f6e:	3f01      	subs	r7, #1
 8009f70:	2f16      	cmp	r7, #22
 8009f72:	d851      	bhi.n	800a018 <_dtoa_r+0x210>
 8009f74:	4b5b      	ldr	r3, [pc, #364]	@ (800a0e4 <_dtoa_r+0x2dc>)
 8009f76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f82:	f7f6 fdbb 	bl	8000afc <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d048      	beq.n	800a01c <_dtoa_r+0x214>
 8009f8a:	3f01      	subs	r7, #1
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f92:	1b9b      	subs	r3, r3, r6
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	bf44      	itt	mi
 8009f98:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f9c:	2300      	movmi	r3, #0
 8009f9e:	9208      	str	r2, [sp, #32]
 8009fa0:	bf54      	ite	pl
 8009fa2:	f04f 0800 	movpl.w	r8, #0
 8009fa6:	9308      	strmi	r3, [sp, #32]
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	db39      	blt.n	800a020 <_dtoa_r+0x218>
 8009fac:	9b08      	ldr	r3, [sp, #32]
 8009fae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009fb0:	443b      	add	r3, r7
 8009fb2:	9308      	str	r3, [sp, #32]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	d864      	bhi.n	800a088 <_dtoa_r+0x280>
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	bfc4      	itt	gt
 8009fc2:	3b04      	subgt	r3, #4
 8009fc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8009fcc:	bfcc      	ite	gt
 8009fce:	2400      	movgt	r4, #0
 8009fd0:	2401      	movle	r4, #1
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d863      	bhi.n	800a09e <_dtoa_r+0x296>
 8009fd6:	e8df f003 	tbb	[pc, r3]
 8009fda:	372a      	.short	0x372a
 8009fdc:	5535      	.short	0x5535
 8009fde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009fe2:	441e      	add	r6, r3
 8009fe4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	bfc1      	itttt	gt
 8009fec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ff0:	409f      	lslgt	r7, r3
 8009ff2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ff6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ffa:	bfd6      	itet	le
 8009ffc:	f1c3 0320 	rsble	r3, r3, #32
 800a000:	ea47 0003 	orrgt.w	r0, r7, r3
 800a004:	fa04 f003 	lslle.w	r0, r4, r3
 800a008:	f7f6 fa8c 	bl	8000524 <__aeabi_ui2d>
 800a00c:	2201      	movs	r2, #1
 800a00e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a012:	3e01      	subs	r6, #1
 800a014:	9214      	str	r2, [sp, #80]	@ 0x50
 800a016:	e777      	b.n	8009f08 <_dtoa_r+0x100>
 800a018:	2301      	movs	r3, #1
 800a01a:	e7b8      	b.n	8009f8e <_dtoa_r+0x186>
 800a01c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a01e:	e7b7      	b.n	8009f90 <_dtoa_r+0x188>
 800a020:	427b      	negs	r3, r7
 800a022:	930a      	str	r3, [sp, #40]	@ 0x28
 800a024:	2300      	movs	r3, #0
 800a026:	eba8 0807 	sub.w	r8, r8, r7
 800a02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a02c:	e7c4      	b.n	8009fb8 <_dtoa_r+0x1b0>
 800a02e:	2300      	movs	r3, #0
 800a030:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc35      	bgt.n	800a0a4 <_dtoa_r+0x29c>
 800a038:	2301      	movs	r3, #1
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	9307      	str	r3, [sp, #28]
 800a03e:	461a      	mov	r2, r3
 800a040:	920e      	str	r2, [sp, #56]	@ 0x38
 800a042:	e00b      	b.n	800a05c <_dtoa_r+0x254>
 800a044:	2301      	movs	r3, #1
 800a046:	e7f3      	b.n	800a030 <_dtoa_r+0x228>
 800a048:	2300      	movs	r3, #0
 800a04a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a04e:	18fb      	adds	r3, r7, r3
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	2b01      	cmp	r3, #1
 800a056:	9307      	str	r3, [sp, #28]
 800a058:	bfb8      	it	lt
 800a05a:	2301      	movlt	r3, #1
 800a05c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a060:	2100      	movs	r1, #0
 800a062:	2204      	movs	r2, #4
 800a064:	f102 0514 	add.w	r5, r2, #20
 800a068:	429d      	cmp	r5, r3
 800a06a:	d91f      	bls.n	800a0ac <_dtoa_r+0x2a4>
 800a06c:	6041      	str	r1, [r0, #4]
 800a06e:	4658      	mov	r0, fp
 800a070:	f000 fd8e 	bl	800ab90 <_Balloc>
 800a074:	4682      	mov	sl, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	d13c      	bne.n	800a0f4 <_dtoa_r+0x2ec>
 800a07a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e8 <_dtoa_r+0x2e0>)
 800a07c:	4602      	mov	r2, r0
 800a07e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a082:	e6d8      	b.n	8009e36 <_dtoa_r+0x2e>
 800a084:	2301      	movs	r3, #1
 800a086:	e7e0      	b.n	800a04a <_dtoa_r+0x242>
 800a088:	2401      	movs	r4, #1
 800a08a:	2300      	movs	r3, #0
 800a08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a08e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	9307      	str	r3, [sp, #28]
 800a098:	2200      	movs	r2, #0
 800a09a:	2312      	movs	r3, #18
 800a09c:	e7d0      	b.n	800a040 <_dtoa_r+0x238>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0a2:	e7f5      	b.n	800a090 <_dtoa_r+0x288>
 800a0a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	9307      	str	r3, [sp, #28]
 800a0aa:	e7d7      	b.n	800a05c <_dtoa_r+0x254>
 800a0ac:	3101      	adds	r1, #1
 800a0ae:	0052      	lsls	r2, r2, #1
 800a0b0:	e7d8      	b.n	800a064 <_dtoa_r+0x25c>
 800a0b2:	bf00      	nop
 800a0b4:	f3af 8000 	nop.w
 800a0b8:	636f4361 	.word	0x636f4361
 800a0bc:	3fd287a7 	.word	0x3fd287a7
 800a0c0:	8b60c8b3 	.word	0x8b60c8b3
 800a0c4:	3fc68a28 	.word	0x3fc68a28
 800a0c8:	509f79fb 	.word	0x509f79fb
 800a0cc:	3fd34413 	.word	0x3fd34413
 800a0d0:	0800bb11 	.word	0x0800bb11
 800a0d4:	0800bb28 	.word	0x0800bb28
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	0800bae1 	.word	0x0800bae1
 800a0e0:	3ff80000 	.word	0x3ff80000
 800a0e4:	0800bc20 	.word	0x0800bc20
 800a0e8:	0800bb80 	.word	0x0800bb80
 800a0ec:	0800bb0d 	.word	0x0800bb0d
 800a0f0:	0800bae0 	.word	0x0800bae0
 800a0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0f8:	6018      	str	r0, [r3, #0]
 800a0fa:	9b07      	ldr	r3, [sp, #28]
 800a0fc:	2b0e      	cmp	r3, #14
 800a0fe:	f200 80a4 	bhi.w	800a24a <_dtoa_r+0x442>
 800a102:	2c00      	cmp	r4, #0
 800a104:	f000 80a1 	beq.w	800a24a <_dtoa_r+0x442>
 800a108:	2f00      	cmp	r7, #0
 800a10a:	dd33      	ble.n	800a174 <_dtoa_r+0x36c>
 800a10c:	4bad      	ldr	r3, [pc, #692]	@ (800a3c4 <_dtoa_r+0x5bc>)
 800a10e:	f007 020f 	and.w	r2, r7, #15
 800a112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a116:	ed93 7b00 	vldr	d7, [r3]
 800a11a:	05f8      	lsls	r0, r7, #23
 800a11c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a120:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a124:	d516      	bpl.n	800a154 <_dtoa_r+0x34c>
 800a126:	4ba8      	ldr	r3, [pc, #672]	@ (800a3c8 <_dtoa_r+0x5c0>)
 800a128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a12c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a130:	f7f6 fb9c 	bl	800086c <__aeabi_ddiv>
 800a134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a138:	f004 040f 	and.w	r4, r4, #15
 800a13c:	2603      	movs	r6, #3
 800a13e:	4da2      	ldr	r5, [pc, #648]	@ (800a3c8 <_dtoa_r+0x5c0>)
 800a140:	b954      	cbnz	r4, 800a158 <_dtoa_r+0x350>
 800a142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a14a:	f7f6 fb8f 	bl	800086c <__aeabi_ddiv>
 800a14e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a152:	e028      	b.n	800a1a6 <_dtoa_r+0x39e>
 800a154:	2602      	movs	r6, #2
 800a156:	e7f2      	b.n	800a13e <_dtoa_r+0x336>
 800a158:	07e1      	lsls	r1, r4, #31
 800a15a:	d508      	bpl.n	800a16e <_dtoa_r+0x366>
 800a15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a160:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a164:	f7f6 fa58 	bl	8000618 <__aeabi_dmul>
 800a168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a16c:	3601      	adds	r6, #1
 800a16e:	1064      	asrs	r4, r4, #1
 800a170:	3508      	adds	r5, #8
 800a172:	e7e5      	b.n	800a140 <_dtoa_r+0x338>
 800a174:	f000 80d2 	beq.w	800a31c <_dtoa_r+0x514>
 800a178:	427c      	negs	r4, r7
 800a17a:	4b92      	ldr	r3, [pc, #584]	@ (800a3c4 <_dtoa_r+0x5bc>)
 800a17c:	4d92      	ldr	r5, [pc, #584]	@ (800a3c8 <_dtoa_r+0x5c0>)
 800a17e:	f004 020f 	and.w	r2, r4, #15
 800a182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a18e:	f7f6 fa43 	bl	8000618 <__aeabi_dmul>
 800a192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a196:	1124      	asrs	r4, r4, #4
 800a198:	2300      	movs	r3, #0
 800a19a:	2602      	movs	r6, #2
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	f040 80b2 	bne.w	800a306 <_dtoa_r+0x4fe>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1d3      	bne.n	800a14e <_dtoa_r+0x346>
 800a1a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 80b7 	beq.w	800a320 <_dtoa_r+0x518>
 800a1b2:	4b86      	ldr	r3, [pc, #536]	@ (800a3cc <_dtoa_r+0x5c4>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 fc9f 	bl	8000afc <__aeabi_dcmplt>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f000 80ae 	beq.w	800a320 <_dtoa_r+0x518>
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 80aa 	beq.w	800a320 <_dtoa_r+0x518>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dd37      	ble.n	800a242 <_dtoa_r+0x43a>
 800a1d2:	1e7b      	subs	r3, r7, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4b7d      	ldr	r3, [pc, #500]	@ (800a3d0 <_dtoa_r+0x5c8>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7f6 fa1b 	bl	8000618 <__aeabi_dmul>
 800a1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e6:	9c00      	ldr	r4, [sp, #0]
 800a1e8:	3601      	adds	r6, #1
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 f9aa 	bl	8000544 <__aeabi_i2d>
 800a1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	4b76      	ldr	r3, [pc, #472]	@ (800a3d4 <_dtoa_r+0x5cc>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 f856 	bl	80002ac <__adddf3>
 800a200:	4605      	mov	r5, r0
 800a202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a206:	2c00      	cmp	r4, #0
 800a208:	f040 808d 	bne.w	800a326 <_dtoa_r+0x51e>
 800a20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a210:	4b71      	ldr	r3, [pc, #452]	@ (800a3d8 <_dtoa_r+0x5d0>)
 800a212:	2200      	movs	r2, #0
 800a214:	f7f6 f848 	bl	80002a8 <__aeabi_dsub>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a220:	462a      	mov	r2, r5
 800a222:	4633      	mov	r3, r6
 800a224:	f7f6 fc88 	bl	8000b38 <__aeabi_dcmpgt>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f040 828b 	bne.w	800a744 <_dtoa_r+0x93c>
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	462a      	mov	r2, r5
 800a234:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a238:	f7f6 fc60 	bl	8000afc <__aeabi_dcmplt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f040 8128 	bne.w	800a492 <_dtoa_r+0x68a>
 800a242:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a246:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a24a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f2c0 815a 	blt.w	800a506 <_dtoa_r+0x6fe>
 800a252:	2f0e      	cmp	r7, #14
 800a254:	f300 8157 	bgt.w	800a506 <_dtoa_r+0x6fe>
 800a258:	4b5a      	ldr	r3, [pc, #360]	@ (800a3c4 <_dtoa_r+0x5bc>)
 800a25a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a25e:	ed93 7b00 	vldr	d7, [r3]
 800a262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	ed8d 7b00 	vstr	d7, [sp]
 800a26a:	da03      	bge.n	800a274 <_dtoa_r+0x46c>
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f340 8101 	ble.w	800a476 <_dtoa_r+0x66e>
 800a274:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a278:	4656      	mov	r6, sl
 800a27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a27e:	4620      	mov	r0, r4
 800a280:	4629      	mov	r1, r5
 800a282:	f7f6 faf3 	bl	800086c <__aeabi_ddiv>
 800a286:	f7f6 fc77 	bl	8000b78 <__aeabi_d2iz>
 800a28a:	4680      	mov	r8, r0
 800a28c:	f7f6 f95a 	bl	8000544 <__aeabi_i2d>
 800a290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a294:	f7f6 f9c0 	bl	8000618 <__aeabi_dmul>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4620      	mov	r0, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2a4:	f7f6 f800 	bl	80002a8 <__aeabi_dsub>
 800a2a8:	f806 4b01 	strb.w	r4, [r6], #1
 800a2ac:	9d07      	ldr	r5, [sp, #28]
 800a2ae:	eba6 040a 	sub.w	r4, r6, sl
 800a2b2:	42a5      	cmp	r5, r4
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	f040 8117 	bne.w	800a4ea <_dtoa_r+0x6e2>
 800a2bc:	f7f5 fff6 	bl	80002ac <__adddf3>
 800a2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	460d      	mov	r5, r1
 800a2c8:	f7f6 fc36 	bl	8000b38 <__aeabi_dcmpgt>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f040 80f9 	bne.w	800a4c4 <_dtoa_r+0x6bc>
 800a2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2de:	b118      	cbz	r0, 800a2e8 <_dtoa_r+0x4e0>
 800a2e0:	f018 0f01 	tst.w	r8, #1
 800a2e4:	f040 80ee 	bne.w	800a4c4 <_dtoa_r+0x6bc>
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4658      	mov	r0, fp
 800a2ec:	f000 fc90 	bl	800ac10 <_Bfree>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	7033      	strb	r3, [r6, #0]
 800a2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2f6:	3701      	adds	r7, #1
 800a2f8:	601f      	str	r7, [r3, #0]
 800a2fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 831d 	beq.w	800a93c <_dtoa_r+0xb34>
 800a302:	601e      	str	r6, [r3, #0]
 800a304:	e31a      	b.n	800a93c <_dtoa_r+0xb34>
 800a306:	07e2      	lsls	r2, r4, #31
 800a308:	d505      	bpl.n	800a316 <_dtoa_r+0x50e>
 800a30a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a30e:	f7f6 f983 	bl	8000618 <__aeabi_dmul>
 800a312:	3601      	adds	r6, #1
 800a314:	2301      	movs	r3, #1
 800a316:	1064      	asrs	r4, r4, #1
 800a318:	3508      	adds	r5, #8
 800a31a:	e73f      	b.n	800a19c <_dtoa_r+0x394>
 800a31c:	2602      	movs	r6, #2
 800a31e:	e742      	b.n	800a1a6 <_dtoa_r+0x39e>
 800a320:	9c07      	ldr	r4, [sp, #28]
 800a322:	9704      	str	r7, [sp, #16]
 800a324:	e761      	b.n	800a1ea <_dtoa_r+0x3e2>
 800a326:	4b27      	ldr	r3, [pc, #156]	@ (800a3c4 <_dtoa_r+0x5bc>)
 800a328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a32a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a32e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a332:	4454      	add	r4, sl
 800a334:	2900      	cmp	r1, #0
 800a336:	d053      	beq.n	800a3e0 <_dtoa_r+0x5d8>
 800a338:	4928      	ldr	r1, [pc, #160]	@ (800a3dc <_dtoa_r+0x5d4>)
 800a33a:	2000      	movs	r0, #0
 800a33c:	f7f6 fa96 	bl	800086c <__aeabi_ddiv>
 800a340:	4633      	mov	r3, r6
 800a342:	462a      	mov	r2, r5
 800a344:	f7f5 ffb0 	bl	80002a8 <__aeabi_dsub>
 800a348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a34c:	4656      	mov	r6, sl
 800a34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a352:	f7f6 fc11 	bl	8000b78 <__aeabi_d2iz>
 800a356:	4605      	mov	r5, r0
 800a358:	f7f6 f8f4 	bl	8000544 <__aeabi_i2d>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a364:	f7f5 ffa0 	bl	80002a8 <__aeabi_dsub>
 800a368:	3530      	adds	r5, #48	@ 0x30
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a372:	f806 5b01 	strb.w	r5, [r6], #1
 800a376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a37a:	f7f6 fbbf 	bl	8000afc <__aeabi_dcmplt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d171      	bne.n	800a466 <_dtoa_r+0x65e>
 800a382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a386:	4911      	ldr	r1, [pc, #68]	@ (800a3cc <_dtoa_r+0x5c4>)
 800a388:	2000      	movs	r0, #0
 800a38a:	f7f5 ff8d 	bl	80002a8 <__aeabi_dsub>
 800a38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a392:	f7f6 fbb3 	bl	8000afc <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f040 8095 	bne.w	800a4c6 <_dtoa_r+0x6be>
 800a39c:	42a6      	cmp	r6, r4
 800a39e:	f43f af50 	beq.w	800a242 <_dtoa_r+0x43a>
 800a3a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d0 <_dtoa_r+0x5c8>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f7f6 f935 	bl	8000618 <__aeabi_dmul>
 800a3ae:	4b08      	ldr	r3, [pc, #32]	@ (800a3d0 <_dtoa_r+0x5c8>)
 800a3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ba:	f7f6 f92d 	bl	8000618 <__aeabi_dmul>
 800a3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c2:	e7c4      	b.n	800a34e <_dtoa_r+0x546>
 800a3c4:	0800bc20 	.word	0x0800bc20
 800a3c8:	0800bbf8 	.word	0x0800bbf8
 800a3cc:	3ff00000 	.word	0x3ff00000
 800a3d0:	40240000 	.word	0x40240000
 800a3d4:	401c0000 	.word	0x401c0000
 800a3d8:	40140000 	.word	0x40140000
 800a3dc:	3fe00000 	.word	0x3fe00000
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7f6 f918 	bl	8000618 <__aeabi_dmul>
 800a3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800a3ee:	4656      	mov	r6, sl
 800a3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f4:	f7f6 fbc0 	bl	8000b78 <__aeabi_d2iz>
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	f7f6 f8a3 	bl	8000544 <__aeabi_i2d>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a406:	f7f5 ff4f 	bl	80002a8 <__aeabi_dsub>
 800a40a:	3530      	adds	r5, #48	@ 0x30
 800a40c:	f806 5b01 	strb.w	r5, [r6], #1
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	42a6      	cmp	r6, r4
 800a416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a41a:	f04f 0200 	mov.w	r2, #0
 800a41e:	d124      	bne.n	800a46a <_dtoa_r+0x662>
 800a420:	4bac      	ldr	r3, [pc, #688]	@ (800a6d4 <_dtoa_r+0x8cc>)
 800a422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a426:	f7f5 ff41 	bl	80002ac <__adddf3>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a432:	f7f6 fb81 	bl	8000b38 <__aeabi_dcmpgt>
 800a436:	2800      	cmp	r0, #0
 800a438:	d145      	bne.n	800a4c6 <_dtoa_r+0x6be>
 800a43a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a43e:	49a5      	ldr	r1, [pc, #660]	@ (800a6d4 <_dtoa_r+0x8cc>)
 800a440:	2000      	movs	r0, #0
 800a442:	f7f5 ff31 	bl	80002a8 <__aeabi_dsub>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44e:	f7f6 fb55 	bl	8000afc <__aeabi_dcmplt>
 800a452:	2800      	cmp	r0, #0
 800a454:	f43f aef5 	beq.w	800a242 <_dtoa_r+0x43a>
 800a458:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a45a:	1e73      	subs	r3, r6, #1
 800a45c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a45e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a462:	2b30      	cmp	r3, #48	@ 0x30
 800a464:	d0f8      	beq.n	800a458 <_dtoa_r+0x650>
 800a466:	9f04      	ldr	r7, [sp, #16]
 800a468:	e73e      	b.n	800a2e8 <_dtoa_r+0x4e0>
 800a46a:	4b9b      	ldr	r3, [pc, #620]	@ (800a6d8 <_dtoa_r+0x8d0>)
 800a46c:	f7f6 f8d4 	bl	8000618 <__aeabi_dmul>
 800a470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a474:	e7bc      	b.n	800a3f0 <_dtoa_r+0x5e8>
 800a476:	d10c      	bne.n	800a492 <_dtoa_r+0x68a>
 800a478:	4b98      	ldr	r3, [pc, #608]	@ (800a6dc <_dtoa_r+0x8d4>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a480:	f7f6 f8ca 	bl	8000618 <__aeabi_dmul>
 800a484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a488:	f7f6 fb4c 	bl	8000b24 <__aeabi_dcmpge>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f000 8157 	beq.w	800a740 <_dtoa_r+0x938>
 800a492:	2400      	movs	r4, #0
 800a494:	4625      	mov	r5, r4
 800a496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a498:	43db      	mvns	r3, r3
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	4656      	mov	r6, sl
 800a49e:	2700      	movs	r7, #0
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	4658      	mov	r0, fp
 800a4a4:	f000 fbb4 	bl	800ac10 <_Bfree>
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	d0dc      	beq.n	800a466 <_dtoa_r+0x65e>
 800a4ac:	b12f      	cbz	r7, 800a4ba <_dtoa_r+0x6b2>
 800a4ae:	42af      	cmp	r7, r5
 800a4b0:	d003      	beq.n	800a4ba <_dtoa_r+0x6b2>
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	4658      	mov	r0, fp
 800a4b6:	f000 fbab 	bl	800ac10 <_Bfree>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4658      	mov	r0, fp
 800a4be:	f000 fba7 	bl	800ac10 <_Bfree>
 800a4c2:	e7d0      	b.n	800a466 <_dtoa_r+0x65e>
 800a4c4:	9704      	str	r7, [sp, #16]
 800a4c6:	4633      	mov	r3, r6
 800a4c8:	461e      	mov	r6, r3
 800a4ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ce:	2a39      	cmp	r2, #57	@ 0x39
 800a4d0:	d107      	bne.n	800a4e2 <_dtoa_r+0x6da>
 800a4d2:	459a      	cmp	sl, r3
 800a4d4:	d1f8      	bne.n	800a4c8 <_dtoa_r+0x6c0>
 800a4d6:	9a04      	ldr	r2, [sp, #16]
 800a4d8:	3201      	adds	r2, #1
 800a4da:	9204      	str	r2, [sp, #16]
 800a4dc:	2230      	movs	r2, #48	@ 0x30
 800a4de:	f88a 2000 	strb.w	r2, [sl]
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	3201      	adds	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e7bd      	b.n	800a466 <_dtoa_r+0x65e>
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a6d8 <_dtoa_r+0x8d0>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f7f6 f893 	bl	8000618 <__aeabi_dmul>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	f7f6 faf5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f aebb 	beq.w	800a27a <_dtoa_r+0x472>
 800a504:	e6f0      	b.n	800a2e8 <_dtoa_r+0x4e0>
 800a506:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a508:	2a00      	cmp	r2, #0
 800a50a:	f000 80db 	beq.w	800a6c4 <_dtoa_r+0x8bc>
 800a50e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a510:	2a01      	cmp	r2, #1
 800a512:	f300 80bf 	bgt.w	800a694 <_dtoa_r+0x88c>
 800a516:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a518:	2a00      	cmp	r2, #0
 800a51a:	f000 80b7 	beq.w	800a68c <_dtoa_r+0x884>
 800a51e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a522:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a524:	4646      	mov	r6, r8
 800a526:	9a08      	ldr	r2, [sp, #32]
 800a528:	2101      	movs	r1, #1
 800a52a:	441a      	add	r2, r3
 800a52c:	4658      	mov	r0, fp
 800a52e:	4498      	add	r8, r3
 800a530:	9208      	str	r2, [sp, #32]
 800a532:	f000 fc21 	bl	800ad78 <__i2b>
 800a536:	4605      	mov	r5, r0
 800a538:	b15e      	cbz	r6, 800a552 <_dtoa_r+0x74a>
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	dd08      	ble.n	800a552 <_dtoa_r+0x74a>
 800a540:	42b3      	cmp	r3, r6
 800a542:	9a08      	ldr	r2, [sp, #32]
 800a544:	bfa8      	it	ge
 800a546:	4633      	movge	r3, r6
 800a548:	eba8 0803 	sub.w	r8, r8, r3
 800a54c:	1af6      	subs	r6, r6, r3
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	9308      	str	r3, [sp, #32]
 800a552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a554:	b1f3      	cbz	r3, 800a594 <_dtoa_r+0x78c>
 800a556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80b7 	beq.w	800a6cc <_dtoa_r+0x8c4>
 800a55e:	b18c      	cbz	r4, 800a584 <_dtoa_r+0x77c>
 800a560:	4629      	mov	r1, r5
 800a562:	4622      	mov	r2, r4
 800a564:	4658      	mov	r0, fp
 800a566:	f000 fcc7 	bl	800aef8 <__pow5mult>
 800a56a:	464a      	mov	r2, r9
 800a56c:	4601      	mov	r1, r0
 800a56e:	4605      	mov	r5, r0
 800a570:	4658      	mov	r0, fp
 800a572:	f000 fc17 	bl	800ada4 <__multiply>
 800a576:	4649      	mov	r1, r9
 800a578:	9004      	str	r0, [sp, #16]
 800a57a:	4658      	mov	r0, fp
 800a57c:	f000 fb48 	bl	800ac10 <_Bfree>
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	4699      	mov	r9, r3
 800a584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a586:	1b1a      	subs	r2, r3, r4
 800a588:	d004      	beq.n	800a594 <_dtoa_r+0x78c>
 800a58a:	4649      	mov	r1, r9
 800a58c:	4658      	mov	r0, fp
 800a58e:	f000 fcb3 	bl	800aef8 <__pow5mult>
 800a592:	4681      	mov	r9, r0
 800a594:	2101      	movs	r1, #1
 800a596:	4658      	mov	r0, fp
 800a598:	f000 fbee 	bl	800ad78 <__i2b>
 800a59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 81cf 	beq.w	800a944 <_dtoa_r+0xb3c>
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	f000 fca4 	bl	800aef8 <__pow5mult>
 800a5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	f300 8095 	bgt.w	800a6e4 <_dtoa_r+0x8dc>
 800a5ba:	9b02      	ldr	r3, [sp, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 8087 	bne.w	800a6d0 <_dtoa_r+0x8c8>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 8089 	bne.w	800a6e0 <_dtoa_r+0x8d8>
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5d4:	0d1b      	lsrs	r3, r3, #20
 800a5d6:	051b      	lsls	r3, r3, #20
 800a5d8:	b12b      	cbz	r3, 800a5e6 <_dtoa_r+0x7de>
 800a5da:	9b08      	ldr	r3, [sp, #32]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	9308      	str	r3, [sp, #32]
 800a5e0:	f108 0801 	add.w	r8, r8, #1
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 81b0 	beq.w	800a950 <_dtoa_r+0xb48>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5f6:	6918      	ldr	r0, [r3, #16]
 800a5f8:	f000 fb72 	bl	800ace0 <__hi0bits>
 800a5fc:	f1c0 0020 	rsb	r0, r0, #32
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	4418      	add	r0, r3
 800a604:	f010 001f 	ands.w	r0, r0, #31
 800a608:	d077      	beq.n	800a6fa <_dtoa_r+0x8f2>
 800a60a:	f1c0 0320 	rsb	r3, r0, #32
 800a60e:	2b04      	cmp	r3, #4
 800a610:	dd6b      	ble.n	800a6ea <_dtoa_r+0x8e2>
 800a612:	9b08      	ldr	r3, [sp, #32]
 800a614:	f1c0 001c 	rsb	r0, r0, #28
 800a618:	4403      	add	r3, r0
 800a61a:	4480      	add	r8, r0
 800a61c:	4406      	add	r6, r0
 800a61e:	9308      	str	r3, [sp, #32]
 800a620:	f1b8 0f00 	cmp.w	r8, #0
 800a624:	dd05      	ble.n	800a632 <_dtoa_r+0x82a>
 800a626:	4649      	mov	r1, r9
 800a628:	4642      	mov	r2, r8
 800a62a:	4658      	mov	r0, fp
 800a62c:	f000 fcbe 	bl	800afac <__lshift>
 800a630:	4681      	mov	r9, r0
 800a632:	9b08      	ldr	r3, [sp, #32]
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd05      	ble.n	800a644 <_dtoa_r+0x83c>
 800a638:	4621      	mov	r1, r4
 800a63a:	461a      	mov	r2, r3
 800a63c:	4658      	mov	r0, fp
 800a63e:	f000 fcb5 	bl	800afac <__lshift>
 800a642:	4604      	mov	r4, r0
 800a644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a646:	2b00      	cmp	r3, #0
 800a648:	d059      	beq.n	800a6fe <_dtoa_r+0x8f6>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4648      	mov	r0, r9
 800a64e:	f000 fd19 	bl	800b084 <__mcmp>
 800a652:	2800      	cmp	r0, #0
 800a654:	da53      	bge.n	800a6fe <_dtoa_r+0x8f6>
 800a656:	1e7b      	subs	r3, r7, #1
 800a658:	9304      	str	r3, [sp, #16]
 800a65a:	4649      	mov	r1, r9
 800a65c:	2300      	movs	r3, #0
 800a65e:	220a      	movs	r2, #10
 800a660:	4658      	mov	r0, fp
 800a662:	f000 faf7 	bl	800ac54 <__multadd>
 800a666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a668:	4681      	mov	r9, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 8172 	beq.w	800a954 <_dtoa_r+0xb4c>
 800a670:	2300      	movs	r3, #0
 800a672:	4629      	mov	r1, r5
 800a674:	220a      	movs	r2, #10
 800a676:	4658      	mov	r0, fp
 800a678:	f000 faec 	bl	800ac54 <__multadd>
 800a67c:	9b00      	ldr	r3, [sp, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	4605      	mov	r5, r0
 800a682:	dc67      	bgt.n	800a754 <_dtoa_r+0x94c>
 800a684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a686:	2b02      	cmp	r3, #2
 800a688:	dc41      	bgt.n	800a70e <_dtoa_r+0x906>
 800a68a:	e063      	b.n	800a754 <_dtoa_r+0x94c>
 800a68c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a68e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a692:	e746      	b.n	800a522 <_dtoa_r+0x71a>
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	1e5c      	subs	r4, r3, #1
 800a698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	bfbf      	itttt	lt
 800a69e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6a4:	1ae3      	sublt	r3, r4, r3
 800a6a6:	bfb4      	ite	lt
 800a6a8:	18d2      	addlt	r2, r2, r3
 800a6aa:	1b1c      	subge	r4, r3, r4
 800a6ac:	9b07      	ldr	r3, [sp, #28]
 800a6ae:	bfbc      	itt	lt
 800a6b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a6b2:	2400      	movlt	r4, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bfb5      	itete	lt
 800a6b8:	eba8 0603 	sublt.w	r6, r8, r3
 800a6bc:	9b07      	ldrge	r3, [sp, #28]
 800a6be:	2300      	movlt	r3, #0
 800a6c0:	4646      	movge	r6, r8
 800a6c2:	e730      	b.n	800a526 <_dtoa_r+0x71e>
 800a6c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6c8:	4646      	mov	r6, r8
 800a6ca:	e735      	b.n	800a538 <_dtoa_r+0x730>
 800a6cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6ce:	e75c      	b.n	800a58a <_dtoa_r+0x782>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e788      	b.n	800a5e6 <_dtoa_r+0x7de>
 800a6d4:	3fe00000 	.word	0x3fe00000
 800a6d8:	40240000 	.word	0x40240000
 800a6dc:	40140000 	.word	0x40140000
 800a6e0:	9b02      	ldr	r3, [sp, #8]
 800a6e2:	e780      	b.n	800a5e6 <_dtoa_r+0x7de>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e8:	e782      	b.n	800a5f0 <_dtoa_r+0x7e8>
 800a6ea:	d099      	beq.n	800a620 <_dtoa_r+0x818>
 800a6ec:	9a08      	ldr	r2, [sp, #32]
 800a6ee:	331c      	adds	r3, #28
 800a6f0:	441a      	add	r2, r3
 800a6f2:	4498      	add	r8, r3
 800a6f4:	441e      	add	r6, r3
 800a6f6:	9208      	str	r2, [sp, #32]
 800a6f8:	e792      	b.n	800a620 <_dtoa_r+0x818>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	e7f6      	b.n	800a6ec <_dtoa_r+0x8e4>
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	9704      	str	r7, [sp, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dc20      	bgt.n	800a748 <_dtoa_r+0x940>
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	dd1e      	ble.n	800a74c <_dtoa_r+0x944>
 800a70e:	9b00      	ldr	r3, [sp, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f47f aec0 	bne.w	800a496 <_dtoa_r+0x68e>
 800a716:	4621      	mov	r1, r4
 800a718:	2205      	movs	r2, #5
 800a71a:	4658      	mov	r0, fp
 800a71c:	f000 fa9a 	bl	800ac54 <__multadd>
 800a720:	4601      	mov	r1, r0
 800a722:	4604      	mov	r4, r0
 800a724:	4648      	mov	r0, r9
 800a726:	f000 fcad 	bl	800b084 <__mcmp>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f77f aeb3 	ble.w	800a496 <_dtoa_r+0x68e>
 800a730:	4656      	mov	r6, sl
 800a732:	2331      	movs	r3, #49	@ 0x31
 800a734:	f806 3b01 	strb.w	r3, [r6], #1
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	e6ae      	b.n	800a49e <_dtoa_r+0x696>
 800a740:	9c07      	ldr	r4, [sp, #28]
 800a742:	9704      	str	r7, [sp, #16]
 800a744:	4625      	mov	r5, r4
 800a746:	e7f3      	b.n	800a730 <_dtoa_r+0x928>
 800a748:	9b07      	ldr	r3, [sp, #28]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 8104 	beq.w	800a95c <_dtoa_r+0xb54>
 800a754:	2e00      	cmp	r6, #0
 800a756:	dd05      	ble.n	800a764 <_dtoa_r+0x95c>
 800a758:	4629      	mov	r1, r5
 800a75a:	4632      	mov	r2, r6
 800a75c:	4658      	mov	r0, fp
 800a75e:	f000 fc25 	bl	800afac <__lshift>
 800a762:	4605      	mov	r5, r0
 800a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d05a      	beq.n	800a820 <_dtoa_r+0xa18>
 800a76a:	6869      	ldr	r1, [r5, #4]
 800a76c:	4658      	mov	r0, fp
 800a76e:	f000 fa0f 	bl	800ab90 <_Balloc>
 800a772:	4606      	mov	r6, r0
 800a774:	b928      	cbnz	r0, 800a782 <_dtoa_r+0x97a>
 800a776:	4b84      	ldr	r3, [pc, #528]	@ (800a988 <_dtoa_r+0xb80>)
 800a778:	4602      	mov	r2, r0
 800a77a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a77e:	f7ff bb5a 	b.w	8009e36 <_dtoa_r+0x2e>
 800a782:	692a      	ldr	r2, [r5, #16]
 800a784:	3202      	adds	r2, #2
 800a786:	0092      	lsls	r2, r2, #2
 800a788:	f105 010c 	add.w	r1, r5, #12
 800a78c:	300c      	adds	r0, #12
 800a78e:	f001 f813 	bl	800b7b8 <memcpy>
 800a792:	2201      	movs	r2, #1
 800a794:	4631      	mov	r1, r6
 800a796:	4658      	mov	r0, fp
 800a798:	f000 fc08 	bl	800afac <__lshift>
 800a79c:	f10a 0301 	add.w	r3, sl, #1
 800a7a0:	9307      	str	r3, [sp, #28]
 800a7a2:	9b00      	ldr	r3, [sp, #0]
 800a7a4:	4453      	add	r3, sl
 800a7a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	462f      	mov	r7, r5
 800a7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	9b07      	ldr	r3, [sp, #28]
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	4648      	mov	r0, r9
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f7ff fa98 	bl	8009cf2 <quorem>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7ca:	4648      	mov	r0, r9
 800a7cc:	f000 fc5a 	bl	800b084 <__mcmp>
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	9008      	str	r0, [sp, #32]
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	f000 fc70 	bl	800b0bc <__mdiff>
 800a7dc:	68c2      	ldr	r2, [r0, #12]
 800a7de:	4606      	mov	r6, r0
 800a7e0:	bb02      	cbnz	r2, 800a824 <_dtoa_r+0xa1c>
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	f000 fc4d 	bl	800b084 <__mcmp>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7f2:	f000 fa0d 	bl	800ac10 <_Bfree>
 800a7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7fa:	9e07      	ldr	r6, [sp, #28]
 800a7fc:	ea43 0102 	orr.w	r1, r3, r2
 800a800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a802:	4319      	orrs	r1, r3
 800a804:	d110      	bne.n	800a828 <_dtoa_r+0xa20>
 800a806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a80a:	d029      	beq.n	800a860 <_dtoa_r+0xa58>
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dd02      	ble.n	800a818 <_dtoa_r+0xa10>
 800a812:	9b02      	ldr	r3, [sp, #8]
 800a814:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	f883 8000 	strb.w	r8, [r3]
 800a81e:	e63f      	b.n	800a4a0 <_dtoa_r+0x698>
 800a820:	4628      	mov	r0, r5
 800a822:	e7bb      	b.n	800a79c <_dtoa_r+0x994>
 800a824:	2201      	movs	r2, #1
 800a826:	e7e1      	b.n	800a7ec <_dtoa_r+0x9e4>
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	db04      	blt.n	800a838 <_dtoa_r+0xa30>
 800a82e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a830:	430b      	orrs	r3, r1
 800a832:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a834:	430b      	orrs	r3, r1
 800a836:	d120      	bne.n	800a87a <_dtoa_r+0xa72>
 800a838:	2a00      	cmp	r2, #0
 800a83a:	dded      	ble.n	800a818 <_dtoa_r+0xa10>
 800a83c:	4649      	mov	r1, r9
 800a83e:	2201      	movs	r2, #1
 800a840:	4658      	mov	r0, fp
 800a842:	f000 fbb3 	bl	800afac <__lshift>
 800a846:	4621      	mov	r1, r4
 800a848:	4681      	mov	r9, r0
 800a84a:	f000 fc1b 	bl	800b084 <__mcmp>
 800a84e:	2800      	cmp	r0, #0
 800a850:	dc03      	bgt.n	800a85a <_dtoa_r+0xa52>
 800a852:	d1e1      	bne.n	800a818 <_dtoa_r+0xa10>
 800a854:	f018 0f01 	tst.w	r8, #1
 800a858:	d0de      	beq.n	800a818 <_dtoa_r+0xa10>
 800a85a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a85e:	d1d8      	bne.n	800a812 <_dtoa_r+0xa0a>
 800a860:	9a00      	ldr	r2, [sp, #0]
 800a862:	2339      	movs	r3, #57	@ 0x39
 800a864:	7013      	strb	r3, [r2, #0]
 800a866:	4633      	mov	r3, r6
 800a868:	461e      	mov	r6, r3
 800a86a:	3b01      	subs	r3, #1
 800a86c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a870:	2a39      	cmp	r2, #57	@ 0x39
 800a872:	d052      	beq.n	800a91a <_dtoa_r+0xb12>
 800a874:	3201      	adds	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	e612      	b.n	800a4a0 <_dtoa_r+0x698>
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	dd07      	ble.n	800a88e <_dtoa_r+0xa86>
 800a87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a882:	d0ed      	beq.n	800a860 <_dtoa_r+0xa58>
 800a884:	9a00      	ldr	r2, [sp, #0]
 800a886:	f108 0301 	add.w	r3, r8, #1
 800a88a:	7013      	strb	r3, [r2, #0]
 800a88c:	e608      	b.n	800a4a0 <_dtoa_r+0x698>
 800a88e:	9b07      	ldr	r3, [sp, #28]
 800a890:	9a07      	ldr	r2, [sp, #28]
 800a892:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a898:	4293      	cmp	r3, r2
 800a89a:	d028      	beq.n	800a8ee <_dtoa_r+0xae6>
 800a89c:	4649      	mov	r1, r9
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	4658      	mov	r0, fp
 800a8a4:	f000 f9d6 	bl	800ac54 <__multadd>
 800a8a8:	42af      	cmp	r7, r5
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	f04f 020a 	mov.w	r2, #10
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	d107      	bne.n	800a8ca <_dtoa_r+0xac2>
 800a8ba:	f000 f9cb 	bl	800ac54 <__multadd>
 800a8be:	4607      	mov	r7, r0
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	9b07      	ldr	r3, [sp, #28]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	e774      	b.n	800a7b4 <_dtoa_r+0x9ac>
 800a8ca:	f000 f9c3 	bl	800ac54 <__multadd>
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	4658      	mov	r0, fp
 800a8d8:	f000 f9bc 	bl	800ac54 <__multadd>
 800a8dc:	4605      	mov	r5, r0
 800a8de:	e7f0      	b.n	800a8c2 <_dtoa_r+0xaba>
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfcc      	ite	gt
 800a8e6:	461e      	movgt	r6, r3
 800a8e8:	2601      	movle	r6, #1
 800a8ea:	4456      	add	r6, sl
 800a8ec:	2700      	movs	r7, #0
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fb5a 	bl	800afac <__lshift>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4681      	mov	r9, r0
 800a8fc:	f000 fbc2 	bl	800b084 <__mcmp>
 800a900:	2800      	cmp	r0, #0
 800a902:	dcb0      	bgt.n	800a866 <_dtoa_r+0xa5e>
 800a904:	d102      	bne.n	800a90c <_dtoa_r+0xb04>
 800a906:	f018 0f01 	tst.w	r8, #1
 800a90a:	d1ac      	bne.n	800a866 <_dtoa_r+0xa5e>
 800a90c:	4633      	mov	r3, r6
 800a90e:	461e      	mov	r6, r3
 800a910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a914:	2a30      	cmp	r2, #48	@ 0x30
 800a916:	d0fa      	beq.n	800a90e <_dtoa_r+0xb06>
 800a918:	e5c2      	b.n	800a4a0 <_dtoa_r+0x698>
 800a91a:	459a      	cmp	sl, r3
 800a91c:	d1a4      	bne.n	800a868 <_dtoa_r+0xa60>
 800a91e:	9b04      	ldr	r3, [sp, #16]
 800a920:	3301      	adds	r3, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	2331      	movs	r3, #49	@ 0x31
 800a926:	f88a 3000 	strb.w	r3, [sl]
 800a92a:	e5b9      	b.n	800a4a0 <_dtoa_r+0x698>
 800a92c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a92e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a98c <_dtoa_r+0xb84>
 800a932:	b11b      	cbz	r3, 800a93c <_dtoa_r+0xb34>
 800a934:	f10a 0308 	add.w	r3, sl, #8
 800a938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	4650      	mov	r0, sl
 800a93e:	b019      	add	sp, #100	@ 0x64
 800a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a946:	2b01      	cmp	r3, #1
 800a948:	f77f ae37 	ble.w	800a5ba <_dtoa_r+0x7b2>
 800a94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a950:	2001      	movs	r0, #1
 800a952:	e655      	b.n	800a600 <_dtoa_r+0x7f8>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f77f aed6 	ble.w	800a708 <_dtoa_r+0x900>
 800a95c:	4656      	mov	r6, sl
 800a95e:	4621      	mov	r1, r4
 800a960:	4648      	mov	r0, r9
 800a962:	f7ff f9c6 	bl	8009cf2 <quorem>
 800a966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a96a:	f806 8b01 	strb.w	r8, [r6], #1
 800a96e:	9b00      	ldr	r3, [sp, #0]
 800a970:	eba6 020a 	sub.w	r2, r6, sl
 800a974:	4293      	cmp	r3, r2
 800a976:	ddb3      	ble.n	800a8e0 <_dtoa_r+0xad8>
 800a978:	4649      	mov	r1, r9
 800a97a:	2300      	movs	r3, #0
 800a97c:	220a      	movs	r2, #10
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 f968 	bl	800ac54 <__multadd>
 800a984:	4681      	mov	r9, r0
 800a986:	e7ea      	b.n	800a95e <_dtoa_r+0xb56>
 800a988:	0800bb80 	.word	0x0800bb80
 800a98c:	0800bb04 	.word	0x0800bb04

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d041      	beq.n	800aa1c <_free_r+0x8c>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f000 f8e8 	bl	800ab78 <__malloc_lock>
 800a9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa20 <_free_r+0x90>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x2c>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b8:	f000 b8e4 	b.w	800ab84 <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x42>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x1e>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x4c>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x42>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1850      	adds	r0, r2, r1
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x6c>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	1850      	adds	r0, r2, r1
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x22>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	6053      	str	r3, [r2, #4]
 800a9f6:	4408      	add	r0, r1
 800a9f8:	6010      	str	r0, [r2, #0]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x22>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x74>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x22>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	1821      	adds	r1, r4, r0
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf04      	itt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	bf04      	itt	eq
 800aa14:	1809      	addeq	r1, r1, r0
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	6054      	str	r4, [r2, #4]
 800aa1a:	e7ca      	b.n	800a9b2 <_free_r+0x22>
 800aa1c:	bd38      	pop	{r3, r4, r5, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000f94 	.word	0x20000f94

0800aa24 <malloc>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	@ (800aa30 <malloc+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f000 b825 	b.w	800aa78 <_malloc_r>
 800aa2e:	bf00      	nop
 800aa30:	20000194 	.word	0x20000194

0800aa34 <sbrk_aligned>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4e0f      	ldr	r6, [pc, #60]	@ (800aa74 <sbrk_aligned+0x40>)
 800aa38:	460c      	mov	r4, r1
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	b911      	cbnz	r1, 800aa46 <sbrk_aligned+0x12>
 800aa40:	f000 feaa 	bl	800b798 <_sbrk_r>
 800aa44:	6030      	str	r0, [r6, #0]
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 fea5 	bl	800b798 <_sbrk_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d103      	bne.n	800aa5a <sbrk_aligned+0x26>
 800aa52:	f04f 34ff 	mov.w	r4, #4294967295
 800aa56:	4620      	mov	r0, r4
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d0f8      	beq.n	800aa56 <sbrk_aligned+0x22>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 fe96 	bl	800b798 <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d1f2      	bne.n	800aa56 <sbrk_aligned+0x22>
 800aa70:	e7ef      	b.n	800aa52 <sbrk_aligned+0x1e>
 800aa72:	bf00      	nop
 800aa74:	20000f90 	.word	0x20000f90

0800aa78 <_malloc_r>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	1ccd      	adds	r5, r1, #3
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	db01      	blt.n	800aa94 <_malloc_r+0x1c>
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d904      	bls.n	800aa9e <_malloc_r+0x26>
 800aa94:	230c      	movs	r3, #12
 800aa96:	6033      	str	r3, [r6, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab74 <_malloc_r+0xfc>
 800aaa2:	f000 f869 	bl	800ab78 <__malloc_lock>
 800aaa6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaaa:	461c      	mov	r4, r3
 800aaac:	bb44      	cbnz	r4, 800ab00 <_malloc_r+0x88>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff ffbf 	bl	800aa34 <sbrk_aligned>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	4604      	mov	r4, r0
 800aaba:	d158      	bne.n	800ab6e <_malloc_r+0xf6>
 800aabc:	f8d8 4000 	ldr.w	r4, [r8]
 800aac0:	4627      	mov	r7, r4
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	d143      	bne.n	800ab4e <_malloc_r+0xd6>
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d04b      	beq.n	800ab62 <_malloc_r+0xea>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	4639      	mov	r1, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	eb04 0903 	add.w	r9, r4, r3
 800aad4:	f000 fe60 	bl	800b798 <_sbrk_r>
 800aad8:	4581      	cmp	r9, r0
 800aada:	d142      	bne.n	800ab62 <_malloc_r+0xea>
 800aadc:	6821      	ldr	r1, [r4, #0]
 800aade:	1a6d      	subs	r5, r5, r1
 800aae0:	4629      	mov	r1, r5
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffa6 	bl	800aa34 <sbrk_aligned>
 800aae8:	3001      	adds	r0, #1
 800aaea:	d03a      	beq.n	800ab62 <_malloc_r+0xea>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	442b      	add	r3, r5
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	bb62      	cbnz	r2, 800ab54 <_malloc_r+0xdc>
 800aafa:	f8c8 7000 	str.w	r7, [r8]
 800aafe:	e00f      	b.n	800ab20 <_malloc_r+0xa8>
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	1b52      	subs	r2, r2, r5
 800ab04:	d420      	bmi.n	800ab48 <_malloc_r+0xd0>
 800ab06:	2a0b      	cmp	r2, #11
 800ab08:	d917      	bls.n	800ab3a <_malloc_r+0xc2>
 800ab0a:	1961      	adds	r1, r4, r5
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	6025      	str	r5, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	6059      	strne	r1, [r3, #4]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	bf08      	it	eq
 800ab18:	f8c8 1000 	streq.w	r1, [r8]
 800ab1c:	5162      	str	r2, [r4, r5]
 800ab1e:	604b      	str	r3, [r1, #4]
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 f82f 	bl	800ab84 <__malloc_unlock>
 800ab26:	f104 000b 	add.w	r0, r4, #11
 800ab2a:	1d23      	adds	r3, r4, #4
 800ab2c:	f020 0007 	bic.w	r0, r0, #7
 800ab30:	1ac2      	subs	r2, r0, r3
 800ab32:	bf1c      	itt	ne
 800ab34:	1a1b      	subne	r3, r3, r0
 800ab36:	50a3      	strne	r3, [r4, r2]
 800ab38:	e7af      	b.n	800aa9a <_malloc_r+0x22>
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	bf0c      	ite	eq
 800ab40:	f8c8 2000 	streq.w	r2, [r8]
 800ab44:	605a      	strne	r2, [r3, #4]
 800ab46:	e7eb      	b.n	800ab20 <_malloc_r+0xa8>
 800ab48:	4623      	mov	r3, r4
 800ab4a:	6864      	ldr	r4, [r4, #4]
 800ab4c:	e7ae      	b.n	800aaac <_malloc_r+0x34>
 800ab4e:	463c      	mov	r4, r7
 800ab50:	687f      	ldr	r7, [r7, #4]
 800ab52:	e7b6      	b.n	800aac2 <_malloc_r+0x4a>
 800ab54:	461a      	mov	r2, r3
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d1fb      	bne.n	800ab54 <_malloc_r+0xdc>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6053      	str	r3, [r2, #4]
 800ab60:	e7de      	b.n	800ab20 <_malloc_r+0xa8>
 800ab62:	230c      	movs	r3, #12
 800ab64:	6033      	str	r3, [r6, #0]
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f80c 	bl	800ab84 <__malloc_unlock>
 800ab6c:	e794      	b.n	800aa98 <_malloc_r+0x20>
 800ab6e:	6005      	str	r5, [r0, #0]
 800ab70:	e7d6      	b.n	800ab20 <_malloc_r+0xa8>
 800ab72:	bf00      	nop
 800ab74:	20000f94 	.word	0x20000f94

0800ab78 <__malloc_lock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__malloc_lock+0x8>)
 800ab7a:	f7ff b8b8 	b.w	8009cee <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20000f8c 	.word	0x20000f8c

0800ab84 <__malloc_unlock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__malloc_unlock+0x8>)
 800ab86:	f7ff b8b3 	b.w	8009cf0 <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20000f8c 	.word	0x20000f8c

0800ab90 <_Balloc>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	69c6      	ldr	r6, [r0, #28]
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	b976      	cbnz	r6, 800abb8 <_Balloc+0x28>
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f7ff ff42 	bl	800aa24 <malloc>
 800aba0:	4602      	mov	r2, r0
 800aba2:	61e0      	str	r0, [r4, #28]
 800aba4:	b920      	cbnz	r0, 800abb0 <_Balloc+0x20>
 800aba6:	4b18      	ldr	r3, [pc, #96]	@ (800ac08 <_Balloc+0x78>)
 800aba8:	4818      	ldr	r0, [pc, #96]	@ (800ac0c <_Balloc+0x7c>)
 800abaa:	216b      	movs	r1, #107	@ 0x6b
 800abac:	f000 fe12 	bl	800b7d4 <__assert_func>
 800abb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb4:	6006      	str	r6, [r0, #0]
 800abb6:	60c6      	str	r6, [r0, #12]
 800abb8:	69e6      	ldr	r6, [r4, #28]
 800abba:	68f3      	ldr	r3, [r6, #12]
 800abbc:	b183      	cbz	r3, 800abe0 <_Balloc+0x50>
 800abbe:	69e3      	ldr	r3, [r4, #28]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abc6:	b9b8      	cbnz	r0, 800abf8 <_Balloc+0x68>
 800abc8:	2101      	movs	r1, #1
 800abca:	fa01 f605 	lsl.w	r6, r1, r5
 800abce:	1d72      	adds	r2, r6, #5
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fe1c 	bl	800b810 <_calloc_r>
 800abd8:	b160      	cbz	r0, 800abf4 <_Balloc+0x64>
 800abda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abde:	e00e      	b.n	800abfe <_Balloc+0x6e>
 800abe0:	2221      	movs	r2, #33	@ 0x21
 800abe2:	2104      	movs	r1, #4
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fe13 	bl	800b810 <_calloc_r>
 800abea:	69e3      	ldr	r3, [r4, #28]
 800abec:	60f0      	str	r0, [r6, #12]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1e4      	bne.n	800abbe <_Balloc+0x2e>
 800abf4:	2000      	movs	r0, #0
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	6802      	ldr	r2, [r0, #0]
 800abfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abfe:	2300      	movs	r3, #0
 800ac00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac04:	e7f7      	b.n	800abf6 <_Balloc+0x66>
 800ac06:	bf00      	nop
 800ac08:	0800bb11 	.word	0x0800bb11
 800ac0c:	0800bb91 	.word	0x0800bb91

0800ac10 <_Bfree>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	69c6      	ldr	r6, [r0, #28]
 800ac14:	4605      	mov	r5, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b976      	cbnz	r6, 800ac38 <_Bfree+0x28>
 800ac1a:	2010      	movs	r0, #16
 800ac1c:	f7ff ff02 	bl	800aa24 <malloc>
 800ac20:	4602      	mov	r2, r0
 800ac22:	61e8      	str	r0, [r5, #28]
 800ac24:	b920      	cbnz	r0, 800ac30 <_Bfree+0x20>
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <_Bfree+0x3c>)
 800ac28:	4809      	ldr	r0, [pc, #36]	@ (800ac50 <_Bfree+0x40>)
 800ac2a:	218f      	movs	r1, #143	@ 0x8f
 800ac2c:	f000 fdd2 	bl	800b7d4 <__assert_func>
 800ac30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac34:	6006      	str	r6, [r0, #0]
 800ac36:	60c6      	str	r6, [r0, #12]
 800ac38:	b13c      	cbz	r4, 800ac4a <_Bfree+0x3a>
 800ac3a:	69eb      	ldr	r3, [r5, #28]
 800ac3c:	6862      	ldr	r2, [r4, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac44:	6021      	str	r1, [r4, #0]
 800ac46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	0800bb11 	.word	0x0800bb11
 800ac50:	0800bb91 	.word	0x0800bb91

0800ac54 <__multadd>:
 800ac54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac58:	690d      	ldr	r5, [r1, #16]
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	461e      	mov	r6, r3
 800ac60:	f101 0c14 	add.w	ip, r1, #20
 800ac64:	2000      	movs	r0, #0
 800ac66:	f8dc 3000 	ldr.w	r3, [ip]
 800ac6a:	b299      	uxth	r1, r3
 800ac6c:	fb02 6101 	mla	r1, r2, r1, r6
 800ac70:	0c1e      	lsrs	r6, r3, #16
 800ac72:	0c0b      	lsrs	r3, r1, #16
 800ac74:	fb02 3306 	mla	r3, r2, r6, r3
 800ac78:	b289      	uxth	r1, r1
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac80:	4285      	cmp	r5, r0
 800ac82:	f84c 1b04 	str.w	r1, [ip], #4
 800ac86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac8a:	dcec      	bgt.n	800ac66 <__multadd+0x12>
 800ac8c:	b30e      	cbz	r6, 800acd2 <__multadd+0x7e>
 800ac8e:	68a3      	ldr	r3, [r4, #8]
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	dc19      	bgt.n	800acc8 <__multadd+0x74>
 800ac94:	6861      	ldr	r1, [r4, #4]
 800ac96:	4638      	mov	r0, r7
 800ac98:	3101      	adds	r1, #1
 800ac9a:	f7ff ff79 	bl	800ab90 <_Balloc>
 800ac9e:	4680      	mov	r8, r0
 800aca0:	b928      	cbnz	r0, 800acae <__multadd+0x5a>
 800aca2:	4602      	mov	r2, r0
 800aca4:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <__multadd+0x84>)
 800aca6:	480d      	ldr	r0, [pc, #52]	@ (800acdc <__multadd+0x88>)
 800aca8:	21ba      	movs	r1, #186	@ 0xba
 800acaa:	f000 fd93 	bl	800b7d4 <__assert_func>
 800acae:	6922      	ldr	r2, [r4, #16]
 800acb0:	3202      	adds	r2, #2
 800acb2:	f104 010c 	add.w	r1, r4, #12
 800acb6:	0092      	lsls	r2, r2, #2
 800acb8:	300c      	adds	r0, #12
 800acba:	f000 fd7d 	bl	800b7b8 <memcpy>
 800acbe:	4621      	mov	r1, r4
 800acc0:	4638      	mov	r0, r7
 800acc2:	f7ff ffa5 	bl	800ac10 <_Bfree>
 800acc6:	4644      	mov	r4, r8
 800acc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800accc:	3501      	adds	r5, #1
 800acce:	615e      	str	r6, [r3, #20]
 800acd0:	6125      	str	r5, [r4, #16]
 800acd2:	4620      	mov	r0, r4
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	0800bb80 	.word	0x0800bb80
 800acdc:	0800bb91 	.word	0x0800bb91

0800ace0 <__hi0bits>:
 800ace0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ace4:	4603      	mov	r3, r0
 800ace6:	bf36      	itet	cc
 800ace8:	0403      	lslcc	r3, r0, #16
 800acea:	2000      	movcs	r0, #0
 800acec:	2010      	movcc	r0, #16
 800acee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acf2:	bf3c      	itt	cc
 800acf4:	021b      	lslcc	r3, r3, #8
 800acf6:	3008      	addcc	r0, #8
 800acf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acfc:	bf3c      	itt	cc
 800acfe:	011b      	lslcc	r3, r3, #4
 800ad00:	3004      	addcc	r0, #4
 800ad02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad06:	bf3c      	itt	cc
 800ad08:	009b      	lslcc	r3, r3, #2
 800ad0a:	3002      	addcc	r0, #2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	db05      	blt.n	800ad1c <__hi0bits+0x3c>
 800ad10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad14:	f100 0001 	add.w	r0, r0, #1
 800ad18:	bf08      	it	eq
 800ad1a:	2020      	moveq	r0, #32
 800ad1c:	4770      	bx	lr

0800ad1e <__lo0bits>:
 800ad1e:	6803      	ldr	r3, [r0, #0]
 800ad20:	4602      	mov	r2, r0
 800ad22:	f013 0007 	ands.w	r0, r3, #7
 800ad26:	d00b      	beq.n	800ad40 <__lo0bits+0x22>
 800ad28:	07d9      	lsls	r1, r3, #31
 800ad2a:	d421      	bmi.n	800ad70 <__lo0bits+0x52>
 800ad2c:	0798      	lsls	r0, r3, #30
 800ad2e:	bf49      	itett	mi
 800ad30:	085b      	lsrmi	r3, r3, #1
 800ad32:	089b      	lsrpl	r3, r3, #2
 800ad34:	2001      	movmi	r0, #1
 800ad36:	6013      	strmi	r3, [r2, #0]
 800ad38:	bf5c      	itt	pl
 800ad3a:	6013      	strpl	r3, [r2, #0]
 800ad3c:	2002      	movpl	r0, #2
 800ad3e:	4770      	bx	lr
 800ad40:	b299      	uxth	r1, r3
 800ad42:	b909      	cbnz	r1, 800ad48 <__lo0bits+0x2a>
 800ad44:	0c1b      	lsrs	r3, r3, #16
 800ad46:	2010      	movs	r0, #16
 800ad48:	b2d9      	uxtb	r1, r3
 800ad4a:	b909      	cbnz	r1, 800ad50 <__lo0bits+0x32>
 800ad4c:	3008      	adds	r0, #8
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	0719      	lsls	r1, r3, #28
 800ad52:	bf04      	itt	eq
 800ad54:	091b      	lsreq	r3, r3, #4
 800ad56:	3004      	addeq	r0, #4
 800ad58:	0799      	lsls	r1, r3, #30
 800ad5a:	bf04      	itt	eq
 800ad5c:	089b      	lsreq	r3, r3, #2
 800ad5e:	3002      	addeq	r0, #2
 800ad60:	07d9      	lsls	r1, r3, #31
 800ad62:	d403      	bmi.n	800ad6c <__lo0bits+0x4e>
 800ad64:	085b      	lsrs	r3, r3, #1
 800ad66:	f100 0001 	add.w	r0, r0, #1
 800ad6a:	d003      	beq.n	800ad74 <__lo0bits+0x56>
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	4770      	bx	lr
 800ad70:	2000      	movs	r0, #0
 800ad72:	4770      	bx	lr
 800ad74:	2020      	movs	r0, #32
 800ad76:	4770      	bx	lr

0800ad78 <__i2b>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	f7ff ff07 	bl	800ab90 <_Balloc>
 800ad82:	4602      	mov	r2, r0
 800ad84:	b928      	cbnz	r0, 800ad92 <__i2b+0x1a>
 800ad86:	4b05      	ldr	r3, [pc, #20]	@ (800ad9c <__i2b+0x24>)
 800ad88:	4805      	ldr	r0, [pc, #20]	@ (800ada0 <__i2b+0x28>)
 800ad8a:	f240 1145 	movw	r1, #325	@ 0x145
 800ad8e:	f000 fd21 	bl	800b7d4 <__assert_func>
 800ad92:	2301      	movs	r3, #1
 800ad94:	6144      	str	r4, [r0, #20]
 800ad96:	6103      	str	r3, [r0, #16]
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800bb80 	.word	0x0800bb80
 800ada0:	0800bb91 	.word	0x0800bb91

0800ada4 <__multiply>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	4614      	mov	r4, r2
 800adaa:	690a      	ldr	r2, [r1, #16]
 800adac:	6923      	ldr	r3, [r4, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	bfa8      	it	ge
 800adb2:	4623      	movge	r3, r4
 800adb4:	460f      	mov	r7, r1
 800adb6:	bfa4      	itt	ge
 800adb8:	460c      	movge	r4, r1
 800adba:	461f      	movge	r7, r3
 800adbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800adc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	6861      	ldr	r1, [r4, #4]
 800adc8:	eb0a 0609 	add.w	r6, sl, r9
 800adcc:	42b3      	cmp	r3, r6
 800adce:	b085      	sub	sp, #20
 800add0:	bfb8      	it	lt
 800add2:	3101      	addlt	r1, #1
 800add4:	f7ff fedc 	bl	800ab90 <_Balloc>
 800add8:	b930      	cbnz	r0, 800ade8 <__multiply+0x44>
 800adda:	4602      	mov	r2, r0
 800addc:	4b44      	ldr	r3, [pc, #272]	@ (800aef0 <__multiply+0x14c>)
 800adde:	4845      	ldr	r0, [pc, #276]	@ (800aef4 <__multiply+0x150>)
 800ade0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ade4:	f000 fcf6 	bl	800b7d4 <__assert_func>
 800ade8:	f100 0514 	add.w	r5, r0, #20
 800adec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adf0:	462b      	mov	r3, r5
 800adf2:	2200      	movs	r2, #0
 800adf4:	4543      	cmp	r3, r8
 800adf6:	d321      	bcc.n	800ae3c <__multiply+0x98>
 800adf8:	f107 0114 	add.w	r1, r7, #20
 800adfc:	f104 0214 	add.w	r2, r4, #20
 800ae00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	1b13      	subs	r3, r2, r4
 800ae0c:	3b15      	subs	r3, #21
 800ae0e:	f023 0303 	bic.w	r3, r3, #3
 800ae12:	3304      	adds	r3, #4
 800ae14:	f104 0715 	add.w	r7, r4, #21
 800ae18:	42ba      	cmp	r2, r7
 800ae1a:	bf38      	it	cc
 800ae1c:	2304      	movcc	r3, #4
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	9b02      	ldr	r3, [sp, #8]
 800ae22:	9103      	str	r1, [sp, #12]
 800ae24:	428b      	cmp	r3, r1
 800ae26:	d80c      	bhi.n	800ae42 <__multiply+0x9e>
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	dd03      	ble.n	800ae34 <__multiply+0x90>
 800ae2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d05b      	beq.n	800aeec <__multiply+0x148>
 800ae34:	6106      	str	r6, [r0, #16]
 800ae36:	b005      	add	sp, #20
 800ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3c:	f843 2b04 	str.w	r2, [r3], #4
 800ae40:	e7d8      	b.n	800adf4 <__multiply+0x50>
 800ae42:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	d024      	beq.n	800ae96 <__multiply+0xf2>
 800ae4c:	f104 0e14 	add.w	lr, r4, #20
 800ae50:	46a9      	mov	r9, r5
 800ae52:	f04f 0c00 	mov.w	ip, #0
 800ae56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae5a:	f8d9 3000 	ldr.w	r3, [r9]
 800ae5e:	fa1f fb87 	uxth.w	fp, r7
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae6c:	f8d9 7000 	ldr.w	r7, [r9]
 800ae70:	4463      	add	r3, ip
 800ae72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae76:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae84:	4572      	cmp	r2, lr
 800ae86:	f849 3b04 	str.w	r3, [r9], #4
 800ae8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae8e:	d8e2      	bhi.n	800ae56 <__multiply+0xb2>
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	f845 c003 	str.w	ip, [r5, r3]
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae9c:	3104      	adds	r1, #4
 800ae9e:	f1b9 0f00 	cmp.w	r9, #0
 800aea2:	d021      	beq.n	800aee8 <__multiply+0x144>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	f104 0c14 	add.w	ip, r4, #20
 800aeaa:	46ae      	mov	lr, r5
 800aeac:	f04f 0a00 	mov.w	sl, #0
 800aeb0:	f8bc b000 	ldrh.w	fp, [ip]
 800aeb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aeb8:	fb09 770b 	mla	r7, r9, fp, r7
 800aebc:	4457      	add	r7, sl
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aec4:	f84e 3b04 	str.w	r3, [lr], #4
 800aec8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aecc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aed0:	f8be 3000 	ldrh.w	r3, [lr]
 800aed4:	fb09 330a 	mla	r3, r9, sl, r3
 800aed8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aedc:	4562      	cmp	r2, ip
 800aede:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aee2:	d8e5      	bhi.n	800aeb0 <__multiply+0x10c>
 800aee4:	9f01      	ldr	r7, [sp, #4]
 800aee6:	51eb      	str	r3, [r5, r7]
 800aee8:	3504      	adds	r5, #4
 800aeea:	e799      	b.n	800ae20 <__multiply+0x7c>
 800aeec:	3e01      	subs	r6, #1
 800aeee:	e79b      	b.n	800ae28 <__multiply+0x84>
 800aef0:	0800bb80 	.word	0x0800bb80
 800aef4:	0800bb91 	.word	0x0800bb91

0800aef8 <__pow5mult>:
 800aef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aefc:	4615      	mov	r5, r2
 800aefe:	f012 0203 	ands.w	r2, r2, #3
 800af02:	4607      	mov	r7, r0
 800af04:	460e      	mov	r6, r1
 800af06:	d007      	beq.n	800af18 <__pow5mult+0x20>
 800af08:	4c25      	ldr	r4, [pc, #148]	@ (800afa0 <__pow5mult+0xa8>)
 800af0a:	3a01      	subs	r2, #1
 800af0c:	2300      	movs	r3, #0
 800af0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af12:	f7ff fe9f 	bl	800ac54 <__multadd>
 800af16:	4606      	mov	r6, r0
 800af18:	10ad      	asrs	r5, r5, #2
 800af1a:	d03d      	beq.n	800af98 <__pow5mult+0xa0>
 800af1c:	69fc      	ldr	r4, [r7, #28]
 800af1e:	b97c      	cbnz	r4, 800af40 <__pow5mult+0x48>
 800af20:	2010      	movs	r0, #16
 800af22:	f7ff fd7f 	bl	800aa24 <malloc>
 800af26:	4602      	mov	r2, r0
 800af28:	61f8      	str	r0, [r7, #28]
 800af2a:	b928      	cbnz	r0, 800af38 <__pow5mult+0x40>
 800af2c:	4b1d      	ldr	r3, [pc, #116]	@ (800afa4 <__pow5mult+0xac>)
 800af2e:	481e      	ldr	r0, [pc, #120]	@ (800afa8 <__pow5mult+0xb0>)
 800af30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af34:	f000 fc4e 	bl	800b7d4 <__assert_func>
 800af38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af3c:	6004      	str	r4, [r0, #0]
 800af3e:	60c4      	str	r4, [r0, #12]
 800af40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af48:	b94c      	cbnz	r4, 800af5e <__pow5mult+0x66>
 800af4a:	f240 2171 	movw	r1, #625	@ 0x271
 800af4e:	4638      	mov	r0, r7
 800af50:	f7ff ff12 	bl	800ad78 <__i2b>
 800af54:	2300      	movs	r3, #0
 800af56:	f8c8 0008 	str.w	r0, [r8, #8]
 800af5a:	4604      	mov	r4, r0
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	07eb      	lsls	r3, r5, #31
 800af64:	d50a      	bpl.n	800af7c <__pow5mult+0x84>
 800af66:	4631      	mov	r1, r6
 800af68:	4622      	mov	r2, r4
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7ff ff1a 	bl	800ada4 <__multiply>
 800af70:	4631      	mov	r1, r6
 800af72:	4680      	mov	r8, r0
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff fe4b 	bl	800ac10 <_Bfree>
 800af7a:	4646      	mov	r6, r8
 800af7c:	106d      	asrs	r5, r5, #1
 800af7e:	d00b      	beq.n	800af98 <__pow5mult+0xa0>
 800af80:	6820      	ldr	r0, [r4, #0]
 800af82:	b938      	cbnz	r0, 800af94 <__pow5mult+0x9c>
 800af84:	4622      	mov	r2, r4
 800af86:	4621      	mov	r1, r4
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ff0b 	bl	800ada4 <__multiply>
 800af8e:	6020      	str	r0, [r4, #0]
 800af90:	f8c0 9000 	str.w	r9, [r0]
 800af94:	4604      	mov	r4, r0
 800af96:	e7e4      	b.n	800af62 <__pow5mult+0x6a>
 800af98:	4630      	mov	r0, r6
 800af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af9e:	bf00      	nop
 800afa0:	0800bbec 	.word	0x0800bbec
 800afa4:	0800bb11 	.word	0x0800bb11
 800afa8:	0800bb91 	.word	0x0800bb91

0800afac <__lshift>:
 800afac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	460c      	mov	r4, r1
 800afb2:	6849      	ldr	r1, [r1, #4]
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	4607      	mov	r7, r0
 800afbe:	4691      	mov	r9, r2
 800afc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afc4:	f108 0601 	add.w	r6, r8, #1
 800afc8:	42b3      	cmp	r3, r6
 800afca:	db0b      	blt.n	800afe4 <__lshift+0x38>
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff fddf 	bl	800ab90 <_Balloc>
 800afd2:	4605      	mov	r5, r0
 800afd4:	b948      	cbnz	r0, 800afea <__lshift+0x3e>
 800afd6:	4602      	mov	r2, r0
 800afd8:	4b28      	ldr	r3, [pc, #160]	@ (800b07c <__lshift+0xd0>)
 800afda:	4829      	ldr	r0, [pc, #164]	@ (800b080 <__lshift+0xd4>)
 800afdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afe0:	f000 fbf8 	bl	800b7d4 <__assert_func>
 800afe4:	3101      	adds	r1, #1
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	e7ee      	b.n	800afc8 <__lshift+0x1c>
 800afea:	2300      	movs	r3, #0
 800afec:	f100 0114 	add.w	r1, r0, #20
 800aff0:	f100 0210 	add.w	r2, r0, #16
 800aff4:	4618      	mov	r0, r3
 800aff6:	4553      	cmp	r3, sl
 800aff8:	db33      	blt.n	800b062 <__lshift+0xb6>
 800affa:	6920      	ldr	r0, [r4, #16]
 800affc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b000:	f104 0314 	add.w	r3, r4, #20
 800b004:	f019 091f 	ands.w	r9, r9, #31
 800b008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b00c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b010:	d02b      	beq.n	800b06a <__lshift+0xbe>
 800b012:	f1c9 0e20 	rsb	lr, r9, #32
 800b016:	468a      	mov	sl, r1
 800b018:	2200      	movs	r2, #0
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	fa00 f009 	lsl.w	r0, r0, r9
 800b020:	4310      	orrs	r0, r2
 800b022:	f84a 0b04 	str.w	r0, [sl], #4
 800b026:	f853 2b04 	ldr.w	r2, [r3], #4
 800b02a:	459c      	cmp	ip, r3
 800b02c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b030:	d8f3      	bhi.n	800b01a <__lshift+0x6e>
 800b032:	ebac 0304 	sub.w	r3, ip, r4
 800b036:	3b15      	subs	r3, #21
 800b038:	f023 0303 	bic.w	r3, r3, #3
 800b03c:	3304      	adds	r3, #4
 800b03e:	f104 0015 	add.w	r0, r4, #21
 800b042:	4584      	cmp	ip, r0
 800b044:	bf38      	it	cc
 800b046:	2304      	movcc	r3, #4
 800b048:	50ca      	str	r2, [r1, r3]
 800b04a:	b10a      	cbz	r2, 800b050 <__lshift+0xa4>
 800b04c:	f108 0602 	add.w	r6, r8, #2
 800b050:	3e01      	subs	r6, #1
 800b052:	4638      	mov	r0, r7
 800b054:	612e      	str	r6, [r5, #16]
 800b056:	4621      	mov	r1, r4
 800b058:	f7ff fdda 	bl	800ac10 <_Bfree>
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	f842 0f04 	str.w	r0, [r2, #4]!
 800b066:	3301      	adds	r3, #1
 800b068:	e7c5      	b.n	800aff6 <__lshift+0x4a>
 800b06a:	3904      	subs	r1, #4
 800b06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b070:	f841 2f04 	str.w	r2, [r1, #4]!
 800b074:	459c      	cmp	ip, r3
 800b076:	d8f9      	bhi.n	800b06c <__lshift+0xc0>
 800b078:	e7ea      	b.n	800b050 <__lshift+0xa4>
 800b07a:	bf00      	nop
 800b07c:	0800bb80 	.word	0x0800bb80
 800b080:	0800bb91 	.word	0x0800bb91

0800b084 <__mcmp>:
 800b084:	690a      	ldr	r2, [r1, #16]
 800b086:	4603      	mov	r3, r0
 800b088:	6900      	ldr	r0, [r0, #16]
 800b08a:	1a80      	subs	r0, r0, r2
 800b08c:	b530      	push	{r4, r5, lr}
 800b08e:	d10e      	bne.n	800b0ae <__mcmp+0x2a>
 800b090:	3314      	adds	r3, #20
 800b092:	3114      	adds	r1, #20
 800b094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b09c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0a4:	4295      	cmp	r5, r2
 800b0a6:	d003      	beq.n	800b0b0 <__mcmp+0x2c>
 800b0a8:	d205      	bcs.n	800b0b6 <__mcmp+0x32>
 800b0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ae:	bd30      	pop	{r4, r5, pc}
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	d3f3      	bcc.n	800b09c <__mcmp+0x18>
 800b0b4:	e7fb      	b.n	800b0ae <__mcmp+0x2a>
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	e7f9      	b.n	800b0ae <__mcmp+0x2a>
	...

0800b0bc <__mdiff>:
 800b0bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4648      	mov	r0, r9
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	f7ff ffdb 	bl	800b084 <__mcmp>
 800b0ce:	1e05      	subs	r5, r0, #0
 800b0d0:	d112      	bne.n	800b0f8 <__mdiff+0x3c>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff fd5b 	bl	800ab90 <_Balloc>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	b928      	cbnz	r0, 800b0ea <__mdiff+0x2e>
 800b0de:	4b3f      	ldr	r3, [pc, #252]	@ (800b1dc <__mdiff+0x120>)
 800b0e0:	f240 2137 	movw	r1, #567	@ 0x237
 800b0e4:	483e      	ldr	r0, [pc, #248]	@ (800b1e0 <__mdiff+0x124>)
 800b0e6:	f000 fb75 	bl	800b7d4 <__assert_func>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	b003      	add	sp, #12
 800b0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f8:	bfbc      	itt	lt
 800b0fa:	464b      	movlt	r3, r9
 800b0fc:	46a1      	movlt	r9, r4
 800b0fe:	4630      	mov	r0, r6
 800b100:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b104:	bfba      	itte	lt
 800b106:	461c      	movlt	r4, r3
 800b108:	2501      	movlt	r5, #1
 800b10a:	2500      	movge	r5, #0
 800b10c:	f7ff fd40 	bl	800ab90 <_Balloc>
 800b110:	4602      	mov	r2, r0
 800b112:	b918      	cbnz	r0, 800b11c <__mdiff+0x60>
 800b114:	4b31      	ldr	r3, [pc, #196]	@ (800b1dc <__mdiff+0x120>)
 800b116:	f240 2145 	movw	r1, #581	@ 0x245
 800b11a:	e7e3      	b.n	800b0e4 <__mdiff+0x28>
 800b11c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b120:	6926      	ldr	r6, [r4, #16]
 800b122:	60c5      	str	r5, [r0, #12]
 800b124:	f109 0310 	add.w	r3, r9, #16
 800b128:	f109 0514 	add.w	r5, r9, #20
 800b12c:	f104 0e14 	add.w	lr, r4, #20
 800b130:	f100 0b14 	add.w	fp, r0, #20
 800b134:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b138:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	46d9      	mov	r9, fp
 800b140:	f04f 0c00 	mov.w	ip, #0
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b14a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	fa1f f38a 	uxth.w	r3, sl
 800b154:	4619      	mov	r1, r3
 800b156:	b283      	uxth	r3, r0
 800b158:	1acb      	subs	r3, r1, r3
 800b15a:	0c00      	lsrs	r0, r0, #16
 800b15c:	4463      	add	r3, ip
 800b15e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b162:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b166:	b29b      	uxth	r3, r3
 800b168:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b16c:	4576      	cmp	r6, lr
 800b16e:	f849 3b04 	str.w	r3, [r9], #4
 800b172:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b176:	d8e5      	bhi.n	800b144 <__mdiff+0x88>
 800b178:	1b33      	subs	r3, r6, r4
 800b17a:	3b15      	subs	r3, #21
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3415      	adds	r4, #21
 800b182:	3304      	adds	r3, #4
 800b184:	42a6      	cmp	r6, r4
 800b186:	bf38      	it	cc
 800b188:	2304      	movcc	r3, #4
 800b18a:	441d      	add	r5, r3
 800b18c:	445b      	add	r3, fp
 800b18e:	461e      	mov	r6, r3
 800b190:	462c      	mov	r4, r5
 800b192:	4544      	cmp	r4, r8
 800b194:	d30e      	bcc.n	800b1b4 <__mdiff+0xf8>
 800b196:	f108 0103 	add.w	r1, r8, #3
 800b19a:	1b49      	subs	r1, r1, r5
 800b19c:	f021 0103 	bic.w	r1, r1, #3
 800b1a0:	3d03      	subs	r5, #3
 800b1a2:	45a8      	cmp	r8, r5
 800b1a4:	bf38      	it	cc
 800b1a6:	2100      	movcc	r1, #0
 800b1a8:	440b      	add	r3, r1
 800b1aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1ae:	b191      	cbz	r1, 800b1d6 <__mdiff+0x11a>
 800b1b0:	6117      	str	r7, [r2, #16]
 800b1b2:	e79d      	b.n	800b0f0 <__mdiff+0x34>
 800b1b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1b8:	46e6      	mov	lr, ip
 800b1ba:	0c08      	lsrs	r0, r1, #16
 800b1bc:	fa1c fc81 	uxtah	ip, ip, r1
 800b1c0:	4471      	add	r1, lr
 800b1c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1c6:	b289      	uxth	r1, r1
 800b1c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1cc:	f846 1b04 	str.w	r1, [r6], #4
 800b1d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1d4:	e7dd      	b.n	800b192 <__mdiff+0xd6>
 800b1d6:	3f01      	subs	r7, #1
 800b1d8:	e7e7      	b.n	800b1aa <__mdiff+0xee>
 800b1da:	bf00      	nop
 800b1dc:	0800bb80 	.word	0x0800bb80
 800b1e0:	0800bb91 	.word	0x0800bb91

0800b1e4 <__d2b>:
 800b1e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1e8:	460f      	mov	r7, r1
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	ec59 8b10 	vmov	r8, r9, d0
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	f7ff fccd 	bl	800ab90 <_Balloc>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b930      	cbnz	r0, 800b208 <__d2b+0x24>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	4b23      	ldr	r3, [pc, #140]	@ (800b28c <__d2b+0xa8>)
 800b1fe:	4824      	ldr	r0, [pc, #144]	@ (800b290 <__d2b+0xac>)
 800b200:	f240 310f 	movw	r1, #783	@ 0x30f
 800b204:	f000 fae6 	bl	800b7d4 <__assert_func>
 800b208:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b20c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b210:	b10d      	cbz	r5, 800b216 <__d2b+0x32>
 800b212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	f1b8 0300 	subs.w	r3, r8, #0
 800b21c:	d023      	beq.n	800b266 <__d2b+0x82>
 800b21e:	4668      	mov	r0, sp
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	f7ff fd7c 	bl	800ad1e <__lo0bits>
 800b226:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b22a:	b1d0      	cbz	r0, 800b262 <__d2b+0x7e>
 800b22c:	f1c0 0320 	rsb	r3, r0, #32
 800b230:	fa02 f303 	lsl.w	r3, r2, r3
 800b234:	430b      	orrs	r3, r1
 800b236:	40c2      	lsrs	r2, r0
 800b238:	6163      	str	r3, [r4, #20]
 800b23a:	9201      	str	r2, [sp, #4]
 800b23c:	9b01      	ldr	r3, [sp, #4]
 800b23e:	61a3      	str	r3, [r4, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	bf0c      	ite	eq
 800b244:	2201      	moveq	r2, #1
 800b246:	2202      	movne	r2, #2
 800b248:	6122      	str	r2, [r4, #16]
 800b24a:	b1a5      	cbz	r5, 800b276 <__d2b+0x92>
 800b24c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b250:	4405      	add	r5, r0
 800b252:	603d      	str	r5, [r7, #0]
 800b254:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b258:	6030      	str	r0, [r6, #0]
 800b25a:	4620      	mov	r0, r4
 800b25c:	b003      	add	sp, #12
 800b25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b262:	6161      	str	r1, [r4, #20]
 800b264:	e7ea      	b.n	800b23c <__d2b+0x58>
 800b266:	a801      	add	r0, sp, #4
 800b268:	f7ff fd59 	bl	800ad1e <__lo0bits>
 800b26c:	9b01      	ldr	r3, [sp, #4]
 800b26e:	6163      	str	r3, [r4, #20]
 800b270:	3020      	adds	r0, #32
 800b272:	2201      	movs	r2, #1
 800b274:	e7e8      	b.n	800b248 <__d2b+0x64>
 800b276:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b27a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b27e:	6038      	str	r0, [r7, #0]
 800b280:	6918      	ldr	r0, [r3, #16]
 800b282:	f7ff fd2d 	bl	800ace0 <__hi0bits>
 800b286:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b28a:	e7e5      	b.n	800b258 <__d2b+0x74>
 800b28c:	0800bb80 	.word	0x0800bb80
 800b290:	0800bb91 	.word	0x0800bb91

0800b294 <__sfputc_r>:
 800b294:	6893      	ldr	r3, [r2, #8]
 800b296:	3b01      	subs	r3, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	b410      	push	{r4}
 800b29c:	6093      	str	r3, [r2, #8]
 800b29e:	da08      	bge.n	800b2b2 <__sfputc_r+0x1e>
 800b2a0:	6994      	ldr	r4, [r2, #24]
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	db01      	blt.n	800b2aa <__sfputc_r+0x16>
 800b2a6:	290a      	cmp	r1, #10
 800b2a8:	d103      	bne.n	800b2b2 <__sfputc_r+0x1e>
 800b2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ae:	f000 b9df 	b.w	800b670 <__swbuf_r>
 800b2b2:	6813      	ldr	r3, [r2, #0]
 800b2b4:	1c58      	adds	r0, r3, #1
 800b2b6:	6010      	str	r0, [r2, #0]
 800b2b8:	7019      	strb	r1, [r3, #0]
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <__sfputs_r>:
 800b2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	460f      	mov	r7, r1
 800b2c8:	4614      	mov	r4, r2
 800b2ca:	18d5      	adds	r5, r2, r3
 800b2cc:	42ac      	cmp	r4, r5
 800b2ce:	d101      	bne.n	800b2d4 <__sfputs_r+0x12>
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e007      	b.n	800b2e4 <__sfputs_r+0x22>
 800b2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d8:	463a      	mov	r2, r7
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff ffda 	bl	800b294 <__sfputc_r>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d1f3      	bne.n	800b2cc <__sfputs_r+0xa>
 800b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2e8 <_vfiprintf_r>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	b09d      	sub	sp, #116	@ 0x74
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	4698      	mov	r8, r3
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	b118      	cbz	r0, 800b300 <_vfiprintf_r+0x18>
 800b2f8:	6a03      	ldr	r3, [r0, #32]
 800b2fa:	b90b      	cbnz	r3, 800b300 <_vfiprintf_r+0x18>
 800b2fc:	f7fe fbee 	bl	8009adc <__sinit>
 800b300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x2a>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x2a>
 800b30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b30e:	f7fe fcee 	bl	8009cee <__retarget_lock_acquire_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	071b      	lsls	r3, r3, #28
 800b316:	d501      	bpl.n	800b31c <_vfiprintf_r+0x34>
 800b318:	692b      	ldr	r3, [r5, #16]
 800b31a:	b99b      	cbnz	r3, 800b344 <_vfiprintf_r+0x5c>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4630      	mov	r0, r6
 800b320:	f000 f9e4 	bl	800b6ec <__swsetup_r>
 800b324:	b170      	cbz	r0, 800b344 <_vfiprintf_r+0x5c>
 800b326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b328:	07dc      	lsls	r4, r3, #31
 800b32a:	d504      	bpl.n	800b336 <_vfiprintf_r+0x4e>
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	b01d      	add	sp, #116	@ 0x74
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	0598      	lsls	r0, r3, #22
 800b33a:	d4f7      	bmi.n	800b32c <_vfiprintf_r+0x44>
 800b33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b33e:	f7fe fcd7 	bl	8009cf0 <__retarget_lock_release_recursive>
 800b342:	e7f3      	b.n	800b32c <_vfiprintf_r+0x44>
 800b344:	2300      	movs	r3, #0
 800b346:	9309      	str	r3, [sp, #36]	@ 0x24
 800b348:	2320      	movs	r3, #32
 800b34a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b352:	2330      	movs	r3, #48	@ 0x30
 800b354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b504 <_vfiprintf_r+0x21c>
 800b358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b35c:	f04f 0901 	mov.w	r9, #1
 800b360:	4623      	mov	r3, r4
 800b362:	469a      	mov	sl, r3
 800b364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b368:	b10a      	cbz	r2, 800b36e <_vfiprintf_r+0x86>
 800b36a:	2a25      	cmp	r2, #37	@ 0x25
 800b36c:	d1f9      	bne.n	800b362 <_vfiprintf_r+0x7a>
 800b36e:	ebba 0b04 	subs.w	fp, sl, r4
 800b372:	d00b      	beq.n	800b38c <_vfiprintf_r+0xa4>
 800b374:	465b      	mov	r3, fp
 800b376:	4622      	mov	r2, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7ff ffa1 	bl	800b2c2 <__sfputs_r>
 800b380:	3001      	adds	r0, #1
 800b382:	f000 80a7 	beq.w	800b4d4 <_vfiprintf_r+0x1ec>
 800b386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b388:	445a      	add	r2, fp
 800b38a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b38c:	f89a 3000 	ldrb.w	r3, [sl]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f000 809f 	beq.w	800b4d4 <_vfiprintf_r+0x1ec>
 800b396:	2300      	movs	r3, #0
 800b398:	f04f 32ff 	mov.w	r2, #4294967295
 800b39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3a0:	f10a 0a01 	add.w	sl, sl, #1
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	9307      	str	r3, [sp, #28]
 800b3a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3ae:	4654      	mov	r4, sl
 800b3b0:	2205      	movs	r2, #5
 800b3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b6:	4853      	ldr	r0, [pc, #332]	@ (800b504 <_vfiprintf_r+0x21c>)
 800b3b8:	f7f4 ff1a 	bl	80001f0 <memchr>
 800b3bc:	9a04      	ldr	r2, [sp, #16]
 800b3be:	b9d8      	cbnz	r0, 800b3f8 <_vfiprintf_r+0x110>
 800b3c0:	06d1      	lsls	r1, r2, #27
 800b3c2:	bf44      	itt	mi
 800b3c4:	2320      	movmi	r3, #32
 800b3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ca:	0713      	lsls	r3, r2, #28
 800b3cc:	bf44      	itt	mi
 800b3ce:	232b      	movmi	r3, #43	@ 0x2b
 800b3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3da:	d015      	beq.n	800b408 <_vfiprintf_r+0x120>
 800b3dc:	9a07      	ldr	r2, [sp, #28]
 800b3de:	4654      	mov	r4, sl
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	f04f 0c0a 	mov.w	ip, #10
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ec:	3b30      	subs	r3, #48	@ 0x30
 800b3ee:	2b09      	cmp	r3, #9
 800b3f0:	d94b      	bls.n	800b48a <_vfiprintf_r+0x1a2>
 800b3f2:	b1b0      	cbz	r0, 800b422 <_vfiprintf_r+0x13a>
 800b3f4:	9207      	str	r2, [sp, #28]
 800b3f6:	e014      	b.n	800b422 <_vfiprintf_r+0x13a>
 800b3f8:	eba0 0308 	sub.w	r3, r0, r8
 800b3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b400:	4313      	orrs	r3, r2
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	46a2      	mov	sl, r4
 800b406:	e7d2      	b.n	800b3ae <_vfiprintf_r+0xc6>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	1d19      	adds	r1, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	9103      	str	r1, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfbb      	ittet	lt
 800b414:	425b      	neglt	r3, r3
 800b416:	f042 0202 	orrlt.w	r2, r2, #2
 800b41a:	9307      	strge	r3, [sp, #28]
 800b41c:	9307      	strlt	r3, [sp, #28]
 800b41e:	bfb8      	it	lt
 800b420:	9204      	strlt	r2, [sp, #16]
 800b422:	7823      	ldrb	r3, [r4, #0]
 800b424:	2b2e      	cmp	r3, #46	@ 0x2e
 800b426:	d10a      	bne.n	800b43e <_vfiprintf_r+0x156>
 800b428:	7863      	ldrb	r3, [r4, #1]
 800b42a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b42c:	d132      	bne.n	800b494 <_vfiprintf_r+0x1ac>
 800b42e:	9b03      	ldr	r3, [sp, #12]
 800b430:	1d1a      	adds	r2, r3, #4
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	9203      	str	r2, [sp, #12]
 800b436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b43a:	3402      	adds	r4, #2
 800b43c:	9305      	str	r3, [sp, #20]
 800b43e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b514 <_vfiprintf_r+0x22c>
 800b442:	7821      	ldrb	r1, [r4, #0]
 800b444:	2203      	movs	r2, #3
 800b446:	4650      	mov	r0, sl
 800b448:	f7f4 fed2 	bl	80001f0 <memchr>
 800b44c:	b138      	cbz	r0, 800b45e <_vfiprintf_r+0x176>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	eba0 000a 	sub.w	r0, r0, sl
 800b454:	2240      	movs	r2, #64	@ 0x40
 800b456:	4082      	lsls	r2, r0
 800b458:	4313      	orrs	r3, r2
 800b45a:	3401      	adds	r4, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4829      	ldr	r0, [pc, #164]	@ (800b508 <_vfiprintf_r+0x220>)
 800b464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b468:	2206      	movs	r2, #6
 800b46a:	f7f4 fec1 	bl	80001f0 <memchr>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d03f      	beq.n	800b4f2 <_vfiprintf_r+0x20a>
 800b472:	4b26      	ldr	r3, [pc, #152]	@ (800b50c <_vfiprintf_r+0x224>)
 800b474:	bb1b      	cbnz	r3, 800b4be <_vfiprintf_r+0x1d6>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	3307      	adds	r3, #7
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	3308      	adds	r3, #8
 800b480:	9303      	str	r3, [sp, #12]
 800b482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b484:	443b      	add	r3, r7
 800b486:	9309      	str	r3, [sp, #36]	@ 0x24
 800b488:	e76a      	b.n	800b360 <_vfiprintf_r+0x78>
 800b48a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b48e:	460c      	mov	r4, r1
 800b490:	2001      	movs	r0, #1
 800b492:	e7a8      	b.n	800b3e6 <_vfiprintf_r+0xfe>
 800b494:	2300      	movs	r3, #0
 800b496:	3401      	adds	r4, #1
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	4619      	mov	r1, r3
 800b49c:	f04f 0c0a 	mov.w	ip, #10
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a6:	3a30      	subs	r2, #48	@ 0x30
 800b4a8:	2a09      	cmp	r2, #9
 800b4aa:	d903      	bls.n	800b4b4 <_vfiprintf_r+0x1cc>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0c6      	beq.n	800b43e <_vfiprintf_r+0x156>
 800b4b0:	9105      	str	r1, [sp, #20]
 800b4b2:	e7c4      	b.n	800b43e <_vfiprintf_r+0x156>
 800b4b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e7f0      	b.n	800b4a0 <_vfiprintf_r+0x1b8>
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4b12      	ldr	r3, [pc, #72]	@ (800b510 <_vfiprintf_r+0x228>)
 800b4c6:	a904      	add	r1, sp, #16
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7fd fec3 	bl	8009254 <_printf_float>
 800b4ce:	4607      	mov	r7, r0
 800b4d0:	1c78      	adds	r0, r7, #1
 800b4d2:	d1d6      	bne.n	800b482 <_vfiprintf_r+0x19a>
 800b4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4d6:	07d9      	lsls	r1, r3, #31
 800b4d8:	d405      	bmi.n	800b4e6 <_vfiprintf_r+0x1fe>
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	059a      	lsls	r2, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_vfiprintf_r+0x1fe>
 800b4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4e2:	f7fe fc05 	bl	8009cf0 <__retarget_lock_release_recursive>
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	065b      	lsls	r3, r3, #25
 800b4ea:	f53f af1f 	bmi.w	800b32c <_vfiprintf_r+0x44>
 800b4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4f0:	e71e      	b.n	800b330 <_vfiprintf_r+0x48>
 800b4f2:	ab03      	add	r3, sp, #12
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4b05      	ldr	r3, [pc, #20]	@ (800b510 <_vfiprintf_r+0x228>)
 800b4fa:	a904      	add	r1, sp, #16
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7fe f941 	bl	8009784 <_printf_i>
 800b502:	e7e4      	b.n	800b4ce <_vfiprintf_r+0x1e6>
 800b504:	0800bce8 	.word	0x0800bce8
 800b508:	0800bcf2 	.word	0x0800bcf2
 800b50c:	08009255 	.word	0x08009255
 800b510:	0800b2c3 	.word	0x0800b2c3
 800b514:	0800bcee 	.word	0x0800bcee

0800b518 <__sflush_r>:
 800b518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	0716      	lsls	r6, r2, #28
 800b522:	4605      	mov	r5, r0
 800b524:	460c      	mov	r4, r1
 800b526:	d454      	bmi.n	800b5d2 <__sflush_r+0xba>
 800b528:	684b      	ldr	r3, [r1, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dc02      	bgt.n	800b534 <__sflush_r+0x1c>
 800b52e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b530:	2b00      	cmp	r3, #0
 800b532:	dd48      	ble.n	800b5c6 <__sflush_r+0xae>
 800b534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b536:	2e00      	cmp	r6, #0
 800b538:	d045      	beq.n	800b5c6 <__sflush_r+0xae>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b540:	682f      	ldr	r7, [r5, #0]
 800b542:	6a21      	ldr	r1, [r4, #32]
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	d030      	beq.n	800b5aa <__sflush_r+0x92>
 800b548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	0759      	lsls	r1, r3, #29
 800b54e:	d505      	bpl.n	800b55c <__sflush_r+0x44>
 800b550:	6863      	ldr	r3, [r4, #4]
 800b552:	1ad2      	subs	r2, r2, r3
 800b554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b556:	b10b      	cbz	r3, 800b55c <__sflush_r+0x44>
 800b558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b560:	6a21      	ldr	r1, [r4, #32]
 800b562:	4628      	mov	r0, r5
 800b564:	47b0      	blx	r6
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	d106      	bne.n	800b57a <__sflush_r+0x62>
 800b56c:	6829      	ldr	r1, [r5, #0]
 800b56e:	291d      	cmp	r1, #29
 800b570:	d82b      	bhi.n	800b5ca <__sflush_r+0xb2>
 800b572:	4a2a      	ldr	r2, [pc, #168]	@ (800b61c <__sflush_r+0x104>)
 800b574:	410a      	asrs	r2, r1
 800b576:	07d6      	lsls	r6, r2, #31
 800b578:	d427      	bmi.n	800b5ca <__sflush_r+0xb2>
 800b57a:	2200      	movs	r2, #0
 800b57c:	6062      	str	r2, [r4, #4]
 800b57e:	04d9      	lsls	r1, r3, #19
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	d504      	bpl.n	800b590 <__sflush_r+0x78>
 800b586:	1c42      	adds	r2, r0, #1
 800b588:	d101      	bne.n	800b58e <__sflush_r+0x76>
 800b58a:	682b      	ldr	r3, [r5, #0]
 800b58c:	b903      	cbnz	r3, 800b590 <__sflush_r+0x78>
 800b58e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b592:	602f      	str	r7, [r5, #0]
 800b594:	b1b9      	cbz	r1, 800b5c6 <__sflush_r+0xae>
 800b596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d002      	beq.n	800b5a4 <__sflush_r+0x8c>
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f7ff f9f6 	bl	800a990 <_free_r>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5a8:	e00d      	b.n	800b5c6 <__sflush_r+0xae>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	47b0      	blx	r6
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	1c50      	adds	r0, r2, #1
 800b5b4:	d1c9      	bne.n	800b54a <__sflush_r+0x32>
 800b5b6:	682b      	ldr	r3, [r5, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0c6      	beq.n	800b54a <__sflush_r+0x32>
 800b5bc:	2b1d      	cmp	r3, #29
 800b5be:	d001      	beq.n	800b5c4 <__sflush_r+0xac>
 800b5c0:	2b16      	cmp	r3, #22
 800b5c2:	d11e      	bne.n	800b602 <__sflush_r+0xea>
 800b5c4:	602f      	str	r7, [r5, #0]
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e022      	b.n	800b610 <__sflush_r+0xf8>
 800b5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ce:	b21b      	sxth	r3, r3
 800b5d0:	e01b      	b.n	800b60a <__sflush_r+0xf2>
 800b5d2:	690f      	ldr	r7, [r1, #16]
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	d0f6      	beq.n	800b5c6 <__sflush_r+0xae>
 800b5d8:	0793      	lsls	r3, r2, #30
 800b5da:	680e      	ldr	r6, [r1, #0]
 800b5dc:	bf08      	it	eq
 800b5de:	694b      	ldreq	r3, [r1, #20]
 800b5e0:	600f      	str	r7, [r1, #0]
 800b5e2:	bf18      	it	ne
 800b5e4:	2300      	movne	r3, #0
 800b5e6:	eba6 0807 	sub.w	r8, r6, r7
 800b5ea:	608b      	str	r3, [r1, #8]
 800b5ec:	f1b8 0f00 	cmp.w	r8, #0
 800b5f0:	dde9      	ble.n	800b5c6 <__sflush_r+0xae>
 800b5f2:	6a21      	ldr	r1, [r4, #32]
 800b5f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5f6:	4643      	mov	r3, r8
 800b5f8:	463a      	mov	r2, r7
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b0      	blx	r6
 800b5fe:	2800      	cmp	r0, #0
 800b600:	dc08      	bgt.n	800b614 <__sflush_r+0xfc>
 800b602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	4407      	add	r7, r0
 800b616:	eba8 0800 	sub.w	r8, r8, r0
 800b61a:	e7e7      	b.n	800b5ec <__sflush_r+0xd4>
 800b61c:	dfbffffe 	.word	0xdfbffffe

0800b620 <_fflush_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	690b      	ldr	r3, [r1, #16]
 800b624:	4605      	mov	r5, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b913      	cbnz	r3, 800b630 <_fflush_r+0x10>
 800b62a:	2500      	movs	r5, #0
 800b62c:	4628      	mov	r0, r5
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	b118      	cbz	r0, 800b63a <_fflush_r+0x1a>
 800b632:	6a03      	ldr	r3, [r0, #32]
 800b634:	b90b      	cbnz	r3, 800b63a <_fflush_r+0x1a>
 800b636:	f7fe fa51 	bl	8009adc <__sinit>
 800b63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0f3      	beq.n	800b62a <_fflush_r+0xa>
 800b642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b644:	07d0      	lsls	r0, r2, #31
 800b646:	d404      	bmi.n	800b652 <_fflush_r+0x32>
 800b648:	0599      	lsls	r1, r3, #22
 800b64a:	d402      	bmi.n	800b652 <_fflush_r+0x32>
 800b64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b64e:	f7fe fb4e 	bl	8009cee <__retarget_lock_acquire_recursive>
 800b652:	4628      	mov	r0, r5
 800b654:	4621      	mov	r1, r4
 800b656:	f7ff ff5f 	bl	800b518 <__sflush_r>
 800b65a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b65c:	07da      	lsls	r2, r3, #31
 800b65e:	4605      	mov	r5, r0
 800b660:	d4e4      	bmi.n	800b62c <_fflush_r+0xc>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	059b      	lsls	r3, r3, #22
 800b666:	d4e1      	bmi.n	800b62c <_fflush_r+0xc>
 800b668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b66a:	f7fe fb41 	bl	8009cf0 <__retarget_lock_release_recursive>
 800b66e:	e7dd      	b.n	800b62c <_fflush_r+0xc>

0800b670 <__swbuf_r>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	460e      	mov	r6, r1
 800b674:	4614      	mov	r4, r2
 800b676:	4605      	mov	r5, r0
 800b678:	b118      	cbz	r0, 800b682 <__swbuf_r+0x12>
 800b67a:	6a03      	ldr	r3, [r0, #32]
 800b67c:	b90b      	cbnz	r3, 800b682 <__swbuf_r+0x12>
 800b67e:	f7fe fa2d 	bl	8009adc <__sinit>
 800b682:	69a3      	ldr	r3, [r4, #24]
 800b684:	60a3      	str	r3, [r4, #8]
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	071a      	lsls	r2, r3, #28
 800b68a:	d501      	bpl.n	800b690 <__swbuf_r+0x20>
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	b943      	cbnz	r3, 800b6a2 <__swbuf_r+0x32>
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f000 f82a 	bl	800b6ec <__swsetup_r>
 800b698:	b118      	cbz	r0, 800b6a2 <__swbuf_r+0x32>
 800b69a:	f04f 37ff 	mov.w	r7, #4294967295
 800b69e:	4638      	mov	r0, r7
 800b6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	6922      	ldr	r2, [r4, #16]
 800b6a6:	1a98      	subs	r0, r3, r2
 800b6a8:	6963      	ldr	r3, [r4, #20]
 800b6aa:	b2f6      	uxtb	r6, r6
 800b6ac:	4283      	cmp	r3, r0
 800b6ae:	4637      	mov	r7, r6
 800b6b0:	dc05      	bgt.n	800b6be <__swbuf_r+0x4e>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f7ff ffb3 	bl	800b620 <_fflush_r>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d1ed      	bne.n	800b69a <__swbuf_r+0x2a>
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	6022      	str	r2, [r4, #0]
 800b6ca:	701e      	strb	r6, [r3, #0]
 800b6cc:	6962      	ldr	r2, [r4, #20]
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d004      	beq.n	800b6de <__swbuf_r+0x6e>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	07db      	lsls	r3, r3, #31
 800b6d8:	d5e1      	bpl.n	800b69e <__swbuf_r+0x2e>
 800b6da:	2e0a      	cmp	r6, #10
 800b6dc:	d1df      	bne.n	800b69e <__swbuf_r+0x2e>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7ff ff9d 	bl	800b620 <_fflush_r>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d0d9      	beq.n	800b69e <__swbuf_r+0x2e>
 800b6ea:	e7d6      	b.n	800b69a <__swbuf_r+0x2a>

0800b6ec <__swsetup_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4b29      	ldr	r3, [pc, #164]	@ (800b794 <__swsetup_r+0xa8>)
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	b118      	cbz	r0, 800b700 <__swsetup_r+0x14>
 800b6f8:	6a03      	ldr	r3, [r0, #32]
 800b6fa:	b90b      	cbnz	r3, 800b700 <__swsetup_r+0x14>
 800b6fc:	f7fe f9ee 	bl	8009adc <__sinit>
 800b700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b704:	0719      	lsls	r1, r3, #28
 800b706:	d422      	bmi.n	800b74e <__swsetup_r+0x62>
 800b708:	06da      	lsls	r2, r3, #27
 800b70a:	d407      	bmi.n	800b71c <__swsetup_r+0x30>
 800b70c:	2209      	movs	r2, #9
 800b70e:	602a      	str	r2, [r5, #0]
 800b710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b714:	81a3      	strh	r3, [r4, #12]
 800b716:	f04f 30ff 	mov.w	r0, #4294967295
 800b71a:	e033      	b.n	800b784 <__swsetup_r+0x98>
 800b71c:	0758      	lsls	r0, r3, #29
 800b71e:	d512      	bpl.n	800b746 <__swsetup_r+0x5a>
 800b720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b722:	b141      	cbz	r1, 800b736 <__swsetup_r+0x4a>
 800b724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b728:	4299      	cmp	r1, r3
 800b72a:	d002      	beq.n	800b732 <__swsetup_r+0x46>
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7ff f92f 	bl	800a990 <_free_r>
 800b732:	2300      	movs	r3, #0
 800b734:	6363      	str	r3, [r4, #52]	@ 0x34
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	2300      	movs	r3, #0
 800b740:	6063      	str	r3, [r4, #4]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f043 0308 	orr.w	r3, r3, #8
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	b94b      	cbnz	r3, 800b766 <__swsetup_r+0x7a>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b75c:	d003      	beq.n	800b766 <__swsetup_r+0x7a>
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f000 f8c1 	bl	800b8e8 <__smakebuf_r>
 800b766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76a:	f013 0201 	ands.w	r2, r3, #1
 800b76e:	d00a      	beq.n	800b786 <__swsetup_r+0x9a>
 800b770:	2200      	movs	r2, #0
 800b772:	60a2      	str	r2, [r4, #8]
 800b774:	6962      	ldr	r2, [r4, #20]
 800b776:	4252      	negs	r2, r2
 800b778:	61a2      	str	r2, [r4, #24]
 800b77a:	6922      	ldr	r2, [r4, #16]
 800b77c:	b942      	cbnz	r2, 800b790 <__swsetup_r+0xa4>
 800b77e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b782:	d1c5      	bne.n	800b710 <__swsetup_r+0x24>
 800b784:	bd38      	pop	{r3, r4, r5, pc}
 800b786:	0799      	lsls	r1, r3, #30
 800b788:	bf58      	it	pl
 800b78a:	6962      	ldrpl	r2, [r4, #20]
 800b78c:	60a2      	str	r2, [r4, #8]
 800b78e:	e7f4      	b.n	800b77a <__swsetup_r+0x8e>
 800b790:	2000      	movs	r0, #0
 800b792:	e7f7      	b.n	800b784 <__swsetup_r+0x98>
 800b794:	20000194 	.word	0x20000194

0800b798 <_sbrk_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4d06      	ldr	r5, [pc, #24]	@ (800b7b4 <_sbrk_r+0x1c>)
 800b79c:	2300      	movs	r3, #0
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	f7f5 fefe 	bl	80015a4 <_sbrk>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_sbrk_r+0x1a>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_sbrk_r+0x1a>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20000f88 	.word	0x20000f88

0800b7b8 <memcpy>:
 800b7b8:	440a      	add	r2, r1
 800b7ba:	4291      	cmp	r1, r2
 800b7bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7c0:	d100      	bne.n	800b7c4 <memcpy+0xc>
 800b7c2:	4770      	bx	lr
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7ce:	4291      	cmp	r1, r2
 800b7d0:	d1f9      	bne.n	800b7c6 <memcpy+0xe>
 800b7d2:	bd10      	pop	{r4, pc}

0800b7d4 <__assert_func>:
 800b7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7d6:	4614      	mov	r4, r2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <__assert_func+0x2c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	68d8      	ldr	r0, [r3, #12]
 800b7e2:	b954      	cbnz	r4, 800b7fa <__assert_func+0x26>
 800b7e4:	4b07      	ldr	r3, [pc, #28]	@ (800b804 <__assert_func+0x30>)
 800b7e6:	461c      	mov	r4, r3
 800b7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7ec:	9100      	str	r1, [sp, #0]
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	4905      	ldr	r1, [pc, #20]	@ (800b808 <__assert_func+0x34>)
 800b7f2:	f000 f841 	bl	800b878 <fiprintf>
 800b7f6:	f000 f8d5 	bl	800b9a4 <abort>
 800b7fa:	4b04      	ldr	r3, [pc, #16]	@ (800b80c <__assert_func+0x38>)
 800b7fc:	e7f4      	b.n	800b7e8 <__assert_func+0x14>
 800b7fe:	bf00      	nop
 800b800:	20000194 	.word	0x20000194
 800b804:	0800bd3e 	.word	0x0800bd3e
 800b808:	0800bd10 	.word	0x0800bd10
 800b80c:	0800bd03 	.word	0x0800bd03

0800b810 <_calloc_r>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	fba1 5402 	umull	r5, r4, r1, r2
 800b816:	b93c      	cbnz	r4, 800b828 <_calloc_r+0x18>
 800b818:	4629      	mov	r1, r5
 800b81a:	f7ff f92d 	bl	800aa78 <_malloc_r>
 800b81e:	4606      	mov	r6, r0
 800b820:	b928      	cbnz	r0, 800b82e <_calloc_r+0x1e>
 800b822:	2600      	movs	r6, #0
 800b824:	4630      	mov	r0, r6
 800b826:	bd70      	pop	{r4, r5, r6, pc}
 800b828:	220c      	movs	r2, #12
 800b82a:	6002      	str	r2, [r0, #0]
 800b82c:	e7f9      	b.n	800b822 <_calloc_r+0x12>
 800b82e:	462a      	mov	r2, r5
 800b830:	4621      	mov	r1, r4
 800b832:	f7fe f9de 	bl	8009bf2 <memset>
 800b836:	e7f5      	b.n	800b824 <_calloc_r+0x14>

0800b838 <__ascii_mbtowc>:
 800b838:	b082      	sub	sp, #8
 800b83a:	b901      	cbnz	r1, 800b83e <__ascii_mbtowc+0x6>
 800b83c:	a901      	add	r1, sp, #4
 800b83e:	b142      	cbz	r2, 800b852 <__ascii_mbtowc+0x1a>
 800b840:	b14b      	cbz	r3, 800b856 <__ascii_mbtowc+0x1e>
 800b842:	7813      	ldrb	r3, [r2, #0]
 800b844:	600b      	str	r3, [r1, #0]
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	1e10      	subs	r0, r2, #0
 800b84a:	bf18      	it	ne
 800b84c:	2001      	movne	r0, #1
 800b84e:	b002      	add	sp, #8
 800b850:	4770      	bx	lr
 800b852:	4610      	mov	r0, r2
 800b854:	e7fb      	b.n	800b84e <__ascii_mbtowc+0x16>
 800b856:	f06f 0001 	mvn.w	r0, #1
 800b85a:	e7f8      	b.n	800b84e <__ascii_mbtowc+0x16>

0800b85c <__ascii_wctomb>:
 800b85c:	4603      	mov	r3, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	b141      	cbz	r1, 800b874 <__ascii_wctomb+0x18>
 800b862:	2aff      	cmp	r2, #255	@ 0xff
 800b864:	d904      	bls.n	800b870 <__ascii_wctomb+0x14>
 800b866:	228a      	movs	r2, #138	@ 0x8a
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	f04f 30ff 	mov.w	r0, #4294967295
 800b86e:	4770      	bx	lr
 800b870:	700a      	strb	r2, [r1, #0]
 800b872:	2001      	movs	r0, #1
 800b874:	4770      	bx	lr
	...

0800b878 <fiprintf>:
 800b878:	b40e      	push	{r1, r2, r3}
 800b87a:	b503      	push	{r0, r1, lr}
 800b87c:	4601      	mov	r1, r0
 800b87e:	ab03      	add	r3, sp, #12
 800b880:	4805      	ldr	r0, [pc, #20]	@ (800b898 <fiprintf+0x20>)
 800b882:	f853 2b04 	ldr.w	r2, [r3], #4
 800b886:	6800      	ldr	r0, [r0, #0]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f7ff fd2d 	bl	800b2e8 <_vfiprintf_r>
 800b88e:	b002      	add	sp, #8
 800b890:	f85d eb04 	ldr.w	lr, [sp], #4
 800b894:	b003      	add	sp, #12
 800b896:	4770      	bx	lr
 800b898:	20000194 	.word	0x20000194

0800b89c <__swhatbuf_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	460c      	mov	r4, r1
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	b096      	sub	sp, #88	@ 0x58
 800b8a8:	4615      	mov	r5, r2
 800b8aa:	461e      	mov	r6, r3
 800b8ac:	da0d      	bge.n	800b8ca <__swhatbuf_r+0x2e>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8b4:	f04f 0100 	mov.w	r1, #0
 800b8b8:	bf14      	ite	ne
 800b8ba:	2340      	movne	r3, #64	@ 0x40
 800b8bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	6031      	str	r1, [r6, #0]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	b016      	add	sp, #88	@ 0x58
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	466a      	mov	r2, sp
 800b8cc:	f000 f848 	bl	800b960 <_fstat_r>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dbec      	blt.n	800b8ae <__swhatbuf_r+0x12>
 800b8d4:	9901      	ldr	r1, [sp, #4]
 800b8d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8de:	4259      	negs	r1, r3
 800b8e0:	4159      	adcs	r1, r3
 800b8e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8e6:	e7eb      	b.n	800b8c0 <__swhatbuf_r+0x24>

0800b8e8 <__smakebuf_r>:
 800b8e8:	898b      	ldrh	r3, [r1, #12]
 800b8ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ec:	079d      	lsls	r5, r3, #30
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	d507      	bpl.n	800b904 <__smakebuf_r+0x1c>
 800b8f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	6163      	str	r3, [r4, #20]
 800b900:	b003      	add	sp, #12
 800b902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b904:	ab01      	add	r3, sp, #4
 800b906:	466a      	mov	r2, sp
 800b908:	f7ff ffc8 	bl	800b89c <__swhatbuf_r>
 800b90c:	9f00      	ldr	r7, [sp, #0]
 800b90e:	4605      	mov	r5, r0
 800b910:	4639      	mov	r1, r7
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff f8b0 	bl	800aa78 <_malloc_r>
 800b918:	b948      	cbnz	r0, 800b92e <__smakebuf_r+0x46>
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	059a      	lsls	r2, r3, #22
 800b920:	d4ee      	bmi.n	800b900 <__smakebuf_r+0x18>
 800b922:	f023 0303 	bic.w	r3, r3, #3
 800b926:	f043 0302 	orr.w	r3, r3, #2
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	e7e2      	b.n	800b8f4 <__smakebuf_r+0xc>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	6020      	str	r0, [r4, #0]
 800b932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b93e:	b15b      	cbz	r3, 800b958 <__smakebuf_r+0x70>
 800b940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f81d 	bl	800b984 <_isatty_r>
 800b94a:	b128      	cbz	r0, 800b958 <__smakebuf_r+0x70>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	431d      	orrs	r5, r3
 800b95c:	81a5      	strh	r5, [r4, #12]
 800b95e:	e7cf      	b.n	800b900 <__smakebuf_r+0x18>

0800b960 <_fstat_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	@ (800b980 <_fstat_r+0x20>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	f7f5 fdf1 	bl	8001554 <_fstat>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d102      	bne.n	800b97c <_fstat_r+0x1c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b103      	cbz	r3, 800b97c <_fstat_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	20000f88 	.word	0x20000f88

0800b984 <_isatty_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d06      	ldr	r5, [pc, #24]	@ (800b9a0 <_isatty_r+0x1c>)
 800b988:	2300      	movs	r3, #0
 800b98a:	4604      	mov	r4, r0
 800b98c:	4608      	mov	r0, r1
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	f7f5 fdf0 	bl	8001574 <_isatty>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_isatty_r+0x1a>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_isatty_r+0x1a>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	20000f88 	.word	0x20000f88

0800b9a4 <abort>:
 800b9a4:	b508      	push	{r3, lr}
 800b9a6:	2006      	movs	r0, #6
 800b9a8:	f000 f82c 	bl	800ba04 <raise>
 800b9ac:	2001      	movs	r0, #1
 800b9ae:	f7f5 fd9d 	bl	80014ec <_exit>

0800b9b2 <_raise_r>:
 800b9b2:	291f      	cmp	r1, #31
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d904      	bls.n	800b9c6 <_raise_r+0x14>
 800b9bc:	2316      	movs	r3, #22
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c8:	b112      	cbz	r2, 800b9d0 <_raise_r+0x1e>
 800b9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ce:	b94b      	cbnz	r3, 800b9e4 <_raise_r+0x32>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f831 	bl	800ba38 <_getpid_r>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e0:	f000 b818 	b.w	800ba14 <_kill_r>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <_raise_r+0x4c>
 800b9e8:	1c59      	adds	r1, r3, #1
 800b9ea:	d103      	bne.n	800b9f4 <_raise_r+0x42>
 800b9ec:	2316      	movs	r3, #22
 800b9ee:	6003      	str	r3, [r0, #0]
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	e7e7      	b.n	800b9c4 <_raise_r+0x12>
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4798      	blx	r3
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7e0      	b.n	800b9c4 <_raise_r+0x12>
	...

0800ba04 <raise>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <raise+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff bfd2 	b.w	800b9b2 <_raise_r>
 800ba0e:	bf00      	nop
 800ba10:	20000194 	.word	0x20000194

0800ba14 <_kill_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	@ (800ba34 <_kill_r+0x20>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f5 fd53 	bl	80014cc <_kill>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_kill_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_kill_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	20000f88 	.word	0x20000f88

0800ba38 <_getpid_r>:
 800ba38:	f7f5 bd40 	b.w	80014bc <_getpid>

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
