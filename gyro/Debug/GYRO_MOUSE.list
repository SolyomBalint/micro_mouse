
GYRO_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800b900  0800b900  0000c900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce8  0800bce8  0000d350  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce8  0800bce8  0000cce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcf0  0800bcf0  0000d350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcf0  0800bcf0  0000ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcf4  0800bcf4  0000ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800bcf8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d350  2**0
                  CONTENTS
 10 .bss          00000c44  20000350  20000350  0000d350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f94  20000f94  0000d350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d350  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014123  00000000  00000000  0000d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003877  00000000  00000000  000214a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00024d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3b  00000000  00000000  00025eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f13  00000000  00000000  00026beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001676e  00000000  00000000  0004dafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd8f  00000000  00000000  0006426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fffb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000577c  00000000  00000000  00140040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001457bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8e4 	.word	0x0800b8e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0800b8e4 	.word	0x0800b8e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <_write>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	 HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <_write+0x28>)
 8000ed0:	f004 f848 	bl	8004f64 <HAL_UART_Transmit>
}
 8000ed4:	bf00      	nop
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003c4 	.word	0x200003c4

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee8:	b088      	sub	sp, #32
 8000eea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f001 f954 	bl	8002198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f830 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 f8f8 	bl	80010e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ef8:	f000 f8cc 	bl	8001094 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000efc:	f007 fc34 	bl	8008768 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000f00:	f000 f892 	bl	8001028 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000f04:	f001 f880 	bl	8002008 <BSP_GYRO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_GYRO_GetXYZ(valxyz);
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f930 	bl	8002170 <BSP_GYRO_GetXYZ>
	  printf("x: %f y: %f z: %f \r\n", valxyz[0],valxyz[1] ,valxyz[2]);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fb28 	bl	8000568 <__aeabi_f2d>
 8000f18:	4680      	mov	r8, r0
 8000f1a:	4689      	mov	r9, r1
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb22 	bl	8000568 <__aeabi_f2d>
 8000f24:	4604      	mov	r4, r0
 8000f26:	460d      	mov	r5, r1
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb1c 	bl	8000568 <__aeabi_f2d>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f38:	e9cd 4500 	strd	r4, r5, [sp]
 8000f3c:	4642      	mov	r2, r8
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <main+0x6c>)
 8000f42:	f008 fd55 	bl	80099f0 <iprintf>
	  HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f001 f998 	bl	800227c <HAL_Delay>
  {
 8000f4c:	bf00      	nop
 8000f4e:	e7db      	b.n	8000f08 <main+0x24>
 8000f50:	0800b900 	.word	0x0800b900

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	@ 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	@ 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f008 fd99 	bl	8009a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <SystemClock_Config+0xcc>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <SystemClock_Config+0xd0>)
 8000f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc8:	23a8      	movs	r3, #168	@ 0xa8
 8000fca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ff8f 	bl	8003efc <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe4:	f000 f8d8 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2105      	movs	r1, #5
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f9f0 	bl	80043ec <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001012:	f000 f8c1 	bl	8001198 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	@ 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_SPI5_Init+0x64>)
 800102e:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <MX_SPI5_Init+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_SPI5_Init+0x64>)
 8001034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI5_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_SPI5_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_SPI5_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI5_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_SPI5_Init+0x64>)
 8001054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001058:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI5_Init+0x64>)
 800105c:	2218      	movs	r2, #24
 800105e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_SPI5_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI5_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_SPI5_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI5_Init+0x64>)
 8001074:	220a      	movs	r2, #10
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_SPI5_Init+0x64>)
 800107a:	f003 fbd7 	bl	800482c <HAL_SPI_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001084:	f000 f888 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000036c 	.word	0x2000036c
 8001090:	40015000 	.word	0x40015000

08001094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART1_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010cc:	f003 fefa 	bl	8004ec4 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f000 f85f 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003c4 	.word	0x200003c4
 80010e4:	40011000 	.word	0x40011000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001108:	f043 0320 	orr.w	r3, r3, #32
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_GPIO_Init+0xa8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_GPIO_Init+0xa8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <MX_GPIO_Init+0xa8>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_GPIO_Init+0xa8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001176:	2302      	movs	r3, #2
 8001178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_GPIO_Init+0xac>)
 8001182:	f001 f9b1 	bl	80024e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_SPI_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12c      	bne.n	8001270 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800124e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x8c>)
 800126c:	f001 f93c 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40015000 	.word	0x40015000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400

08001284 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_SPI_MspDeInit+0x30>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10a      	bne.n	80012ac <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_SPI_MspDeInit+0x34>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <HAL_SPI_MspDeInit+0x34>)
 800129c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80012a2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <HAL_SPI_MspDeInit+0x38>)
 80012a8:	f001 faca 	bl	8002840 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40015000 	.word	0x40015000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021400 	.word	0x40021400

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12c      	bne.n	800133c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_UART_MspInit+0x88>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800131a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132c:	2307      	movs	r3, #7
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <HAL_UART_MspInit+0x8c>)
 8001338:	f001 f8d6 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	@ 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40011000 	.word	0x40011000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 ff49 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <OTG_HS_IRQHandler+0x10>)
 80013b6:	f001 fcac 	bl	8002d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000950 	.word	0x20000950

080013c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return 1;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_kill>:

int _kill(int pid, int sig)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013de:	f008 fbaf 	bl	8009b40 <__errno>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2216      	movs	r2, #22
 80013e6:	601a      	str	r2, [r3, #0]
  return -1;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_exit>:

void _exit (int status)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ffe7 	bl	80013d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001406:	bf00      	nop
 8001408:	e7fd      	b.n	8001406 <_exit+0x12>

0800140a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e00a      	b.n	8001432 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141c:	f3af 8000 	nop.w
 8001420:	4601      	mov	r1, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	60ba      	str	r2, [r7, #8]
 8001428:	b2ca      	uxtb	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbf0      	blt.n	800141c <_read+0x12>
  }

  return len;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800146c:	605a      	str	r2, [r3, #4]
  return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_isatty>:

int _isatty(int file)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f008 fb30 	bl	8009b40 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20030000 	.word	0x20030000
 800150c:	00000400 	.word	0x00000400
 8001510:	2000040c 	.word	0x2000040c
 8001514:	20000f98 	.word	0x20000f98

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001574 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001540:	f7ff ffea 	bl	8001518 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	@ (800157c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	@ (8001588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800156a:	f008 faef 	bl	8009b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff fcb9 	bl	8000ee4 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001574:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001580:	0800bcf8 	.word	0x0800bcf8
  ldr r2, =_sbss
 8001584:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001588:	20000f94 	.word	0x20000f94

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>

0800158e <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800159c:	f000 fc7c 	bl	8001e98 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80015a6:	f107 030f 	add.w	r3, r7, #15
 80015aa:	2201      	movs	r2, #1
 80015ac:	2120      	movs	r1, #32
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fcbe 	bl	8001f30 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80015be:	f107 030f 	add.w	r3, r7, #15
 80015c2:	2201      	movs	r2, #1
 80015c4:	2123      	movs	r1, #35	@ 0x23
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fcb2 	bl	8001f30 <GYRO_IO_Write>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80015e8:	f000 fc56 	bl	8001e98 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	2201      	movs	r2, #1
 80015f0:	210f      	movs	r1, #15
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fcce 	bl	8001f94 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	2201      	movs	r2, #1
 800160c:	2124      	movs	r1, #36	@ 0x24
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fcc0 	bl	8001f94 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800161a:	b2db      	uxtb	r3, r3
 800161c:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	2201      	movs	r2, #1
 8001622:	2124      	movs	r1, #36	@ 0x24
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fc83 	bl	8001f30 <GYRO_IO_Write>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001646:	f107 030f 	add.w	r3, r7, #15
 800164a:	2201      	movs	r2, #1
 800164c:	2120      	movs	r1, #32
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fc6e 	bl	8001f30 <GYRO_IO_Write>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800166e:	f107 030f 	add.w	r3, r7, #15
 8001672:	2201      	movs	r2, #1
 8001674:	2130      	movs	r1, #48	@ 0x30
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fc8c 	bl	8001f94 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800167c:	f107 030e 	add.w	r3, r7, #14
 8001680:	2201      	movs	r2, #1
 8001682:	2122      	movs	r1, #34	@ 0x22
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fc85 	bl	8001f94 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001690:	b2db      	uxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	121b      	asrs	r3, r3, #8
 800169a:	b25a      	sxtb	r2, r3
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	f023 0320 	bic.w	r3, r3, #32
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80016be:	f107 030f 	add.w	r3, r7, #15
 80016c2:	2201      	movs	r2, #1
 80016c4:	2130      	movs	r1, #48	@ 0x30
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fc32 	bl	8001f30 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80016cc:	f107 030e 	add.w	r3, r7, #14
 80016d0:	2201      	movs	r2, #1
 80016d2:	2122      	movs	r1, #34	@ 0x22
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fc2b 	bl	8001f30 <GYRO_IO_Write>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80016ec:	f107 030f 	add.w	r3, r7, #15
 80016f0:	2201      	movs	r2, #1
 80016f2:	2122      	movs	r1, #34	@ 0x22
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fc4d 	bl	8001f94 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10a      	bne.n	8001716 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001706:	b2db      	uxtb	r3, r3
 8001708:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001710:	b2db      	uxtb	r3, r3
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e00c      	b.n	8001730 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d109      	bne.n	8001730 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	f023 0308 	bic.w	r3, r3, #8
 8001722:	b2db      	uxtb	r3, r3
 8001724:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	b2db      	uxtb	r3, r3
 800172e:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001730:	f107 030f 	add.w	r3, r7, #15
 8001734:	2201      	movs	r2, #1
 8001736:	2122      	movs	r1, #34	@ 0x22
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fbf9 	bl	8001f30 <GYRO_IO_Write>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001750:	f107 030f 	add.w	r3, r7, #15
 8001754:	2201      	movs	r2, #1
 8001756:	2122      	movs	r1, #34	@ 0x22
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fc1b 	bl	8001f94 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800176a:	b2db      	uxtb	r3, r3
 800176c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e009      	b.n	8001788 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d106      	bne.n	8001788 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	f023 0308 	bic.w	r3, r3, #8
 8001780:	b2db      	uxtb	r3, r3
 8001782:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001788:	f107 030f 	add.w	r3, r7, #15
 800178c:	2201      	movs	r2, #1
 800178e:	2122      	movs	r1, #34	@ 0x22
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fbcd 	bl	8001f30 <GYRO_IO_Write>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80017a8:	f107 030f 	add.w	r3, r7, #15
 80017ac:	2201      	movs	r2, #1
 80017ae:	2121      	movs	r1, #33	@ 0x21
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fbef 	bl	8001f94 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80017ca:	f107 030f 	add.w	r3, r7, #15
 80017ce:	2201      	movs	r2, #1
 80017d0:	2121      	movs	r1, #33	@ 0x21
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fbac 	bl	8001f30 <GYRO_IO_Write>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80017ea:	f107 030f 	add.w	r3, r7, #15
 80017ee:	2201      	movs	r2, #1
 80017f0:	2124      	movs	r1, #36	@ 0x24
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fbce 	bl	8001f94 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f023 0310 	bic.w	r3, r3, #16
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4313      	orrs	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800180c:	f107 030f 	add.w	r3, r7, #15
 8001810:	2201      	movs	r2, #1
 8001812:	2124      	movs	r1, #36	@ 0x24
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fb8b 	bl	8001f30 <GYRO_IO_Write>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	2300      	movs	r3, #0
 8001832:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800184c:	f107 030f 	add.w	r3, r7, #15
 8001850:	2201      	movs	r2, #1
 8001852:	2123      	movs	r1, #35	@ 0x23
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fb9d 	bl	8001f94 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	2206      	movs	r2, #6
 8001860:	2128      	movs	r1, #40	@ 0x28
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fb96 	bl	8001f94 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d121      	bne.n	80018b6 <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	e01a      	b.n	80018ae <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3301      	adds	r3, #1
 800187e:	3328      	adds	r3, #40	@ 0x28
 8001880:	443b      	add	r3, r7
 8001882:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	0052      	lsls	r2, r2, #1
 800188e:	3228      	adds	r2, #40	@ 0x28
 8001890:	443a      	add	r2, r7
 8001892:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	b21a      	sxth	r2, r3
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	3328      	adds	r3, #40	@ 0x28
 80018a2:	443b      	add	r3, r7
 80018a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	3301      	adds	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	dde1      	ble.n	8001878 <I3G4250D_ReadXYZAngRate+0x54>
 80018b4:	e020      	b.n	80018f8 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	e01a      	b.n	80018f2 <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	3328      	adds	r3, #40	@ 0x28
 80018c2:	443b      	add	r3, r7
 80018c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	0052      	lsls	r2, r2, #1
 80018d0:	3201      	adds	r2, #1
 80018d2:	3228      	adds	r2, #40	@ 0x28
 80018d4:	443a      	add	r2, r7
 80018d6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80018da:	4413      	add	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b21a      	sxth	r2, r3
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	3328      	adds	r3, #40	@ 0x28
 80018e6:	443b      	add	r3, r7
 80018e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	3301      	adds	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	dde1      	ble.n	80018bc <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d00c      	beq.n	800191c <I3G4250D_ReadXYZAngRate+0xf8>
 8001902:	2b20      	cmp	r3, #32
 8001904:	dc0d      	bgt.n	8001922 <I3G4250D_ReadXYZAngRate+0xfe>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <I3G4250D_ReadXYZAngRate+0xec>
 800190a:	2b10      	cmp	r3, #16
 800190c:	d003      	beq.n	8001916 <I3G4250D_ReadXYZAngRate+0xf2>
 800190e:	e008      	b.n	8001922 <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <I3G4250D_ReadXYZAngRate+0x144>)
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001914:	e005      	b.n	8001922 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <I3G4250D_ReadXYZAngRate+0x148>)
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800191a:	e002      	b.n	8001922 <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <I3G4250D_ReadXYZAngRate+0x14c>)
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001920:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	e016      	b.n	8001956 <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3328      	adds	r3, #40	@ 0x28
 800192e:	443b      	add	r3, r7
 8001930:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3301      	adds	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2b02      	cmp	r3, #2
 800195a:	dde5      	ble.n	8001928 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	410c0000 	.word	0x410c0000
 800196c:	418c0000 	.word	0x418c0000
 8001970:	428c0000 	.word	0x428c0000

08001974 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001982:	f000 fa89 	bl	8001e98 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800198c:	f107 030f 	add.w	r3, r7, #15
 8001990:	2201      	movs	r2, #1
 8001992:	2120      	movs	r1, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f000 facb 	bl	8001f30 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80019a4:	f107 030f 	add.w	r3, r7, #15
 80019a8:	2201      	movs	r2, #1
 80019aa:	2123      	movs	r1, #35	@ 0x23
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fabf 	bl	8001f30 <GYRO_IO_Write>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80019ce:	f000 fa63 	bl	8001e98 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	2201      	movs	r2, #1
 80019d6:	210f      	movs	r1, #15
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fadb 	bl	8001f94 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80019de:	79fb      	ldrb	r3, [r7, #7]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2201      	movs	r2, #1
 80019f2:	2124      	movs	r1, #36	@ 0x24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 facd 	bl	8001f94 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	2201      	movs	r2, #1
 8001a08:	2124      	movs	r1, #36	@ 0x24
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa90 	bl	8001f30 <GYRO_IO_Write>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001a2c:	f107 030f 	add.w	r3, r7, #15
 8001a30:	2201      	movs	r2, #1
 8001a32:	2120      	movs	r1, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fa7b 	bl	8001f30 <GYRO_IO_Write>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	2300      	movs	r3, #0
 8001a52:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001a54:	f107 030f 	add.w	r3, r7, #15
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2130      	movs	r1, #48	@ 0x30
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fa99 	bl	8001f94 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001a62:	f107 030e 	add.w	r3, r7, #14
 8001a66:	2201      	movs	r2, #1
 8001a68:	2122      	movs	r1, #34	@ 0x22
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fa92 	bl	8001f94 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	121b      	asrs	r3, r3, #8
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	f023 0320 	bic.w	r3, r3, #32
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001aa4:	f107 030f 	add.w	r3, r7, #15
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2130      	movs	r1, #48	@ 0x30
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fa3f 	bl	8001f30 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001ab2:	f107 030e 	add.w	r3, r7, #14
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2122      	movs	r1, #34	@ 0x22
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa38 	bl	8001f30 <GYRO_IO_Write>
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ad2:	f107 030f 	add.w	r3, r7, #15
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2122      	movs	r1, #34	@ 0x22
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fa5a 	bl	8001f94 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e00c      	b.n	8001b16 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d109      	bne.n	8001b16 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f023 0308 	bic.w	r3, r3, #8
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b16:	f107 030f 	add.w	r3, r7, #15
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2122      	movs	r1, #34	@ 0x22
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fa06 	bl	8001f30 <GYRO_IO_Write>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b36:	f107 030f 	add.w	r3, r7, #15
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2122      	movs	r1, #34	@ 0x22
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fa28 	bl	8001f94 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e009      	b.n	8001b6e <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f023 0308 	bic.w	r3, r3, #8
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b6e:	f107 030f 	add.w	r3, r7, #15
 8001b72:	2201      	movs	r2, #1
 8001b74:	2122      	movs	r1, #34	@ 0x22
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f9da 	bl	8001f30 <GYRO_IO_Write>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	2201      	movs	r2, #1
 8001b94:	2121      	movs	r1, #33	@ 0x21
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f9fc 	bl	8001f94 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001bb0:	f107 030f 	add.w	r3, r7, #15
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2121      	movs	r1, #33	@ 0x21
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f9b9 	bl	8001f30 <GYRO_IO_Write>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bd0:	f107 030f 	add.w	r3, r7, #15
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2124      	movs	r1, #36	@ 0x24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f9db 	bl	8001f94 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	f023 0310 	bic.w	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bf2:	f107 030f 	add.w	r3, r7, #15
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2124      	movs	r1, #36	@ 0x24
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f998 	bl	8001f30 <GYRO_IO_Write>
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	2300      	movs	r3, #0
 8001c16:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001c30:	f107 030f 	add.w	r3, r7, #15
 8001c34:	2201      	movs	r2, #1
 8001c36:	2123      	movs	r1, #35	@ 0x23
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f9ab 	bl	8001f94 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	2206      	movs	r2, #6
 8001c44:	2128      	movs	r1, #40	@ 0x28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f9a4 	bl	8001f94 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d121      	bne.n	8001c9a <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	e01a      	b.n	8001c92 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	3301      	adds	r3, #1
 8001c62:	3328      	adds	r3, #40	@ 0x28
 8001c64:	443b      	add	r3, r7
 8001c66:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	3228      	adds	r2, #40	@ 0x28
 8001c74:	443a      	add	r2, r7
 8001c76:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3328      	adds	r3, #40	@ 0x28
 8001c86:	443b      	add	r3, r7
 8001c88:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dde1      	ble.n	8001c5c <L3GD20_ReadXYZAngRate+0x54>
 8001c98:	e020      	b.n	8001cdc <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	e01a      	b.n	8001cd6 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	3328      	adds	r3, #40	@ 0x28
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	0052      	lsls	r2, r2, #1
 8001cb4:	3201      	adds	r2, #1
 8001cb6:	3228      	adds	r2, #40	@ 0x28
 8001cb8:	443a      	add	r2, r7
 8001cba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	3328      	adds	r3, #40	@ 0x28
 8001cca:	443b      	add	r3, r7
 8001ccc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	dde1      	ble.n	8001ca0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d00c      	beq.n	8001d00 <L3GD20_ReadXYZAngRate+0xf8>
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	dc0d      	bgt.n	8001d06 <L3GD20_ReadXYZAngRate+0xfe>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <L3GD20_ReadXYZAngRate+0xec>
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d003      	beq.n	8001cfa <L3GD20_ReadXYZAngRate+0xf2>
 8001cf2:	e008      	b.n	8001d06 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <L3GD20_ReadXYZAngRate+0x144>)
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001cf8:	e005      	b.n	8001d06 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <L3GD20_ReadXYZAngRate+0x148>)
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001cfe:	e002      	b.n	8001d06 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <L3GD20_ReadXYZAngRate+0x14c>)
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001d04:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	e016      	b.n	8001d3a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	3328      	adds	r3, #40	@ 0x28
 8001d12:	443b      	add	r3, r7
 8001d14:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	3301      	adds	r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	dde5      	ble.n	8001d0c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	410c0000 	.word	0x410c0000
 8001d50:	418c0000 	.word	0x418c0000
 8001d54:	428c0000 	.word	0x428c0000

08001d58 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d5c:	4819      	ldr	r0, [pc, #100]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d5e:	f002 ffc6 	bl	8004cee <HAL_SPI_GetState>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d12b      	bne.n	8001dc0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001d68:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <SPIx_Init+0x70>)
 8001d6c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d70:	2218      	movs	r2, #24
 8001d72:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d8e:	2207      	movs	r2, #7
 8001d90:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001da4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001dae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001db2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001db4:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001db6:	f000 f835 	bl	8001e24 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001dba:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <SPIx_Init+0x6c>)
 8001dbc:	f002 fd36 	bl	800482c <HAL_SPI_Init>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000410 	.word	0x20000410
 8001dc8:	40015000 	.word	0x40015000

08001dcc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <SPIx_WriteRead+0x38>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f107 020f 	add.w	r2, r7, #15
 8001de2:	1df9      	adds	r1, r7, #7
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2301      	movs	r3, #1
 8001de8:	4807      	ldr	r0, [pc, #28]	@ (8001e08 <SPIx_WriteRead+0x3c>)
 8001dea:	f002 fdd0 	bl	800498e <HAL_SPI_TransmitReceive>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001df4:	f000 f80a 	bl	8001e0c <SPIx_Error>
  }

  return receivedbyte;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000006c 	.word	0x2000006c
 8001e08:	20000410 	.word	0x20000410

08001e0c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e10:	4803      	ldr	r0, [pc, #12]	@ (8001e20 <SPIx_Error+0x14>)
 8001e12:	f002 fd94 	bl	800493e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e16:	f7ff ff9f 	bl	8001d58 <SPIx_Init>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000410 	.word	0x20000410

08001e24 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	4a16      	ldr	r2, [pc, #88]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <SPIx_MspInit+0x6c>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001e64:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e72:	2301      	movs	r3, #1
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001e76:	2305      	movs	r3, #5
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4804      	ldr	r0, [pc, #16]	@ (8001e94 <SPIx_MspInit+0x70>)
 8001e82:	f000 fb31 	bl	80024e8 <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	@ 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40021400 	.word	0x40021400

08001e98 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4815      	ldr	r0, [pc, #84]	@ (8001f28 <GYRO_IO_Init+0x90>)
 8001ed2:	f000 fb09 	bl	80024e8 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <GYRO_IO_Init+0x90>)
 8001edc:	f000 fdbc 	bl	8002a58 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <GYRO_IO_Init+0x8c>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001efc:	2306      	movs	r3, #6
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <GYRO_IO_Init+0x94>)
 8001f14:	f000 fae8 	bl	80024e8 <HAL_GPIO_Init>

  SPIx_Init();
 8001f18:	f7ff ff1e 	bl	8001d58 <SPIx_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001f40:	883b      	ldrh	r3, [r7, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d903      	bls.n	8001f4e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f4c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2102      	movs	r1, #2
 8001f52:	480f      	ldr	r0, [pc, #60]	@ (8001f90 <GYRO_IO_Write+0x60>)
 8001f54:	f000 fd80 	bl	8002a58 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff36 	bl	8001dcc <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001f60:	e00a      	b.n	8001f78 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff30 	bl	8001dcc <SPIx_WriteRead>
    NumByteToWrite--;
 8001f6c:	883b      	ldrh	r3, [r7, #0]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3301      	adds	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001f78:	883b      	ldrh	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f1      	bne.n	8001f62 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2102      	movs	r1, #2
 8001f82:	4803      	ldr	r0, [pc, #12]	@ (8001f90 <GYRO_IO_Write+0x60>)
 8001f84:	f000 fd68 	bl	8002a58 <HAL_GPIO_WritePin>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40020800 	.word	0x40020800

08001f94 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001fa4:	883b      	ldrh	r3, [r7, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d904      	bls.n	8001fb4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001fb0:	70fb      	strb	r3, [r7, #3]
 8001fb2:	e003      	b.n	8001fbc <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fba:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	4810      	ldr	r0, [pc, #64]	@ (8002004 <GYRO_IO_Read+0x70>)
 8001fc2:	f000 fd49 	bl	8002a58 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff feff 	bl	8001dcc <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001fce:	e00c      	b.n	8001fea <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fefb 	bl	8001dcc <SPIx_WriteRead>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001fde:	883b      	ldrh	r3, [r7, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001fea:	883b      	ldrh	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ef      	bne.n	8001fd0 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4803      	ldr	r0, [pc, #12]	@ (8002004 <GYRO_IO_Read+0x70>)
 8001ff6:	f000 fd2f 	bl	8002a58 <HAL_GPIO_WritePin>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40020800 	.word	0x40020800

08002008 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002012:	2300      	movs	r3, #0
 8002014:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8002016:	2300      	movs	r3, #0
 8002018:	703b      	strb	r3, [r7, #0]
 800201a:	2300      	movs	r3, #0
 800201c:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800201e:	4b51      	ldr	r3, [pc, #324]	@ (8002164 <BSP_GYRO_Init+0x15c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4798      	blx	r3
 8002024:	4603      	mov	r3, r0
 8002026:	2bd4      	cmp	r3, #212	@ 0xd4
 8002028:	d005      	beq.n	8002036 <BSP_GYRO_Init+0x2e>
 800202a:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <BSP_GYRO_Init+0x15c>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4798      	blx	r3
 8002030:	4603      	mov	r3, r0
 8002032:	2bd5      	cmp	r3, #213	@ 0xd5
 8002034:	d145      	bne.n	80020c2 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002036:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <BSP_GYRO_Init+0x160>)
 8002038:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <BSP_GYRO_Init+0x15c>)
 800203a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 800203c:	2308      	movs	r3, #8
 800203e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002040:	2300      	movs	r3, #0
 8002042:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002044:	2307      	movs	r3, #7
 8002046:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002048:	2330      	movs	r3, #48	@ 0x30
 800204a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800204c:	2300      	movs	r3, #0
 800204e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002050:	2300      	movs	r3, #0
 8002052:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002054:	2310      	movs	r3, #16
 8002056:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002058:	793a      	ldrb	r2, [r7, #4]
 800205a:	797b      	ldrb	r3, [r7, #5]
 800205c:	4313      	orrs	r3, r2
 800205e:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002060:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002062:	4313      	orrs	r3, r2
 8002064:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002066:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002068:	4313      	orrs	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800206e:	7a3a      	ldrb	r2, [r7, #8]
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	4313      	orrs	r3, r2
 8002074:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002076:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002078:	4313      	orrs	r3, r2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b29a      	uxth	r2, r3
 8002080:	89bb      	ldrh	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002086:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <BSP_GYRO_Init+0x160>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	89ba      	ldrh	r2, [r7, #12]
 800208e:	4610      	mov	r0, r2
 8002090:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002092:	2300      	movs	r3, #0
 8002094:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002096:	2300      	movs	r3, #0
 8002098:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800209a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800209c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80020a4:	4b30      	ldr	r3, [pc, #192]	@ (8002168 <BSP_GYRO_Init+0x160>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	89ba      	ldrh	r2, [r7, #12]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	4610      	mov	r0, r2
 80020b0:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80020b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <BSP_GYRO_Init+0x160>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	2010      	movs	r0, #16
 80020ba:	4798      	blx	r3

    ret = GYRO_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e04a      	b.n	8002158 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <BSP_GYRO_Init+0x164>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4798      	blx	r3
 80020c8:	4603      	mov	r3, r0
 80020ca:	2bd3      	cmp	r3, #211	@ 0xd3
 80020cc:	d144      	bne.n	8002158 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <BSP_GYRO_Init+0x160>)
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <BSP_GYRO_Init+0x164>)
 80020d2:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80020d4:	2308      	movs	r3, #8
 80020d6:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80020d8:	2300      	movs	r3, #0
 80020da:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80020dc:	2307      	movs	r3, #7
 80020de:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80020e0:	2330      	movs	r3, #48	@ 0x30
 80020e2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80020e4:	2300      	movs	r3, #0
 80020e6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80020e8:	2300      	movs	r3, #0
 80020ea:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80020ec:	2310      	movs	r3, #16
 80020ee:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80020f0:	793a      	ldrb	r2, [r7, #4]
 80020f2:	797b      	ldrb	r3, [r7, #5]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80020f8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002100:	4313      	orrs	r3, r2
 8002102:	b2db      	uxtb	r3, r3
 8002104:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002106:	7a3a      	ldrb	r2, [r7, #8]
 8002108:	7a7b      	ldrb	r3, [r7, #9]
 800210a:	4313      	orrs	r3, r2
 800210c:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 800210e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002110:	4313      	orrs	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b29a      	uxth	r2, r3
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <BSP_GYRO_Init+0x160>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	89ba      	ldrh	r2, [r7, #12]
 8002126:	4610      	mov	r0, r2
 8002128:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800212a:	2300      	movs	r3, #0
 800212c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800212e:	2300      	movs	r3, #0
 8002130:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002132:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002134:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002136:	4313      	orrs	r3, r2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <BSP_GYRO_Init+0x160>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	89ba      	ldrh	r2, [r7, #12]
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	4610      	mov	r0, r2
 8002148:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <BSP_GYRO_Init+0x160>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	2010      	movs	r0, #16
 8002152:	4798      	blx	r3

    ret = GYRO_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  }
/* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000038 	.word	0x20000038
 8002168:	20000468 	.word	0x20000468
 800216c:	20000004 	.word	0x20000004

08002170 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <BSP_GYRO_GetXYZ+0x24>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <BSP_GYRO_GetXYZ+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
  }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000468 	.word	0x20000468

08002198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_Init+0x40>)
 80021a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_Init+0x40>)
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_Init+0x40>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 f94f 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f000 f808 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7fe ffea 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f967 	bl	80024ce <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f92f 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000000 	.word	0x20000000
 8002234:	20000074 	.word	0x20000074
 8002238:	20000070 	.word	0x20000070

0800223c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000074 	.word	0x20000074
 8002260:	2000046c 	.word	0x2000046c

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000046c 	.word	0x2000046c

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000074 	.word	0x20000074

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff3e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff31 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e177      	b.n	80027f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 8166 	bne.w	80027ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80c0 	beq.w	80027ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b66      	ldr	r3, [pc, #408]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	4a65      	ldr	r2, [pc, #404]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267c:	6453      	str	r3, [r2, #68]	@ 0x44
 800267e:	4b63      	ldr	r3, [pc, #396]	@ (800280c <HAL_GPIO_Init+0x324>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a61      	ldr	r2, [pc, #388]	@ (8002810 <HAL_GPIO_Init+0x328>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a58      	ldr	r2, [pc, #352]	@ (8002814 <HAL_GPIO_Init+0x32c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d037      	beq.n	8002726 <HAL_GPIO_Init+0x23e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a57      	ldr	r2, [pc, #348]	@ (8002818 <HAL_GPIO_Init+0x330>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_GPIO_Init+0x23a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a56      	ldr	r2, [pc, #344]	@ (800281c <HAL_GPIO_Init+0x334>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d02b      	beq.n	800271e <HAL_GPIO_Init+0x236>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a55      	ldr	r2, [pc, #340]	@ (8002820 <HAL_GPIO_Init+0x338>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x232>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a54      	ldr	r2, [pc, #336]	@ (8002824 <HAL_GPIO_Init+0x33c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x22e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a53      	ldr	r2, [pc, #332]	@ (8002828 <HAL_GPIO_Init+0x340>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x22a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_GPIO_Init+0x344>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a51      	ldr	r2, [pc, #324]	@ (8002830 <HAL_GPIO_Init+0x348>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a50      	ldr	r2, [pc, #320]	@ (8002834 <HAL_GPIO_Init+0x34c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002838 <HAL_GPIO_Init+0x350>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x21a>
 80026fe:	2309      	movs	r3, #9
 8002700:	e012      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002702:	230a      	movs	r3, #10
 8002704:	e010      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002706:	2308      	movs	r3, #8
 8002708:	e00e      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800270a:	2307      	movs	r3, #7
 800270c:	e00c      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800270e:	2306      	movs	r3, #6
 8002710:	e00a      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002712:	2305      	movs	r3, #5
 8002714:	e008      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002716:	2304      	movs	r3, #4
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800271a:	2303      	movs	r3, #3
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x240>
 800271e:	2302      	movs	r3, #2
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x240>
 8002726:	2300      	movs	r3, #0
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f002 0203 	and.w	r2, r2, #3
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002738:	4935      	ldr	r1, [pc, #212]	@ (8002810 <HAL_GPIO_Init+0x328>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002746:	4b3d      	ldr	r3, [pc, #244]	@ (800283c <HAL_GPIO_Init+0x354>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276a:	4a34      	ldr	r2, [pc, #208]	@ (800283c <HAL_GPIO_Init+0x354>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002770:	4b32      	ldr	r3, [pc, #200]	@ (800283c <HAL_GPIO_Init+0x354>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002794:	4a29      	ldr	r2, [pc, #164]	@ (800283c <HAL_GPIO_Init+0x354>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279a:	4b28      	ldr	r3, [pc, #160]	@ (800283c <HAL_GPIO_Init+0x354>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027be:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_GPIO_Init+0x354>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_GPIO_Init+0x354>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <HAL_GPIO_Init+0x354>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f ae84 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40013800 	.word	0x40013800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000
 8002828:	40021400 	.word	0x40021400
 800282c:	40021800 	.word	0x40021800
 8002830:	40021c00 	.word	0x40021c00
 8002834:	40022000 	.word	0x40022000
 8002838:	40022400 	.word	0x40022400
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e0d9      	b.n	8002a10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	f040 80c9 	bne.w	8002a0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002878:	4a6b      	ldr	r2, [pc, #428]	@ (8002a28 <HAL_GPIO_DeInit+0x1e8>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a63      	ldr	r2, [pc, #396]	@ (8002a2c <HAL_GPIO_DeInit+0x1ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d037      	beq.n	8002912 <HAL_GPIO_DeInit+0xd2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a62      	ldr	r2, [pc, #392]	@ (8002a30 <HAL_GPIO_DeInit+0x1f0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d031      	beq.n	800290e <HAL_GPIO_DeInit+0xce>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a61      	ldr	r2, [pc, #388]	@ (8002a34 <HAL_GPIO_DeInit+0x1f4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_DeInit+0xca>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a60      	ldr	r2, [pc, #384]	@ (8002a38 <HAL_GPIO_DeInit+0x1f8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_DeInit+0xc6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a5f      	ldr	r2, [pc, #380]	@ (8002a3c <HAL_GPIO_DeInit+0x1fc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_DeInit+0xc2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002a40 <HAL_GPIO_DeInit+0x200>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_DeInit+0xbe>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a44 <HAL_GPIO_DeInit+0x204>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_DeInit+0xba>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002a48 <HAL_GPIO_DeInit+0x208>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_DeInit+0xb6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a5b      	ldr	r2, [pc, #364]	@ (8002a4c <HAL_GPIO_DeInit+0x20c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_DeInit+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002a50 <HAL_GPIO_DeInit+0x210>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_DeInit+0xae>
 80028ea:	2309      	movs	r3, #9
 80028ec:	e012      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 80028ee:	230a      	movs	r3, #10
 80028f0:	e010      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 80028f2:	2308      	movs	r3, #8
 80028f4:	e00e      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 80028fa:	2306      	movs	r3, #6
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_DeInit+0xd4>
 8002912:	2300      	movs	r3, #0
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d132      	bne.n	800298a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002924:	4b4b      	ldr	r3, [pc, #300]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	4949      	ldr	r1, [pc, #292]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 800292e:	4013      	ands	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002932:	4b48      	ldr	r3, [pc, #288]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	4946      	ldr	r1, [pc, #280]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 800293c:	4013      	ands	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002940:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	4942      	ldr	r1, [pc, #264]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 800294a:	4013      	ands	r3, r2
 800294c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800294e:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	493f      	ldr	r1, [pc, #252]	@ (8002a54 <HAL_GPIO_DeInit+0x214>)
 8002958:	4013      	ands	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800296c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_GPIO_DeInit+0x1e8>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	43da      	mvns	r2, r3
 800297c:	482a      	ldr	r0, [pc, #168]	@ (8002a28 <HAL_GPIO_DeInit+0x1e8>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	400a      	ands	r2, r1
 8002984:	3302      	adds	r3, #2
 8002986:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2103      	movs	r1, #3
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	08d2      	lsrs	r2, r2, #3
 80029c0:	4019      	ands	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2103      	movs	r1, #3
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2101      	movs	r1, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2103      	movs	r1, #3
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b0f      	cmp	r3, #15
 8002a14:	f67f af22 	bls.w	800285c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40022400 	.word	0x40022400
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af02      	add	r7, sp, #8
 8002a90:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e101      	b.n	8002ca0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f005 ff7c 	bl	80089b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2203      	movs	r2, #3
 8002ac0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aca:	d102      	bne.n	8002ad2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 ff17 	bl	800590a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7c1a      	ldrb	r2, [r3, #16]
 8002ae4:	f88d 2000 	strb.w	r2, [sp]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	f002 fdf6 	bl	80056dc <USB_CoreInit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0ce      	b.n	8002ca0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 ff0f 	bl	800592c <USB_SetCurrentMode>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0bf      	b.n	8002ca0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e04a      	b.n	8002bbc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3315      	adds	r3, #21
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3314      	adds	r3, #20
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	b298      	uxth	r0, r3
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	332e      	adds	r3, #46	@ 0x2e
 8002b62:	4602      	mov	r2, r0
 8002b64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3318      	adds	r3, #24
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	331c      	adds	r3, #28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3324      	adds	r3, #36	@ 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	791b      	ldrb	r3, [r3, #4]
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3af      	bcc.n	8002b26 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e044      	b.n	8002c56 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	3301      	adds	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	791b      	ldrb	r3, [r3, #4]
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3b5      	bcc.n	8002bcc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7c1a      	ldrb	r2, [r3, #16]
 8002c68:	f88d 2000 	strb.w	r2, [sp]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c70:	f002 fea8 	bl	80059c4 <USB_DevInit>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00c      	b.n	8002ca0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 feec 	bl	8006a76 <USB_DevDisconnect>

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_Start+0x1c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e022      	b.n	8002d0a <HAL_PCD_Start+0x62>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fdf9 	bl	80058e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fe9a 	bl	8006a34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d12:	b590      	push	{r4, r7, lr}
 8002d14:	b08d      	sub	sp, #52	@ 0x34
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 ff58 	bl	8006bde <USB_GetMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 848c 	bne.w	800364e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 febc 	bl	8006ab8 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8482 	beq.w	800364c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fea9 	bl	8006ab8 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f002 0202 	and.w	r2, r2, #2
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fe97 	bl	8006ab8 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d161      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	0c5b      	lsrs	r3, r3, #17
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d124      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d035      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6a38      	ldr	r0, [r7, #32]
 8002df0:	f003 fcce 	bl	8006790 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e12:	441a      	add	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	615a      	str	r2, [r3, #20]
 8002e18:	e016      	b.n	8002e48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	0c5b      	lsrs	r3, r3, #17
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d110      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6a38      	ldr	r0, [r7, #32]
 8002e32:	f003 fcad 	bl	8006790 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e42:	441a      	add	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0210 	orr.w	r2, r2, #16
 8002e56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fe2b 	bl	8006ab8 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e6c:	f040 80a7 	bne.w	8002fbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fe30 	bl	8006ade <USB_ReadDevAllOutEpInterrupt>
 8002e7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e80:	e099      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 808e 	beq.w	8002faa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fe54 	bl	8006b46 <USB_ReadDevOutEPInterrupt>
 8002e9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2301      	movs	r3, #1
 8002eba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fe8a 	bl	8003bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	2308      	movs	r3, #8
 8002ede:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 ff60 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	2310      	movs	r3, #16
 8002f02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d030      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b80      	cmp	r3, #128	@ 0x80
 8002f18:	d109      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f005 fe2d 	bl	8008bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	2320      	movs	r3, #32
 8002f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fa8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af62 	bne.w	8002e82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fd78 	bl	8006ab8 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fd2:	f040 80db 	bne.w	800318c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fd99 	bl	8006b12 <USB_ReadDevAllInEpInterrupt>
 8002fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002fe6:	e0cd      	b.n	8003184 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80c2 	beq.w	8003178 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fdbf 	bl	8006b82 <USB_ReadDevInEPInterrupt>
 8003004:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d057      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2201      	movs	r2, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	69f9      	ldr	r1, [r7, #28]
 800302c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003030:	4013      	ands	r3, r2
 8003032:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	2301      	movs	r3, #1
 8003044:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	799b      	ldrb	r3, [r3, #6]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d132      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3320      	adds	r3, #32
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	331c      	adds	r3, #28
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4419      	add	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4403      	add	r3, r0
 8003082:	3320      	adds	r3, #32
 8003084:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x3a2>
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3324      	adds	r3, #36	@ 0x24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030ac:	461a      	mov	r2, r3
 80030ae:	2101      	movs	r1, #1
 80030b0:	f003 fdc6 	bl	8006c40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f005 fcf7 	bl	8008aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2308      	movs	r3, #8
 80030da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2310      	movs	r3, #16
 80030f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310e:	461a      	mov	r2, r3
 8003110:	2340      	movs	r3, #64	@ 0x40
 8003112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d023      	beq.n	8003166 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800311e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003120:	6a38      	ldr	r0, [r7, #32]
 8003122:	f002 fdb3 	bl	8005c8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	3310      	adds	r3, #16
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d108      	bne.n	8003154 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f005 fd44 	bl	8008bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003160:	461a      	mov	r2, r3
 8003162:	2302      	movs	r3, #2
 8003164:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fca3 	bl	8003abe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	3301      	adds	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f af2e 	bne.w	8002fe8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fc91 	bl	8006ab8 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800319c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031a0:	d122      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d108      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031c8:	2100      	movs	r1, #0
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fe8a 	bl	8003ee4 <HAL_PCDEx_LPM_Callback>
 80031d0:	e002      	b.n	80031d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f005 fce2 	bl	8008b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fc63 	bl	8006ab8 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031fc:	d112      	bne.n	8003224 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f005 fc9e 	bl	8008b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003222:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fc45 	bl	8006ab8 <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003238:	f040 80b7 	bne.w	80033aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2110      	movs	r1, #16
 8003256:	4618      	mov	r0, r3
 8003258:	f002 fd18 	bl	8005c8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003260:	e046      	b.n	80032f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800326e:	461a      	mov	r2, r3
 8003270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003274:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003286:	0151      	lsls	r1, r2, #5
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	440a      	add	r2, r1
 800328c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003290:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003294:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ba:	0151      	lsls	r1, r2, #5
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	440a      	add	r2, r1
 80032c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032da:	0151      	lsls	r1, r2, #5
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	440a      	add	r2, r1
 80032e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ec:	3301      	adds	r3, #1
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	461a      	mov	r2, r3
 80032f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d3b2      	bcc.n	8003262 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800330a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800330e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7bdb      	ldrb	r3, [r3, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d016      	beq.n	8003346 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333e:	f043 030b 	orr.w	r3, r3, #11
 8003342:	6453      	str	r3, [r2, #68]	@ 0x44
 8003344:	e015      	b.n	8003372 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003354:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003358:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800335c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800336c:	f043 030b 	orr.w	r3, r3, #11
 8003370:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003380:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003384:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003394:	461a      	mov	r2, r3
 8003396:	f003 fc53 	bl	8006c40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80033a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fb82 	bl	8006ab8 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033be:	d123      	bne.n	8003408 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fc18 	bl	8006bfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fcd5 	bl	8005d7e <USB_GetDevSpeed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681c      	ldr	r4, [r3, #0]
 80033e0:	f001 f9f0 	bl	80047c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ea:	461a      	mov	r2, r3
 80033ec:	4620      	mov	r0, r4
 80033ee:	f002 f9d9 	bl	80057a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f005 fb83 	bl	8008afe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003406:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 fb53 	bl	8006ab8 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d10a      	bne.n	8003432 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f005 fb60 	bl	8008ae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f002 0208 	and.w	r2, r2, #8
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fb3e 	bl	8006ab8 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d123      	bne.n	800348e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003452:	2301      	movs	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e014      	b.n	8003482 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 faf0 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	3301      	adds	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	791b      	ldrb	r3, [r3, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	4293      	cmp	r3, r2
 800348c:	d3e4      	bcc.n	8003458 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f003 fb10 	bl	8006ab8 <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a2:	d13c      	bne.n	800351e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a8:	e02b      	b.n	8003502 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3318      	adds	r3, #24
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d115      	bne.n	80034fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da12      	bge.n	80034fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3317      	adds	r3, #23
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fab0 	bl	8003a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	3301      	adds	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	791b      	ldrb	r3, [r3, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	4293      	cmp	r3, r2
 800350c:	d3cd      	bcc.n	80034aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800351c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fac8 	bl	8006ab8 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003532:	d156      	bne.n	80035e2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
 8003538:	e045      	b.n	80035c6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12e      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003562:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	da2b      	bge.n	80035c0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003574:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003578:	429a      	cmp	r2, r3
 800357a:	d121      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035bc:	6053      	str	r3, [r2, #4]
            break;
 80035be:	e008      	b.n	80035d2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	3301      	adds	r3, #1
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d3b3      	bcc.n	800353a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80035e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f003 fa66 	bl	8006ab8 <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f6:	d10a      	bne.n	800360e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f005 fb01 	bl	8008c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800360c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fa50 	bl	8006ab8 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d115      	bne.n	800364e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f005 faf1 	bl	8008c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	e000      	b.n	800364e <HAL_PCD_IRQHandler+0x93c>
      return;
 800364c:	bf00      	nop
    }
  }
}
 800364e:	3734      	adds	r7, #52	@ 0x34
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}

08003654 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_SetAddress+0x1a>
 800366a:	2302      	movs	r3, #2
 800366c:	e012      	b.n	8003694 <HAL_PCD_SetAddress+0x40>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f003 f9af 	bl	80069e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	70fb      	strb	r3, [r7, #3]
 80036ae:	460b      	mov	r3, r1
 80036b0:	803b      	strh	r3, [r7, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	da0f      	bge.n	80036e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 020f 	and.w	r2, r3, #15
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	3310      	adds	r3, #16
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	3304      	adds	r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	705a      	strb	r2, [r3, #1]
 80036e0:	e00f      	b.n	8003702 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800370e:	883a      	ldrh	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	78ba      	ldrb	r2, [r7, #2]
 8003718:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800372c:	78bb      	ldrb	r3, [r7, #2]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d102      	bne.n	8003738 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_PCD_EP_Open+0xaa>
 8003742:	2302      	movs	r3, #2
 8003744:	e00e      	b.n	8003764 <HAL_PCD_EP_Open+0xc8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68f9      	ldr	r1, [r7, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fb37 	bl	8005dc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003762:	7afb      	ldrb	r3, [r7, #11]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da0f      	bge.n	80037a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	3310      	adds	r3, #16
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	705a      	strb	r2, [r3, #1]
 800379e:	e00f      	b.n	80037c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	f003 020f 	and.w	r2, r3, #15
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_PCD_EP_Close+0x6e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e00e      	b.n	80037f8 <HAL_PCD_EP_Close+0x8c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 fb75 	bl	8005ed8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	460b      	mov	r3, r1
 800380e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003842:	7afb      	ldrb	r3, [r7, #11]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	b2da      	uxtb	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	799b      	ldrb	r3, [r3, #6]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	799b      	ldrb	r3, [r3, #6]
 8003864:	461a      	mov	r2, r3
 8003866:	6979      	ldr	r1, [r7, #20]
 8003868:	f002 fc12 	bl	8006090 <USB_EPStartXfer>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	460b      	mov	r3, r1
 8003884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	3310      	adds	r3, #16
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	799b      	ldrb	r3, [r3, #6]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	799b      	ldrb	r3, [r3, #6]
 80038d8:	461a      	mov	r2, r3
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	f002 fbd8 	bl	8006090 <USB_EPStartXfer>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	7912      	ldrb	r2, [r2, #4]
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e04f      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0f      	bge.n	8003930 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3310      	adds	r3, #16
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00d      	b.n	800394c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_PCD_EP_SetStall+0x82>
 8003968:	2302      	movs	r3, #2
 800396a:	e01d      	b.n	80039a8 <HAL_PCD_EP_SetStall+0xbe>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 ff60 	bl	8006840 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7999      	ldrb	r1, [r3, #6]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003998:	461a      	mov	r2, r3
 800399a:	f003 f951 	bl	8006c40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	7912      	ldrb	r2, [r2, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e042      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0f      	bge.n	80039f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	3304      	adds	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00f      	b.n	8003a16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_EP_ClrStall+0x86>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e00e      	b.n	8003a54 <HAL_PCD_EP_ClrStall+0xa4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 ff69 	bl	800691c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0c      	bge.n	8003a8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e00c      	b.n	8003aa4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fd88 	bl	80065c0 <USB_EPStopXfer>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	@ 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3310      	adds	r3, #16
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d901      	bls.n	8003af6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3303      	adds	r3, #3
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1a:	e02a      	b.n	8003b72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d902      	bls.n	8003b38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3303      	adds	r3, #3
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68d9      	ldr	r1, [r3, #12]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4603      	mov	r3, r0
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f002 fddd 	bl	8006714 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d809      	bhi.n	8003b9c <PCD_WriteEmptyTxFifo+0xde>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d203      	bcs.n	8003b9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1bf      	bne.n	8003b1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d811      	bhi.n	8003bcc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bc8:	4013      	ands	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	333c      	adds	r3, #60	@ 0x3c
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	799b      	ldrb	r3, [r3, #6]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d17b      	bne.n	8003d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	@ (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f240 80b9 	bls.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80b3 	beq.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e0a7      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e098      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8093 	bne.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	@ (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90f      	bls.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e07e      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f002 ffac 	bl	8006c40 <USB_EP0_OutStart>
 8003ce8:	e006      	b.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f004 feba 	bl	8008a78 <HAL_PCD_DataOutStageCallback>
 8003d04:	e046      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e032      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f004 fe91 	bl	8008a78 <HAL_PCD_DataOutStageCallback>
 8003d56:	e01d      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d80:	461a      	mov	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f002 ff5c 	bl	8006c40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f004 fe72 	bl	8008a78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	@ 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f004 fe29 	bl	8008a54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f002 ff0e 	bl	8006c40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	@ 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	@ 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e267      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b85      	ldr	r3, [pc, #532]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b82      	ldr	r3, [pc, #520]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e242      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a75      	ldr	r2, [pc, #468]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b70      	ldr	r3, [pc, #448]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b69      	ldr	r3, [pc, #420]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a68      	ldr	r2, [pc, #416]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b66      	ldr	r3, [pc, #408]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f956 	bl	8002264 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe f952 	bl	8002264 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e207      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5b      	ldr	r3, [pc, #364]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f942 	bl	8002264 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe f93e 	bl	8002264 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1f3      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b51      	ldr	r3, [pc, #324]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b47      	ldr	r3, [pc, #284]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b44      	ldr	r3, [pc, #272]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b41      	ldr	r3, [pc, #260]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c7      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3b      	ldr	r3, [pc, #236]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fe f8f7 	bl	8002264 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407a:	f7fe f8f3 	bl	8002264 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a8      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b28      	ldr	r3, [pc, #160]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4925      	ldr	r1, [pc, #148]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_RCC_OscConfig+0x244>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe f8d6 	bl	8002264 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe f8d2 	bl	8002264 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e187      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d036      	beq.n	8004154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe f8b6 	bl	8002264 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe f8b2 	bl	8002264 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e167      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_OscConfig+0x240>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e01b      	b.n	8004154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x248>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fe f89f 	bl	8002264 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e00e      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fe f89b 	bl	8002264 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d907      	bls.n	8004148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e150      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800413c:	40023800 	.word	0x40023800
 8004140:	42470000 	.word	0x42470000
 8004144:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	4b88      	ldr	r3, [pc, #544]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ea      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8097 	beq.w	8004290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004166:	4b81      	ldr	r3, [pc, #516]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4b7d      	ldr	r3, [pc, #500]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b7a      	ldr	r3, [pc, #488]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b77      	ldr	r3, [pc, #476]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800419e:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a73      	ldr	r2, [pc, #460]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041aa:	f7fe f85b 	bl	8002264 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fe f857 	bl	8002264 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e10c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_OscConfig+0x474>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2ea>
 80041d8:	4b64      	ldr	r3, [pc, #400]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	4a63      	ldr	r2, [pc, #396]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e4:	e01c      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x30c>
 80041ee:	4b5f      	ldr	r3, [pc, #380]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5e      	ldr	r2, [pc, #376]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a5b      	ldr	r2, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0x324>
 8004208:	4b58      	ldr	r3, [pc, #352]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	4a57      	ldr	r2, [pc, #348]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	@ 0x70
 8004214:	4b55      	ldr	r3, [pc, #340]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004218:	4a54      	ldr	r2, [pc, #336]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0304 	bic.w	r3, r3, #4
 800421e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe f81c 	bl	8002264 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe f818 	bl	8002264 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0cb      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	4b49      	ldr	r3, [pc, #292]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0ee      	beq.n	8004230 <HAL_RCC_OscConfig+0x334>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fe f806 	bl	8002264 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fe f802 	bl	8002264 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0b5      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	4b3e      	ldr	r3, [pc, #248]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ee      	bne.n	800425c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	4a38      	ldr	r2, [pc, #224]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a1 	beq.w	80043dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800429a:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d05c      	beq.n	8004360 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d141      	bne.n	8004332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b31      	ldr	r3, [pc, #196]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd ffd6 	bl	8002264 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd ffd2 	bl	8002264 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e087      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b27      	ldr	r3, [pc, #156]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	491b      	ldr	r1, [pc, #108]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fd ffab 	bl	8002264 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd ffa7 	bl	8002264 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e05c      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x416>
 8004330:	e054      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fd ff94 	bl	8002264 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd ff90 	bl	8002264 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e045      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x444>
 800435e:	e03d      	b.n	80043dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e038      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
 800436c:	40023800 	.word	0x40023800
 8004370:	40007000 	.word	0x40007000
 8004374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <HAL_RCC_OscConfig+0x4ec>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d028      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d121      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d11a      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0cc      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d90c      	bls.n	8004428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b65      	ldr	r3, [pc, #404]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800444a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d044      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d119      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e067      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b37      	ldr	r3, [pc, #220]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4934      	ldr	r1, [pc, #208]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fec2 	bl	8002264 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fd febe 	bl	8002264 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d20c      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b22      	ldr	r3, [pc, #136]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490a      	ldr	r1, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fe22 	bl	80021dc <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	0800b960 	.word	0x0800b960
 80045b0:	20000000 	.word	0x20000000
 80045b4:	20000070 	.word	0x20000070

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b094      	sub	sp, #80	@ 0x50
 80045be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c4:	2300      	movs	r3, #0
 80045c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c8:	2300      	movs	r3, #0
 80045ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d0:	4b79      	ldr	r3, [pc, #484]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00d      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x40>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	f200 80e1 	bhi.w	80047a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ea:	e0db      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b73      	ldr	r3, [pc, #460]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x204>)
 80045ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045f0:	e0db      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b73      	ldr	r3, [pc, #460]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80045f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045f6:	e0d8      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b6f      	ldr	r3, [pc, #444]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004602:	4b6d      	ldr	r3, [pc, #436]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d063      	beq.n	80046d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	2200      	movs	r2, #0
 8004616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004618:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004620:	633b      	str	r3, [r7, #48]	@ 0x30
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	@ 0x34
 8004626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	0159      	lsls	r1, r3, #5
 8004638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800463c:	0150      	lsls	r0, r2, #5
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4621      	mov	r1, r4
 8004644:	1a51      	subs	r1, r2, r1
 8004646:	6139      	str	r1, [r7, #16]
 8004648:	4629      	mov	r1, r5
 800464a:	eb63 0301 	sbc.w	r3, r3, r1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800465c:	4659      	mov	r1, fp
 800465e:	018b      	lsls	r3, r1, #6
 8004660:	4651      	mov	r1, sl
 8004662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004666:	4651      	mov	r1, sl
 8004668:	018a      	lsls	r2, r1, #6
 800466a:	4651      	mov	r1, sl
 800466c:	ebb2 0801 	subs.w	r8, r2, r1
 8004670:	4659      	mov	r1, fp
 8004672:	eb63 0901 	sbc.w	r9, r3, r1
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800468a:	4690      	mov	r8, r2
 800468c:	4699      	mov	r9, r3
 800468e:	4623      	mov	r3, r4
 8004690:	eb18 0303 	adds.w	r3, r8, r3
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	462b      	mov	r3, r5
 8004698:	eb49 0303 	adc.w	r3, r9, r3
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046aa:	4629      	mov	r1, r5
 80046ac:	024b      	lsls	r3, r1, #9
 80046ae:	4621      	mov	r1, r4
 80046b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046b4:	4621      	mov	r1, r4
 80046b6:	024a      	lsls	r2, r1, #9
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046be:	2200      	movs	r2, #0
 80046c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046c8:	f7fc fa7e 	bl	8000bc8 <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4613      	mov	r3, r2
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d4:	e058      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d6:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	2200      	movs	r2, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	4611      	mov	r1, r2
 80046e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	2300      	movs	r3, #0
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	0159      	lsls	r1, r3, #5
 80046fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004702:	0150      	lsls	r0, r2, #5
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4641      	mov	r1, r8
 800470a:	ebb2 0a01 	subs.w	sl, r2, r1
 800470e:	4649      	mov	r1, r9
 8004710:	eb63 0b01 	sbc.w	fp, r3, r1
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004728:	ebb2 040a 	subs.w	r4, r2, sl
 800472c:	eb63 050b 	sbc.w	r5, r3, fp
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	00eb      	lsls	r3, r5, #3
 800473a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800473e:	00e2      	lsls	r2, r4, #3
 8004740:	4614      	mov	r4, r2
 8004742:	461d      	mov	r5, r3
 8004744:	4643      	mov	r3, r8
 8004746:	18e3      	adds	r3, r4, r3
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	464b      	mov	r3, r9
 800474c:	eb45 0303 	adc.w	r3, r5, r3
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800475e:	4629      	mov	r1, r5
 8004760:	028b      	lsls	r3, r1, #10
 8004762:	4621      	mov	r1, r4
 8004764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004768:	4621      	mov	r1, r4
 800476a:	028a      	lsls	r2, r1, #10
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004772:	2200      	movs	r2, #0
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	61fa      	str	r2, [r7, #28]
 8004778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800477c:	f7fc fa24 	bl	8000bc8 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	3301      	adds	r3, #1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800479a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047a2:	e002      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x204>)
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3750      	adds	r7, #80	@ 0x50
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	00f42400 	.word	0x00f42400
 80047c0:	007a1200 	.word	0x007a1200

080047c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c8:	4b03      	ldr	r3, [pc, #12]	@ (80047d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000000 	.word	0x20000000

080047dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e0:	f7ff fff0 	bl	80047c4 <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	0a9b      	lsrs	r3, r3, #10
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	@ (8004800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	0800b970 	.word	0x0800b970

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004808:	f7ff ffdc 	bl	80047c4 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0b5b      	lsrs	r3, r3, #13
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4903      	ldr	r1, [pc, #12]	@ (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40023800 	.word	0x40023800
 8004828:	0800b970 	.word	0x0800b970

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07b      	b.n	8004936 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fcb8 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e8:	ea42 0103 	orr.w	r1, r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0104 	and.w	r1, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	f003 0210 	and.w	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e01a      	b.n	8004986 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004966:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc fc8b 	bl	8001284 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08c      	sub	sp, #48	@ 0x30
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800499c:	2301      	movs	r3, #1
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x26>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e198      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x358>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049bc:	f7fd fc52 	bl	8002264 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d00f      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x70>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049e4:	d107      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x68>
 80049ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80049fc:	e16d      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x82>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x82>
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a16:	e160      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d003      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2205      	movs	r2, #5
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	887a      	ldrh	r2, [r7, #2]
 8004a42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	887a      	ldrh	r2, [r7, #2]
 8004a4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d17c      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x10a>
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d16a      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abc:	e057      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11b      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d113      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d119      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x1b8>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d014      	beq.n	8004b46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	b292      	uxth	r2, r2
 8004b28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b46:	f7fd fb8d 	bl	8002264 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d80b      	bhi.n	8004b6e <HAL_SPI_TransmitReceive+0x1e0>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d007      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004b6c:	e0b5      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1a2      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x130>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d19d      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x130>
 8004b82:	e080      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x204>
 8004b8c:	8b7b      	ldrh	r3, [r7, #26]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d16f      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb8:	e05b      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11c      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x274>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d017      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x274>
 8004bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d114      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d119      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x2b6>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c40:	2301      	movs	r3, #1
 8004c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c44:	f7fd fb0e 	bl	8002264 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d803      	bhi.n	8004c5c <HAL_SPI_TransmitReceive+0x2ce>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x2d4>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004c70:	e033      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d19e      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x22c>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d199      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f8c6 	bl	8004e1c <SPI_EndRxTxTransaction>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004ca2:	e01a      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd0:	e003      	b.n	8004cda <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3730      	adds	r7, #48	@ 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cfc:	b2db      	uxtb	r3, r3
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d1c:	f7fd faa2 	bl	8002264 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4413      	add	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d2c:	f7fd fa9a 	bl	8002264 <HAL_GetTick>
 8004d30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d32:	4b39      	ldr	r3, [pc, #228]	@ (8004e18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	015b      	lsls	r3, r3, #5
 8004d38:	0d1b      	lsrs	r3, r3, #20
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d42:	e054      	b.n	8004dee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d050      	beq.n	8004dee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d4c:	f7fd fa8a 	bl	8002264 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d902      	bls.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d13d      	bne.n	8004dde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d7a:	d111      	bne.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d84:	d004      	beq.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8e:	d107      	bne.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da8:	d10f      	bne.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e017      	b.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d19b      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000

08004e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2102      	movs	r1, #2
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff ff6a 	bl	8004d0c <SPI_WaitFlagStateUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e42:	f043 0220 	orr.w	r2, r3, #32
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e032      	b.n	8004eb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <SPI_EndRxTxTransaction+0xa0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <SPI_EndRxTxTransaction+0xa4>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	0d5b      	lsrs	r3, r3, #21
 8004e5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6c:	d112      	bne.n	8004e94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2180      	movs	r1, #128	@ 0x80
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff ff47 	bl	8004d0c <SPI_WaitFlagStateUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e00f      	b.n	8004eb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b80      	cmp	r3, #128	@ 0x80
 8004eac:	d0f2      	beq.n	8004e94 <SPI_EndRxTxTransaction+0x78>
 8004eae:	e000      	b.n	8004eb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004eb0:	bf00      	nop
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	165e9f81 	.word	0x165e9f81

08004ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e042      	b.n	8004f5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fc f9e8 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	@ 0x24
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f973 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	@ 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d175      	bne.n	8005070 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Transmit+0x2c>
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e06e      	b.n	8005072 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2221      	movs	r2, #33	@ 0x21
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa2:	f7fd f95f 	bl	8002264 <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbc:	d108      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	e003      	b.n	8004fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd8:	e02e      	b.n	8005038 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	@ 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f848 	bl	800507a <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03a      	b.n	8005072 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3302      	adds	r3, #2
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e007      	b.n	800502a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1cb      	bne.n	8004fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2140      	movs	r1, #64	@ 0x40
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f814 	bl	800507a <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e006      	b.n	8005072 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508a:	e03b      	b.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d037      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fd f8e6 	bl	8002264 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <UART_WaitOnFlagUntilTimeout+0x30>
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e03a      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d023      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d020      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	d01d      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d116      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f81d 	bl	800512c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2208      	movs	r2, #8
 80050f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e00f      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	429a      	cmp	r2, r3
 8005120:	d0b4      	beq.n	800508c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b095      	sub	sp, #84	@ 0x54
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005154:	643a      	str	r2, [r7, #64]	@ 0x40
 8005156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800515a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e5      	bne.n	8005134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	61fb      	str	r3, [r7, #28]
   return(result);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800518e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d119      	bne.n	80051d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	61ba      	str	r2, [r7, #24]
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	613b      	str	r3, [r7, #16]
   return(result);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051e6:	bf00      	nop
 80051e8:	3754      	adds	r7, #84	@ 0x54
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0c0      	sub	sp, #256	@ 0x100
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	ea40 0301 	orr.w	r3, r0, r1
 800521c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800524c:	f021 010c 	bic.w	r1, r1, #12
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800525a:	430b      	orrs	r3, r1
 800525c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526e:	6999      	ldr	r1, [r3, #24]
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	ea40 0301 	orr.w	r3, r0, r1
 800527a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8f      	ldr	r3, [pc, #572]	@ (80054c0 <UART_SetConfig+0x2cc>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0xa0>
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8d      	ldr	r3, [pc, #564]	@ (80054c4 <UART_SetConfig+0x2d0>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d104      	bne.n	800529e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7ff fab6 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8005298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800529c:	e003      	b.n	80052a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529e:	f7ff fa9d 	bl	80047dc <HAL_RCC_GetPCLK1Freq>
 80052a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	f040 810c 	bne.w	80054cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052ce:	415b      	adcs	r3, r3
 80052d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052d6:	4621      	mov	r1, r4
 80052d8:	eb12 0801 	adds.w	r8, r2, r1
 80052dc:	4629      	mov	r1, r5
 80052de:	eb43 0901 	adc.w	r9, r3, r1
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f6:	4690      	mov	r8, r2
 80052f8:	4699      	mov	r9, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	eb18 0303 	adds.w	r3, r8, r3
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005304:	462b      	mov	r3, r5
 8005306:	eb49 0303 	adc.w	r3, r9, r3
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800531a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800531e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005322:	460b      	mov	r3, r1
 8005324:	18db      	adds	r3, r3, r3
 8005326:	653b      	str	r3, [r7, #80]	@ 0x50
 8005328:	4613      	mov	r3, r2
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005338:	f7fb fc46 	bl	8000bc8 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <UART_SetConfig+0x2d4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005354:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005364:	415b      	adcs	r3, r3
 8005366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800536c:	4641      	mov	r1, r8
 800536e:	eb12 0a01 	adds.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb43 0b01 	adc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800538c:	4692      	mov	sl, r2
 800538e:	469b      	mov	fp, r3
 8005390:	4643      	mov	r3, r8
 8005392:	eb1a 0303 	adds.w	r3, sl, r3
 8005396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800539a:	464b      	mov	r3, r9
 800539c:	eb4b 0303 	adc.w	r3, fp, r3
 80053a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053ce:	f7fb fbfb 	bl	8000bc8 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	@ 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053ee:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 2302 	umull	r2, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053fc:	441c      	add	r4, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005408:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800540c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005418:	415b      	adcs	r3, r3
 800541a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800541c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6339      	str	r1, [r7, #48]	@ 0x30
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800546c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005474:	460b      	mov	r3, r1
 8005476:	18db      	adds	r3, r3, r3
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547a:	4613      	mov	r3, r2
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800548a:	f7fb fb9d 	bl	8000bc8 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <UART_SetConfig+0x2d4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	@ 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	3332      	adds	r3, #50	@ 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	@ (80054c8 <UART_SetConfig+0x2d4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 0207 	and.w	r2, r3, #7
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054bc:	e106      	b.n	80056cc <UART_SetConfig+0x4d8>
 80054be:	bf00      	nop
 80054c0:	40011000 	.word	0x40011000
 80054c4:	40011400 	.word	0x40011400
 80054c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	415b      	adcs	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ee:	4641      	mov	r1, r8
 80054f0:	1854      	adds	r4, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb43 0501 	adc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005514:	464b      	mov	r3, r9
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800552a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800553a:	4629      	mov	r1, r5
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005544:	4621      	mov	r1, r4
 8005546:	008a      	lsls	r2, r1, #2
 8005548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800554c:	f7fb fb3c 	bl	8000bc8 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b60      	ldr	r3, [pc, #384]	@ (80056d8 <UART_SetConfig+0x4e4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800556c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	61b9      	str	r1, [r7, #24]
 8005578:	415b      	adcs	r3, r3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	4641      	mov	r1, r8
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	4649      	mov	r1, r9
 8005588:	414b      	adcs	r3, r1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005598:	4659      	mov	r1, fp
 800559a:	00cb      	lsls	r3, r1, #3
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a2:	4651      	mov	r1, sl
 80055a4:	00ca      	lsls	r2, r1, #3
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	4642      	mov	r2, r8
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055b4:	464b      	mov	r3, r9
 80055b6:	460a      	mov	r2, r1
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055d8:	4649      	mov	r1, r9
 80055da:	008b      	lsls	r3, r1, #2
 80055dc:	4641      	mov	r1, r8
 80055de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e2:	4641      	mov	r1, r8
 80055e4:	008a      	lsls	r2, r1, #2
 80055e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055ea:	f7fb faed 	bl	8000bc8 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b38      	ldr	r3, [pc, #224]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	@ 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	@ 0x32
 8005608:	4a33      	ldr	r2, [pc, #204]	@ (80056d8 <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005614:	441c      	add	r4, r3
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	673b      	str	r3, [r7, #112]	@ 0x70
 800561e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	415b      	adcs	r3, r3
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005666:	464b      	mov	r3, r9
 8005668:	460a      	mov	r2, r1
 800566a:	eb42 0303 	adc.w	r3, r2, r3
 800566e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	663b      	str	r3, [r7, #96]	@ 0x60
 800567a:	667a      	str	r2, [r7, #100]	@ 0x64
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800569a:	f7fb fa95 	bl	8000bc8 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	@ 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	@ 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <UART_SetConfig+0x4e4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056dc:	b084      	sub	sp, #16
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	f107 001c 	add.w	r0, r7, #28
 80056ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d123      	bne.n	800573e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800570a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800571e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fae2 	bl	8006cfc <USB_CoreReset>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e01b      	b.n	8005776 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fad6 	bl	8006cfc <USB_CoreReset>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005754:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	@ 0x38
 8005768:	e005      	b.n	8005776 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005776:	7fbb      	ldrb	r3, [r7, #30]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d10b      	bne.n	8005794 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f043 0206 	orr.w	r2, r3, #6
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a0:	b004      	add	sp, #16
 80057a2:	4770      	bx	lr

080057a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d165      	bne.n	8005884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a41      	ldr	r2, [pc, #260]	@ (80058c0 <USB_SetTurnaroundTime+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d906      	bls.n	80057ce <USB_SetTurnaroundTime+0x2a>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a40      	ldr	r2, [pc, #256]	@ (80058c4 <USB_SetTurnaroundTime+0x120>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d202      	bcs.n	80057ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057c8:	230f      	movs	r3, #15
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e062      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a3c      	ldr	r2, [pc, #240]	@ (80058c4 <USB_SetTurnaroundTime+0x120>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d306      	bcc.n	80057e4 <USB_SetTurnaroundTime+0x40>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	@ (80058c8 <USB_SetTurnaroundTime+0x124>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d202      	bcs.n	80057e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057de:	230e      	movs	r3, #14
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e057      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a38      	ldr	r2, [pc, #224]	@ (80058c8 <USB_SetTurnaroundTime+0x124>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d306      	bcc.n	80057fa <USB_SetTurnaroundTime+0x56>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a37      	ldr	r2, [pc, #220]	@ (80058cc <USB_SetTurnaroundTime+0x128>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d202      	bcs.n	80057fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057f4:	230d      	movs	r3, #13
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e04c      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <USB_SetTurnaroundTime+0x128>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d306      	bcc.n	8005810 <USB_SetTurnaroundTime+0x6c>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4a32      	ldr	r2, [pc, #200]	@ (80058d0 <USB_SetTurnaroundTime+0x12c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d802      	bhi.n	8005810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800580a:	230c      	movs	r3, #12
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e041      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a2f      	ldr	r2, [pc, #188]	@ (80058d0 <USB_SetTurnaroundTime+0x12c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d906      	bls.n	8005826 <USB_SetTurnaroundTime+0x82>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a2e      	ldr	r2, [pc, #184]	@ (80058d4 <USB_SetTurnaroundTime+0x130>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d802      	bhi.n	8005826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005820:	230b      	movs	r3, #11
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e036      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4a2a      	ldr	r2, [pc, #168]	@ (80058d4 <USB_SetTurnaroundTime+0x130>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d906      	bls.n	800583c <USB_SetTurnaroundTime+0x98>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4a29      	ldr	r2, [pc, #164]	@ (80058d8 <USB_SetTurnaroundTime+0x134>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d802      	bhi.n	800583c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005836:	230a      	movs	r3, #10
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e02b      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4a26      	ldr	r2, [pc, #152]	@ (80058d8 <USB_SetTurnaroundTime+0x134>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d906      	bls.n	8005852 <USB_SetTurnaroundTime+0xae>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4a25      	ldr	r2, [pc, #148]	@ (80058dc <USB_SetTurnaroundTime+0x138>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d202      	bcs.n	8005852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800584c:	2309      	movs	r3, #9
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e020      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4a21      	ldr	r2, [pc, #132]	@ (80058dc <USB_SetTurnaroundTime+0x138>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d306      	bcc.n	8005868 <USB_SetTurnaroundTime+0xc4>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4a20      	ldr	r2, [pc, #128]	@ (80058e0 <USB_SetTurnaroundTime+0x13c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d802      	bhi.n	8005868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005862:	2308      	movs	r3, #8
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e015      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a1d      	ldr	r2, [pc, #116]	@ (80058e0 <USB_SetTurnaroundTime+0x13c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d906      	bls.n	800587e <USB_SetTurnaroundTime+0xda>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a1c      	ldr	r2, [pc, #112]	@ (80058e4 <USB_SetTurnaroundTime+0x140>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d202      	bcs.n	800587e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005878:	2307      	movs	r3, #7
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e00a      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800587e:	2306      	movs	r3, #6
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e007      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800588a:	2309      	movs	r3, #9
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e001      	b.n	8005894 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005890:	2309      	movs	r3, #9
 8005892:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	00d8acbf 	.word	0x00d8acbf
 80058c4:	00e4e1c0 	.word	0x00e4e1c0
 80058c8:	00f42400 	.word	0x00f42400
 80058cc:	01067380 	.word	0x01067380
 80058d0:	011a499f 	.word	0x011a499f
 80058d4:	01312cff 	.word	0x01312cff
 80058d8:	014ca43f 	.word	0x014ca43f
 80058dc:	016e3600 	.word	0x016e3600
 80058e0:	01a6ab1f 	.word	0x01a6ab1f
 80058e4:	01e84800 	.word	0x01e84800

080058e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f043 0201 	orr.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d115      	bne.n	800597a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595a:	200a      	movs	r0, #10
 800595c:	f7fc fc8e 	bl	800227c <HAL_Delay>
      ms += 10U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	330a      	adds	r3, #10
 8005964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 f939 	bl	8006bde <USB_GetMode>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d01e      	beq.n	80059b0 <USB_SetCurrentMode+0x84>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2bc7      	cmp	r3, #199	@ 0xc7
 8005976:	d9f0      	bls.n	800595a <USB_SetCurrentMode+0x2e>
 8005978:	e01a      	b.n	80059b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d115      	bne.n	80059ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800598c:	200a      	movs	r0, #10
 800598e:	f7fc fc75 	bl	800227c <HAL_Delay>
      ms += 10U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	330a      	adds	r3, #10
 8005996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f920 	bl	8006bde <USB_GetMode>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <USB_SetCurrentMode+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80059a8:	d9f0      	bls.n	800598c <USB_SetCurrentMode+0x60>
 80059aa:	e001      	b.n	80059b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e005      	b.n	80059bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80059b4:	d101      	bne.n	80059ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	e009      	b.n	80059f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3340      	adds	r3, #64	@ 0x40
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3301      	adds	r3, #1
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b0e      	cmp	r3, #14
 80059fc:	d9f2      	bls.n	80059e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11c      	bne.n	8005a40 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a3e:	e00b      	b.n	8005a58 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10d      	bne.n	8005a88 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a74:	2100      	movs	r1, #0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f968 	bl	8005d4c <USB_SetDevSpeed>
 8005a7c:	e008      	b.n	8005a90 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a7e:	2101      	movs	r1, #1
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f963 	bl	8005d4c <USB_SetDevSpeed>
 8005a86:	e003      	b.n	8005a90 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a88:	2103      	movs	r1, #3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f95e 	bl	8005d4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a90:	2110      	movs	r1, #16
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8fa 	bl	8005c8c <USB_FlushTxFifo>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f924 	bl	8005cf0 <USB_FlushRxFifo>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e043      	b.n	8005b64 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af2:	d118      	bne.n	8005b26 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b06:	461a      	mov	r2, r3
 8005b08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e013      	b.n	8005b38 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e008      	b.n	8005b38 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	461a      	mov	r2, r3
 8005b58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b68:	461a      	mov	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d3b5      	bcc.n	8005adc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e043      	b.n	8005bfe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b8c:	d118      	bne.n	8005bc0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e013      	b.n	8005bd2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e008      	b.n	8005bd2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c02:	461a      	mov	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d3b5      	bcc.n	8005b76 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f043 0210 	orr.w	r2, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <USB_DevInit+0x2c4>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f043 0208 	orr.w	r2, r3, #8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c84:	b004      	add	sp, #16
 8005c86:	4770      	bx	lr
 8005c88:	803c3800 	.word	0x803c3800

08005c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ca6:	d901      	bls.n	8005cac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e01b      	b.n	8005ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	daf2      	bge.n	8005c9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	019b      	lsls	r3, r3, #6
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd0:	d901      	bls.n	8005cd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e006      	b.n	8005ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d0f0      	beq.n	8005cc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d08:	d901      	bls.n	8005d0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e018      	b.n	8005d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	daf2      	bge.n	8005cfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2c:	d901      	bls.n	8005d32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e006      	b.n	8005d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d0f0      	beq.n	8005d20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b087      	sub	sp, #28
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0306 	and.w	r3, r3, #6
 8005d96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
 8005da2:	e00a      	b.n	8005dba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d002      	beq.n	8005db0 <USB_GetDevSpeed+0x32>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d102      	bne.n	8005db6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005db0:	2302      	movs	r3, #2
 8005db2:	75fb      	strb	r3, [r7, #23]
 8005db4:	e001      	b.n	8005dba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005db6:	230f      	movs	r3, #15
 8005db8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d13a      	bne.n	8005e5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	2101      	movs	r1, #1
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d155      	bne.n	8005ec8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	791b      	ldrb	r3, [r3, #4]
 8005e36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	059b      	lsls	r3, r3, #22
 8005e3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e40:	4313      	orrs	r3, r2
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e036      	b.n	8005ec8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d11a      	bne.n	8005ec8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	791b      	ldrb	r3, [r3, #4]
 8005eac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ec6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d161      	bne.n	8005fb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0a:	d11f      	bne.n	8005f4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	2101      	movs	r1, #1
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f90:	4013      	ands	r3, r2
 8005f92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	0159      	lsls	r1, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	440b      	add	r3, r1
 8005faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <USB_DeactivateEndpoint+0x1b0>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	600b      	str	r3, [r1, #0]
 8005fb6:	e060      	b.n	800607a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fce:	d11f      	bne.n	8006010 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800600a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800600e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	43db      	mvns	r3, r3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006030:	4013      	ands	r3, r2
 8006032:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	2101      	movs	r1, #1
 8006046:	fa01 f303 	lsl.w	r3, r1, r3
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	43db      	mvns	r3, r3
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006054:	4013      	ands	r3, r2
 8006056:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0159      	lsls	r1, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	440b      	add	r3, r1
 800606e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006072:	4619      	mov	r1, r3
 8006074:	4b05      	ldr	r3, [pc, #20]	@ (800608c <USB_DeactivateEndpoint+0x1b4>)
 8006076:	4013      	ands	r3, r2
 8006078:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	ec337800 	.word	0xec337800
 800608c:	eff37800 	.word	0xeff37800

08006090 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	@ 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 817a 	bne.w	80063a6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d132      	bne.n	8006120 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006118:	0cdb      	lsrs	r3, r3, #19
 800611a:	04db      	lsls	r3, r3, #19
 800611c:	6113      	str	r3, [r2, #16]
 800611e:	e092      	b.n	8006246 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613a:	0cdb      	lsrs	r3, r3, #19
 800613c:	04db      	lsls	r3, r3, #19
 800613e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800615e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006162:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11a      	bne.n	80061a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d903      	bls.n	800617e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800619c:	6113      	str	r3, [r2, #16]
 800619e:	e01b      	b.n	80061d8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	440b      	add	r3, r1
 80061b8:	1e59      	subs	r1, r3, #1
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061c4:	4ba2      	ldr	r3, [pc, #648]	@ (8006450 <USB_EPStartXfer+0x3c0>)
 80061c6:	400b      	ands	r3, r1
 80061c8:	69b9      	ldr	r1, [r7, #24]
 80061ca:	0148      	lsls	r0, r1, #5
 80061cc:	69f9      	ldr	r1, [r7, #28]
 80061ce:	4401      	add	r1, r0
 80061d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061d4:	4313      	orrs	r3, r2
 80061d6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ee:	69b9      	ldr	r1, [r7, #24]
 80061f0:	0148      	lsls	r0, r1, #5
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	4401      	add	r1, r0
 80061f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d11f      	bne.n	8006246 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006220:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006224:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006240:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006244:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d14b      	bne.n	80062e4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006260:	461a      	mov	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d128      	bne.n	80062c2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d110      	bne.n	80062a2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800629a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e00f      	b.n	80062c2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e165      	b.n	80065b0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006302:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d015      	beq.n	8006338 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 814d 	beq.w	80065b0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	2101      	movs	r1, #1
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006332:	4313      	orrs	r3, r2
 8006334:	634b      	str	r3, [r1, #52]	@ 0x34
 8006336:	e13b      	b.n	80065b0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d110      	bne.n	800636a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006362:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e00f      	b.n	800638a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68d9      	ldr	r1, [r3, #12]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	b298      	uxth	r0, r3
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4603      	mov	r3, r0
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f9b8 	bl	8006714 <USB_WritePacket>
 80063a4:	e104      	b.n	80065b0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c0:	0cdb      	lsrs	r3, r3, #19
 80063c2:	04db      	lsls	r3, r3, #19
 80063c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063e8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d131      	bne.n	8006454 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800641e:	69b9      	ldr	r1, [r7, #24]
 8006420:	0148      	lsls	r0, r1, #5
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	4401      	add	r1, r0
 8006426:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800642a:	4313      	orrs	r3, r2
 800642c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800644c:	6113      	str	r3, [r2, #16]
 800644e:	e061      	b.n	8006514 <USB_EPStartXfer+0x484>
 8006450:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d123      	bne.n	80064a4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006472:	69b9      	ldr	r1, [r7, #24]
 8006474:	0148      	lsls	r0, r1, #5
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	4401      	add	r1, r0
 800647a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800647e:	4313      	orrs	r3, r2
 8006480:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800649c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064a0:	6113      	str	r3, [r2, #16]
 80064a2:	e037      	b.n	8006514 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	1e5a      	subs	r2, r3, #1
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	8afa      	ldrh	r2, [r7, #22]
 80064c0:	fb03 f202 	mul.w	r2, r3, r2
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	04d9      	lsls	r1, r3, #19
 80064da:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <USB_EPStartXfer+0x52c>)
 80064dc:	400b      	ands	r3, r1
 80064de:	69b9      	ldr	r1, [r7, #24]
 80064e0:	0148      	lsls	r0, r1, #5
 80064e2:	69f9      	ldr	r1, [r7, #28]
 80064e4:	4401      	add	r1, r0
 80064e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ea:	4313      	orrs	r3, r2
 80064ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006504:	69b9      	ldr	r1, [r7, #24]
 8006506:	0148      	lsls	r0, r1, #5
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	4401      	add	r1, r0
 800650c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006510:	4313      	orrs	r3, r2
 8006512:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d10d      	bne.n	8006536 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006532:	460a      	mov	r2, r1
 8006534:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d128      	bne.n	8006590 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006568:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e00f      	b.n	8006590 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	1ff80000 	.word	0x1ff80000

080065c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d14a      	bne.n	8006674 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f6:	f040 8086 	bne.w	8006706 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	7812      	ldrb	r2, [r2, #0]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006618:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800661c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006640:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800664e:	4293      	cmp	r3, r2
 8006650:	d902      	bls.n	8006658 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]
          break;
 8006656:	e056      	b.n	8006706 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800666c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006670:	d0e7      	beq.n	8006642 <USB_EPStopXfer+0x82>
 8006672:	e048      	b.n	8006706 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800668c:	d13b      	bne.n	8006706 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d902      	bls.n	80066ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ea:	e00c      	b.n	8006706 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006704:	d0e7      	beq.n	80066d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006706:	7dfb      	ldrb	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	@ 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	460b      	mov	r3, r1
 8006724:	71fb      	strb	r3, [r7, #7]
 8006726:	4613      	mov	r3, r2
 8006728:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d123      	bne.n	8006782 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800673a:	88bb      	ldrh	r3, [r7, #4]
 800673c:	3303      	adds	r3, #3
 800673e:	089b      	lsrs	r3, r3, #2
 8006740:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e018      	b.n	800677a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	031a      	lsls	r2, r3, #12
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006754:	461a      	mov	r2, r3
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3301      	adds	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3301      	adds	r3, #1
 8006772:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3301      	adds	r3, #1
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3e2      	bcc.n	8006748 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3724      	adds	r7, #36	@ 0x24
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006790:	b480      	push	{r7}
 8006792:	b08b      	sub	sp, #44	@ 0x2c
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	e014      	b.n	80067e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	3301      	adds	r3, #1
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	3301      	adds	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	3301      	adds	r3, #1
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	3301      	adds	r3, #1
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	3301      	adds	r3, #1
 80067e4:	623b      	str	r3, [r7, #32]
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d3e6      	bcc.n	80067bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ee:	8bfb      	ldrh	r3, [r7, #30]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01e      	beq.n	8006832 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fe:	461a      	mov	r2, r3
 8006800:	f107 0310 	add.w	r3, r7, #16
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	b2da      	uxtb	r2, r3
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	701a      	strb	r2, [r3, #0]
      i++;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	3301      	adds	r3, #1
 800681e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	3301      	adds	r3, #1
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006826:	8bfb      	ldrh	r3, [r7, #30]
 8006828:	3b01      	subs	r3, #1
 800682a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800682c:	8bfb      	ldrh	r3, [r7, #30]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ea      	bne.n	8006808 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006834:	4618      	mov	r0, r3
 8006836:	372c      	adds	r7, #44	@ 0x2c
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d12c      	bne.n	80068b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	db12      	blt.n	8006894 <USB_EPSetStall+0x54>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00f      	beq.n	8006894 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800688e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006892:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e02b      	b.n	800690e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db12      	blt.n	80068ee <USB_EPSetStall+0xae>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00f      	beq.n	80068ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800690c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d128      	bne.n	800698a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006956:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	791b      	ldrb	r3, [r3, #4]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d003      	beq.n	8006968 <USB_EPClearStall+0x4c>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	791b      	ldrb	r3, [r3, #4]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d138      	bne.n	80069da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e027      	b.n	80069da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d003      	beq.n	80069ba <USB_EPClearStall+0x9e>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d10f      	bne.n	80069da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a22:	4313      	orrs	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a62:	f023 0302 	bic.w	r3, r3, #2
 8006a66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4013      	ands	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	0c1b      	lsrs	r3, r3, #16
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	4013      	ands	r3, r2
 8006b34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	b29b      	uxth	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4013      	ands	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b74:	68bb      	ldr	r3, [r7, #8]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b087      	sub	sp, #28
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb2:	01db      	lsls	r3, r3, #7
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c18:	f023 0307 	bic.w	r3, r3, #7
 8006c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	333c      	adds	r3, #60	@ 0x3c
 8006c56:	3304      	adds	r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4a26      	ldr	r2, [pc, #152]	@ (8006cf8 <USB_EP0_OutStart+0xb8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d90a      	bls.n	8006c7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c74:	d101      	bne.n	8006c7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e037      	b.n	8006cea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	461a      	mov	r2, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca8:	f043 0318 	orr.w	r3, r3, #24
 8006cac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cbc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006cc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d10f      	bne.n	8006ce8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006ce6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	4f54300a 	.word	0x4f54300a

08006cfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d14:	d901      	bls.n	8006d1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e01b      	b.n	8006d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	daf2      	bge.n	8006d08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f043 0201 	orr.w	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d3e:	d901      	bls.n	8006d44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e006      	b.n	8006d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d0f0      	beq.n	8006d32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006d6c:	2010      	movs	r0, #16
 8006d6e:	f002 f8e1 	bl	8008f34 <USBD_static_malloc>
 8006d72:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32b0      	adds	r2, #176	@ 0xb0
 8006d84:	2100      	movs	r1, #0
 8006d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e048      	b.n	8006e20 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32b0      	adds	r2, #176	@ 0xb0
 8006d98:	68f9      	ldr	r1, [r7, #12]
 8006d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	32b0      	adds	r2, #176	@ 0xb0
 8006da8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7c1b      	ldrb	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006dba:	4b1b      	ldr	r3, [pc, #108]	@ (8006e28 <USBD_HID_Init+0xc8>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	3326      	adds	r3, #38	@ 0x26
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e00c      	b.n	8006df0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <USBD_HID_Init+0xc8>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 020f 	and.w	r2, r3, #15
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	3326      	adds	r3, #38	@ 0x26
 8006dec:	220a      	movs	r2, #10
 8006dee:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006df0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <USBD_HID_Init+0xc8>)
 8006df2:	7819      	ldrb	r1, [r3, #0]
 8006df4:	2304      	movs	r3, #4
 8006df6:	2203      	movs	r2, #3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 ff8a 	bl	8008d12 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <USBD_HID_Init+0xc8>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	3324      	adds	r3, #36	@ 0x24
 8006e14:	2201      	movs	r2, #1
 8006e16:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000136 	.word	0x20000136

08006e2c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006e38:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb8 <USBD_HID_DeInit+0x8c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 ff8d 	bl	8008d5e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006e44:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb8 <USBD_HID_DeInit+0x8c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3324      	adds	r3, #36	@ 0x24
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006e5e:	4b16      	ldr	r3, [pc, #88]	@ (8006eb8 <USBD_HID_DeInit+0x8c>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 020f 	and.w	r2, r3, #15
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	3326      	adds	r3, #38	@ 0x26
 8006e74:	2200      	movs	r2, #0
 8006e76:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	32b0      	adds	r2, #176	@ 0xb0
 8006e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	32b0      	adds	r2, #176	@ 0xb0
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f002 f859 	bl	8008f50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32b0      	adds	r2, #176	@ 0xb0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000136 	.word	0x20000136

08006ebc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	32b0      	adds	r2, #176	@ 0xb0
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0e8      	b.n	80070ba <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d046      	beq.n	8006f82 <USBD_HID_Setup+0xc6>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	f040 80d8 	bne.w	80070aa <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	3b02      	subs	r3, #2
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d836      	bhi.n	8006f72 <USBD_HID_Setup+0xb6>
 8006f04:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <USBD_HID_Setup+0x50>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f63 	.word	0x08006f63
 8006f10:	08006f43 	.word	0x08006f43
 8006f14:	08006f73 	.word	0x08006f73
 8006f18:	08006f73 	.word	0x08006f73
 8006f1c:	08006f73 	.word	0x08006f73
 8006f20:	08006f73 	.word	0x08006f73
 8006f24:	08006f73 	.word	0x08006f73
 8006f28:	08006f73 	.word	0x08006f73
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f35 	.word	0x08006f35
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	885b      	ldrh	r3, [r3, #2]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]
          break;
 8006f40:	e01e      	b.n	8006f80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fba9 	bl	80086a0 <USBD_CtlSendData>
          break;
 8006f4e:	e017      	b.n	8006f80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	885b      	ldrh	r3, [r3, #2]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	605a      	str	r2, [r3, #4]
          break;
 8006f60:	e00e      	b.n	8006f80 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3304      	adds	r3, #4
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fb98 	bl	80086a0 <USBD_CtlSendData>
          break;
 8006f70:	e006      	b.n	8006f80 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fb22 	bl	80085be <USBD_CtlError>
          ret = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7e:	bf00      	nop
      }
      break;
 8006f80:	e09a      	b.n	80070b8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b0b      	cmp	r3, #11
 8006f88:	f200 8086 	bhi.w	8007098 <USBD_HID_Setup+0x1dc>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <USBD_HID_Setup+0xd8>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	080070a7 	.word	0x080070a7
 8006f9c:	08007099 	.word	0x08007099
 8006fa0:	08007099 	.word	0x08007099
 8006fa4:	08007099 	.word	0x08007099
 8006fa8:	08007099 	.word	0x08007099
 8006fac:	08006fef 	.word	0x08006fef
 8006fb0:	08007099 	.word	0x08007099
 8006fb4:	08007099 	.word	0x08007099
 8006fb8:	08007099 	.word	0x08007099
 8006fbc:	08007047 	.word	0x08007047
 8006fc0:	08007071 	.word	0x08007071
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d107      	bne.n	8006fe0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fd0:	f107 030a 	add.w	r3, r7, #10
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fb61 	bl	80086a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fde:	e063      	b.n	80070a8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 faeb 	bl	80085be <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	75fb      	strb	r3, [r7, #23]
          break;
 8006fec:	e05c      	b.n	80070a8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b22      	cmp	r3, #34	@ 0x22
 8006ff8:	d108      	bne.n	800700c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b4a      	cmp	r3, #74	@ 0x4a
 8007000:	bf28      	it	cs
 8007002:	234a      	movcs	r3, #74	@ 0x4a
 8007004:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007006:	4b2f      	ldr	r3, [pc, #188]	@ (80070c4 <USBD_HID_Setup+0x208>)
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	e015      	b.n	8007038 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	885b      	ldrh	r3, [r3, #2]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b21      	cmp	r3, #33	@ 0x21
 8007016:	d108      	bne.n	800702a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007018:	4b2b      	ldr	r3, [pc, #172]	@ (80070c8 <USBD_HID_Setup+0x20c>)
 800701a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	88db      	ldrh	r3, [r3, #6]
 8007020:	2b09      	cmp	r3, #9
 8007022:	bf28      	it	cs
 8007024:	2309      	movcs	r3, #9
 8007026:	82bb      	strh	r3, [r7, #20]
 8007028:	e006      	b.n	8007038 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fac6 	bl	80085be <USBD_CtlError>
            ret = USBD_FAIL;
 8007032:	2303      	movs	r3, #3
 8007034:	75fb      	strb	r3, [r7, #23]
            break;
 8007036:	e037      	b.n	80070a8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007038:	8abb      	ldrh	r3, [r7, #20]
 800703a:	461a      	mov	r2, r3
 800703c:	6939      	ldr	r1, [r7, #16]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fb2e 	bl	80086a0 <USBD_CtlSendData>
          break;
 8007044:	e030      	b.n	80070a8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d107      	bne.n	8007062 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3308      	adds	r3, #8
 8007056:	2201      	movs	r2, #1
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fb20 	bl	80086a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007060:	e022      	b.n	80070a8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 faaa 	bl	80085be <USBD_CtlError>
            ret = USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	75fb      	strb	r3, [r7, #23]
          break;
 800706e:	e01b      	b.n	80070a8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d106      	bne.n	800708a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	885b      	ldrh	r3, [r3, #2]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007088:	e00e      	b.n	80070a8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fa96 	bl	80085be <USBD_CtlError>
            ret = USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	75fb      	strb	r3, [r7, #23]
          break;
 8007096:	e007      	b.n	80070a8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fa8f 	bl	80085be <USBD_CtlError>
          ret = USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	75fb      	strb	r3, [r7, #23]
          break;
 80070a4:	e000      	b.n	80070a8 <USBD_HID_Setup+0x1ec>
          break;
 80070a6:	bf00      	nop
      }
      break;
 80070a8:	e006      	b.n	80070b8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fa86 	bl	80085be <USBD_CtlError>
      ret = USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	75fb      	strb	r3, [r7, #23]
      break;
 80070b6:	bf00      	nop
  }

  return (uint8_t)ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200000ec 	.word	0x200000ec
 80070c8:	200000d4 	.word	0x200000d4

080070cc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80070d4:	2181      	movs	r1, #129	@ 0x81
 80070d6:	4809      	ldr	r0, [pc, #36]	@ (80070fc <USBD_HID_GetFSCfgDesc+0x30>)
 80070d8:	f000 fc3b 	bl	8007952 <USBD_GetEpDesc>
 80070dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	220a      	movs	r2, #10
 80070e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2222      	movs	r2, #34	@ 0x22
 80070ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	@ (80070fc <USBD_HID_GetFSCfgDesc+0x30>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200000b0 	.word	0x200000b0

08007100 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007108:	2181      	movs	r1, #129	@ 0x81
 800710a:	4809      	ldr	r0, [pc, #36]	@ (8007130 <USBD_HID_GetHSCfgDesc+0x30>)
 800710c:	f000 fc21 	bl	8007952 <USBD_GetEpDesc>
 8007110:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2207      	movs	r2, #7
 800711c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2222      	movs	r2, #34	@ 0x22
 8007122:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007124:	4b02      	ldr	r3, [pc, #8]	@ (8007130 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200000b0 	.word	0x200000b0

08007134 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800713c:	2181      	movs	r1, #129	@ 0x81
 800713e:	4809      	ldr	r0, [pc, #36]	@ (8007164 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007140:	f000 fc07 	bl	8007952 <USBD_GetEpDesc>
 8007144:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	220a      	movs	r2, #10
 8007150:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2222      	movs	r2, #34	@ 0x22
 8007156:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	@ (8007164 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200000b0 	.word	0x200000b0

08007168 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32b0      	adds	r2, #176	@ 0xb0
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	2200      	movs	r2, #0
 8007184:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220a      	movs	r2, #10
 80071a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80071a2:	4b03      	ldr	r3, [pc, #12]	@ (80071b0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	200000e0 	.word	0x200000e0

080071b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e01f      	b.n	800720c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f001 fd19 	bl	8008c38 <USBD_LL_Init>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]

  return ret;
 800720a:	7dfb      	ldrb	r3, [r7, #23]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	e025      	b.n	8007278 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32ae      	adds	r2, #174	@ 0xae
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00f      	beq.n	8007268 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	@ 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	f107 020e 	add.w	r2, r7, #14
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
 8007260:	4602      	mov	r2, r0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fd27 	bl	8008cdc <USBD_LL_Start>
 800728e:	4603      	mov	r3, r0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	460b      	mov	r3, r1
 80072b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	4611      	mov	r1, r2
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f001 f90c 	bl	800854a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2b02      	cmp	r3, #2
 8007354:	d01a      	beq.n	800738c <USBD_LL_SetupStage+0x72>
 8007356:	2b02      	cmp	r3, #2
 8007358:	d822      	bhi.n	80073a0 <USBD_LL_SetupStage+0x86>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <USBD_LL_SetupStage+0x4a>
 800735e:	2b01      	cmp	r3, #1
 8007360:	d00a      	beq.n	8007378 <USBD_LL_SetupStage+0x5e>
 8007362:	e01d      	b.n	80073a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb63 	bl	8007a38 <USBD_StdDevReq>
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]
      break;
 8007376:	e020      	b.n	80073ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fbcb 	bl	8007b1c <USBD_StdItfReq>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
      break;
 800738a:	e016      	b.n	80073ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc2d 	bl	8007bf4 <USBD_StdEPReq>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
      break;
 800739e:	e00c      	b.n	80073ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fcf4 	bl	8008d9c <USBD_LL_StallEP>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	bf00      	nop
  }

  return ret;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	460b      	mov	r3, r1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d16e      	bne.n	80074ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f040 8098 	bne.w	8007520 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d913      	bls.n	8007424 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	4293      	cmp	r3, r2
 8007414:	bf28      	it	cs
 8007416:	4613      	movcs	r3, r2
 8007418:	461a      	mov	r2, r3
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 f96b 	bl	80086f8 <USBD_CtlContinueRx>
 8007422:	e07d      	b.n	8007520 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2b02      	cmp	r3, #2
 8007430:	d014      	beq.n	800745c <USBD_LL_DataOutStage+0x98>
 8007432:	2b02      	cmp	r3, #2
 8007434:	d81d      	bhi.n	8007472 <USBD_LL_DataOutStage+0xae>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <USBD_LL_DataOutStage+0x7c>
 800743a:	2b01      	cmp	r3, #1
 800743c:	d003      	beq.n	8007446 <USBD_LL_DataOutStage+0x82>
 800743e:	e018      	b.n	8007472 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	75bb      	strb	r3, [r7, #22]
            break;
 8007444:	e018      	b.n	8007478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800744c:	b2db      	uxtb	r3, r3
 800744e:	4619      	mov	r1, r3
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fa64 	bl	800791e <USBD_CoreFindIF>
 8007456:	4603      	mov	r3, r0
 8007458:	75bb      	strb	r3, [r7, #22]
            break;
 800745a:	e00d      	b.n	8007478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fa66 	bl	8007938 <USBD_CoreFindEP>
 800746c:	4603      	mov	r3, r0
 800746e:	75bb      	strb	r3, [r7, #22]
            break;
 8007470:	e002      	b.n	8007478 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	75bb      	strb	r3, [r7, #22]
            break;
 8007476:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007478:	7dbb      	ldrb	r3, [r7, #22]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d119      	bne.n	80074b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d113      	bne.n	80074b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800748a:	7dba      	ldrb	r2, [r7, #22]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	32ae      	adds	r2, #174	@ 0xae
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800749a:	7dba      	ldrb	r2, [r7, #22]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074a2:	7dba      	ldrb	r2, [r7, #22]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	32ae      	adds	r2, #174	@ 0xae
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 f931 	bl	800871a <USBD_CtlSendStatus>
 80074b8:	e032      	b.n	8007520 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	4619      	mov	r1, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fa37 	bl	8007938 <USBD_CoreFindEP>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074ce:	7dbb      	ldrb	r3, [r7, #22]
 80074d0:	2bff      	cmp	r3, #255	@ 0xff
 80074d2:	d025      	beq.n	8007520 <USBD_LL_DataOutStage+0x15c>
 80074d4:	7dbb      	ldrb	r3, [r7, #22]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d122      	bne.n	8007520 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d117      	bne.n	8007516 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074e6:	7dba      	ldrb	r2, [r7, #22]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	32ae      	adds	r2, #174	@ 0xae
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00f      	beq.n	8007516 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80074f6:	7dba      	ldrb	r2, [r7, #22]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074fe:	7dba      	ldrb	r2, [r7, #22]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	32ae      	adds	r2, #174	@ 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	7afa      	ldrb	r2, [r7, #11]
 800750c:	4611      	mov	r1, r2
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	4798      	blx	r3
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	e000      	b.n	8007522 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	460b      	mov	r3, r1
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d16f      	bne.n	800761e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3314      	adds	r3, #20
 8007542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800754a:	2b02      	cmp	r3, #2
 800754c:	d15a      	bne.n	8007604 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	429a      	cmp	r2, r3
 8007558:	d914      	bls.n	8007584 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	1ad2      	subs	r2, r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	461a      	mov	r2, r3
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f001 f8b0 	bl	80086d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007576:	2300      	movs	r3, #0
 8007578:	2200      	movs	r2, #0
 800757a:	2100      	movs	r1, #0
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 fcb7 	bl	8008ef0 <USBD_LL_PrepareReceive>
 8007582:	e03f      	b.n	8007604 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	d11c      	bne.n	80075ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007598:	429a      	cmp	r2, r3
 800759a:	d316      	bcc.n	80075ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d20f      	bcs.n	80075ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f001 f891 	bl	80086d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075bc:	2300      	movs	r3, #0
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 fc94 	bl	8008ef0 <USBD_LL_PrepareReceive>
 80075c8:	e01c      	b.n	8007604 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d10f      	bne.n	80075f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075f6:	2180      	movs	r1, #128	@ 0x80
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fbcf 	bl	8008d9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f001 f89e 	bl	8008740 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03a      	beq.n	8007684 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fe42 	bl	8007298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800761c:	e032      	b.n	8007684 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007624:	b2db      	uxtb	r3, r3
 8007626:	4619      	mov	r1, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f985 	bl	8007938 <USBD_CoreFindEP>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2bff      	cmp	r3, #255	@ 0xff
 8007636:	d025      	beq.n	8007684 <USBD_LL_DataInStage+0x15a>
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d122      	bne.n	8007684 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b03      	cmp	r3, #3
 8007648:	d11c      	bne.n	8007684 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800764a:	7dfa      	ldrb	r2, [r7, #23]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	32ae      	adds	r2, #174	@ 0xae
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d014      	beq.n	8007684 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800765a:	7dfa      	ldrb	r2, [r7, #23]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007662:	7dfa      	ldrb	r2, [r7, #23]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	32ae      	adds	r2, #174	@ 0xae
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	7afa      	ldrb	r2, [r7, #11]
 8007670:	4611      	mov	r1, r2
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
 8007676:	4603      	mov	r3, r0
 8007678:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800767a:	7dbb      	ldrb	r3, [r7, #22]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007680:	7dbb      	ldrb	r3, [r7, #22]
 8007682:	e000      	b.n	8007686 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6852      	ldr	r2, [r2, #4]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	4611      	mov	r1, r2
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076f4:	2340      	movs	r3, #64	@ 0x40
 80076f6:	2200      	movs	r2, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fb09 	bl	8008d12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2240      	movs	r2, #64	@ 0x40
 800770c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007710:	2340      	movs	r3, #64	@ 0x40
 8007712:	2200      	movs	r2, #0
 8007714:	2180      	movs	r1, #128	@ 0x80
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fafb 	bl	8008d12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2240      	movs	r2, #64	@ 0x40
 8007726:	621a      	str	r2, [r3, #32]

  return ret;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b04      	cmp	r3, #4
 8007764:	d006      	beq.n	8007774 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2204      	movs	r2, #4
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b04      	cmp	r3, #4
 800779c:	d106      	bne.n	80077ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d110      	bne.n	80077f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	@ 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e01c      	b.n	8007856 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b03      	cmp	r3, #3
 8007826:	d115      	bne.n	8007854 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32ae      	adds	r2, #174	@ 0xae
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32ae      	adds	r2, #174	@ 0xae
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4611      	mov	r1, r2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32ae      	adds	r2, #174	@ 0xae
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	e01c      	b.n	80078ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b03      	cmp	r3, #3
 800788a:	d115      	bne.n	80078b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	32ae      	adds	r2, #174	@ 0xae
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32ae      	adds	r2, #174	@ 0xae
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b0:	78fa      	ldrb	r2, [r7, #3]
 80078b2:	4611      	mov	r1, r2
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6852      	ldr	r2, [r2, #4]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	4611      	mov	r1, r2
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800792a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007944:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	b29b      	uxth	r3, r3
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	4293      	cmp	r3, r2
 8007976:	d91f      	bls.n	80079b8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800797e:	e013      	b.n	80079a8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007980:	f107 030a 	add.w	r3, r7, #10
 8007984:	4619      	mov	r1, r3
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f000 f81b 	bl	80079c2 <USBD_GetNextDesc>
 800798c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b05      	cmp	r3, #5
 8007994:	d108      	bne.n	80079a8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	789b      	ldrb	r3, [r3, #2]
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d008      	beq.n	80079b6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	885b      	ldrh	r3, [r3, #2]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d8e5      	bhi.n	8007980 <USBD_GetEpDesc+0x2e>
 80079b4:	e000      	b.n	80079b8 <USBD_GetEpDesc+0x66>
          break;
 80079b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079b8:	693b      	ldr	r3, [r7, #16]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a18:	8a3b      	ldrh	r3, [r7, #16]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	b21a      	sxth	r2, r3
 8007a1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	b21b      	sxth	r3, r3
 8007a26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a28:	89fb      	ldrh	r3, [r7, #14]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d005      	beq.n	8007a5e <USBD_StdDevReq+0x26>
 8007a52:	2b40      	cmp	r3, #64	@ 0x40
 8007a54:	d857      	bhi.n	8007b06 <USBD_StdDevReq+0xce>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <USBD_StdDevReq+0x42>
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d153      	bne.n	8007b06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32ae      	adds	r2, #174	@ 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e04a      	b.n	8007b10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b09      	cmp	r3, #9
 8007a80:	d83b      	bhi.n	8007afa <USBD_StdDevReq+0xc2>
 8007a82:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <USBD_StdDevReq+0x50>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007add 	.word	0x08007add
 8007a8c:	08007af1 	.word	0x08007af1
 8007a90:	08007afb 	.word	0x08007afb
 8007a94:	08007ae7 	.word	0x08007ae7
 8007a98:	08007afb 	.word	0x08007afb
 8007a9c:	08007abb 	.word	0x08007abb
 8007aa0:	08007ab1 	.word	0x08007ab1
 8007aa4:	08007afb 	.word	0x08007afb
 8007aa8:	08007ad3 	.word	0x08007ad3
 8007aac:	08007ac5 	.word	0x08007ac5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa3c 	bl	8007f30 <USBD_GetDescriptor>
          break;
 8007ab8:	e024      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fba1 	bl	8008204 <USBD_SetAddress>
          break;
 8007ac2:	e01f      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fbe0 	bl	800828c <USBD_SetConfig>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]
          break;
 8007ad0:	e018      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc83 	bl	80083e0 <USBD_GetConfig>
          break;
 8007ada:	e013      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fcb4 	bl	800844c <USBD_GetStatus>
          break;
 8007ae4:	e00e      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fce3 	bl	80084b4 <USBD_SetFeature>
          break;
 8007aee:	e009      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fd07 	bl	8008506 <USBD_ClrFeature>
          break;
 8007af8:	e004      	b.n	8007b04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fd5e 	bl	80085be <USBD_CtlError>
          break;
 8007b02:	bf00      	nop
      }
      break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fd58 	bl	80085be <USBD_CtlError>
      break;
 8007b0e:	bf00      	nop
  }

  return ret;
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop

08007b1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	d005      	beq.n	8007b42 <USBD_StdItfReq+0x26>
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	d852      	bhi.n	8007be0 <USBD_StdItfReq+0xc4>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <USBD_StdItfReq+0x26>
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d14e      	bne.n	8007be0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d840      	bhi.n	8007bd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	889b      	ldrh	r3, [r3, #4]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d836      	bhi.n	8007bc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	889b      	ldrh	r3, [r3, #4]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fedb 	bl	800791e <USBD_CoreFindIF>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2bff      	cmp	r3, #255	@ 0xff
 8007b70:	d01d      	beq.n	8007bae <USBD_StdItfReq+0x92>
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d11a      	bne.n	8007bae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b78:	7bba      	ldrb	r2, [r7, #14]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32ae      	adds	r2, #174	@ 0xae
 8007b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b88:	7bba      	ldrb	r2, [r7, #14]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b90:	7bba      	ldrb	r2, [r7, #14]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32ae      	adds	r2, #174	@ 0xae
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ba6:	e004      	b.n	8007bb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bac:	e001      	b.n	8007bb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88db      	ldrh	r3, [r3, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d110      	bne.n	8007bdc <USBD_StdItfReq+0xc0>
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fdaa 	bl	800871a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bc6:	e009      	b.n	8007bdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fcf7 	bl	80085be <USBD_CtlError>
          break;
 8007bd0:	e004      	b.n	8007bdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fcf2 	bl	80085be <USBD_CtlError>
          break;
 8007bda:	e000      	b.n	8007bde <USBD_StdItfReq+0xc2>
          break;
 8007bdc:	bf00      	nop
      }
      break;
 8007bde:	e004      	b.n	8007bea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fceb 	bl	80085be <USBD_CtlError>
      break;
 8007be8:	bf00      	nop
  }

  return ret;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	889b      	ldrh	r3, [r3, #4]
 8007c06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c10:	2b40      	cmp	r3, #64	@ 0x40
 8007c12:	d007      	beq.n	8007c24 <USBD_StdEPReq+0x30>
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	f200 817f 	bhi.w	8007f18 <USBD_StdEPReq+0x324>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02a      	beq.n	8007c74 <USBD_StdEPReq+0x80>
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	f040 817a 	bne.w	8007f18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fe85 	bl	8007938 <USBD_CoreFindEP>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	2bff      	cmp	r3, #255	@ 0xff
 8007c36:	f000 8174 	beq.w	8007f22 <USBD_StdEPReq+0x32e>
 8007c3a:	7b7b      	ldrb	r3, [r7, #13]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 8170 	bne.w	8007f22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c42:	7b7a      	ldrb	r2, [r7, #13]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c4a:	7b7a      	ldrb	r2, [r7, #13]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	32ae      	adds	r2, #174	@ 0xae
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8163 	beq.w	8007f22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c5c:	7b7a      	ldrb	r2, [r7, #13]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	32ae      	adds	r2, #174	@ 0xae
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c72:	e156      	b.n	8007f22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d008      	beq.n	8007c8e <USBD_StdEPReq+0x9a>
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	f300 8145 	bgt.w	8007f0c <USBD_StdEPReq+0x318>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 809b 	beq.w	8007dbe <USBD_StdEPReq+0x1ca>
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d03c      	beq.n	8007d06 <USBD_StdEPReq+0x112>
 8007c8c:	e13e      	b.n	8007f0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d002      	beq.n	8007ca0 <USBD_StdEPReq+0xac>
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d016      	beq.n	8007ccc <USBD_StdEPReq+0xd8>
 8007c9e:	e02c      	b.n	8007cfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <USBD_StdEPReq+0xce>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b80      	cmp	r3, #128	@ 0x80
 8007caa:	d00a      	beq.n	8007cc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 f873 	bl	8008d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cb6:	2180      	movs	r1, #128	@ 0x80
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f86f 	bl	8008d9c <USBD_LL_StallEP>
 8007cbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc0:	e020      	b.n	8007d04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc7a 	bl	80085be <USBD_CtlError>
              break;
 8007cca:	e01b      	b.n	8007d04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10e      	bne.n	8007cf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <USBD_StdEPReq+0xfe>
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b80      	cmp	r3, #128	@ 0x80
 8007cde:	d008      	beq.n	8007cf2 <USBD_StdEPReq+0xfe>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f855 	bl	8008d9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd11 	bl	800871a <USBD_CtlSendStatus>

              break;
 8007cf8:	e004      	b.n	8007d04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc5e 	bl	80085be <USBD_CtlError>
              break;
 8007d02:	bf00      	nop
          }
          break;
 8007d04:	e107      	b.n	8007f16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d002      	beq.n	8007d18 <USBD_StdEPReq+0x124>
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d016      	beq.n	8007d44 <USBD_StdEPReq+0x150>
 8007d16:	e04b      	b.n	8007db0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00d      	beq.n	8007d3a <USBD_StdEPReq+0x146>
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	2b80      	cmp	r3, #128	@ 0x80
 8007d22:	d00a      	beq.n	8007d3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f837 	bl	8008d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d2e:	2180      	movs	r1, #128	@ 0x80
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 f833 	bl	8008d9c <USBD_LL_StallEP>
 8007d36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d38:	e040      	b.n	8007dbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fc3e 	bl	80085be <USBD_CtlError>
              break;
 8007d42:	e03b      	b.n	8007dbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d136      	bne.n	8007dba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f83d 	bl	8008dda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fcda 	bl	800871a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fde4 	bl	8007938 <USBD_CoreFindEP>
 8007d70:	4603      	mov	r3, r0
 8007d72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d74:	7b7b      	ldrb	r3, [r7, #13]
 8007d76:	2bff      	cmp	r3, #255	@ 0xff
 8007d78:	d01f      	beq.n	8007dba <USBD_StdEPReq+0x1c6>
 8007d7a:	7b7b      	ldrb	r3, [r7, #13]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11c      	bne.n	8007dba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d80:	7b7a      	ldrb	r2, [r7, #13]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d88:	7b7a      	ldrb	r2, [r7, #13]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32ae      	adds	r2, #174	@ 0xae
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d010      	beq.n	8007dba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d98:	7b7a      	ldrb	r2, [r7, #13]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32ae      	adds	r2, #174	@ 0xae
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007dae:	e004      	b.n	8007dba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fc03 	bl	80085be <USBD_CtlError>
              break;
 8007db8:	e000      	b.n	8007dbc <USBD_StdEPReq+0x1c8>
              break;
 8007dba:	bf00      	nop
          }
          break;
 8007dbc:	e0ab      	b.n	8007f16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d002      	beq.n	8007dd0 <USBD_StdEPReq+0x1dc>
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d032      	beq.n	8007e34 <USBD_StdEPReq+0x240>
 8007dce:	e097      	b.n	8007f00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <USBD_StdEPReq+0x1f2>
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b80      	cmp	r3, #128	@ 0x80
 8007dda:	d004      	beq.n	8007de6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fbed 	bl	80085be <USBD_CtlError>
                break;
 8007de4:	e091      	b.n	8007f0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da0b      	bge.n	8007e06 <USBD_StdEPReq+0x212>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	3310      	adds	r3, #16
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	3304      	adds	r3, #4
 8007e04:	e00b      	b.n	8007e1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fc37 	bl	80086a0 <USBD_CtlSendData>
              break;
 8007e32:	e06a      	b.n	8007f0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da11      	bge.n	8007e60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	3324      	adds	r3, #36	@ 0x24
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d117      	bne.n	8007e86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fbb0 	bl	80085be <USBD_CtlError>
                  break;
 8007e5e:	e054      	b.n	8007f0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	f003 020f 	and.w	r2, r3, #15
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb9d 	bl	80085be <USBD_CtlError>
                  break;
 8007e84:	e041      	b.n	8007f0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da0b      	bge.n	8007ea6 <USBD_StdEPReq+0x2b2>
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	3310      	adds	r3, #16
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	e00b      	b.n	8007ebe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <USBD_StdEPReq+0x2d8>
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b80      	cmp	r3, #128	@ 0x80
 8007eca:	d103      	bne.n	8007ed4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e00e      	b.n	8007ef2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 ff9d 	bl	8008e18 <USBD_LL_IsStallEP>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fbd1 	bl	80086a0 <USBD_CtlSendData>
              break;
 8007efe:	e004      	b.n	8007f0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fb5b 	bl	80085be <USBD_CtlError>
              break;
 8007f08:	bf00      	nop
          }
          break;
 8007f0a:	e004      	b.n	8007f16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fb55 	bl	80085be <USBD_CtlError>
          break;
 8007f14:	bf00      	nop
      }
      break;
 8007f16:	e005      	b.n	8007f24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fb4f 	bl	80085be <USBD_CtlError>
      break;
 8007f20:	e000      	b.n	8007f24 <USBD_StdEPReq+0x330>
      break;
 8007f22:	bf00      	nop
  }

  return ret;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	885b      	ldrh	r3, [r3, #2]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b06      	cmp	r3, #6
 8007f52:	f200 8128 	bhi.w	80081a6 <USBD_GetDescriptor+0x276>
 8007f56:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <USBD_GetDescriptor+0x2c>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f91 	.word	0x08007f91
 8007f64:	08007fd1 	.word	0x08007fd1
 8007f68:	080081a7 	.word	0x080081a7
 8007f6c:	080081a7 	.word	0x080081a7
 8007f70:	08008147 	.word	0x08008147
 8007f74:	08008173 	.word	0x08008173
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7c12      	ldrb	r2, [r2, #16]
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	60f8      	str	r0, [r7, #12]
      break;
 8007f8e:	e112      	b.n	80081b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	7c1b      	ldrb	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10d      	bne.n	8007fb4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f107 0208 	add.w	r2, r7, #8
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	2202      	movs	r2, #2
 8007fb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fb2:	e100      	b.n	80081b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	f107 0208 	add.w	r2, r7, #8
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4798      	blx	r3
 8007fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	2202      	movs	r2, #2
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e0f2      	b.n	80081b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b05      	cmp	r3, #5
 8007fd8:	f200 80ac 	bhi.w	8008134 <USBD_GetDescriptor+0x204>
 8007fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <USBD_GetDescriptor+0xb4>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008065 	.word	0x08008065
 8007ff0:	08008099 	.word	0x08008099
 8007ff4:	080080cd 	.word	0x080080cd
 8007ff8:	08008101 	.word	0x08008101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801e:	e091      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 facb 	bl	80085be <USBD_CtlError>
            err++;
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	3301      	adds	r3, #1
 800802c:	72fb      	strb	r3, [r7, #11]
          break;
 800802e:	e089      	b.n	8008144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7c12      	ldrb	r2, [r2, #16]
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3
 8008050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008052:	e077      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fab1 	bl	80085be <USBD_CtlError>
            err++;
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	3301      	adds	r3, #1
 8008060:	72fb      	strb	r3, [r7, #11]
          break;
 8008062:	e06f      	b.n	8008144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008086:	e05d      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa97 	bl	80085be <USBD_CtlError>
            err++;
 8008090:	7afb      	ldrb	r3, [r7, #11]
 8008092:	3301      	adds	r3, #1
 8008094:	72fb      	strb	r3, [r7, #11]
          break;
 8008096:	e055      	b.n	8008144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	7c12      	ldrb	r2, [r2, #16]
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ba:	e043      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa7d 	bl	80085be <USBD_CtlError>
            err++;
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	3301      	adds	r3, #1
 80080c8:	72fb      	strb	r3, [r7, #11]
          break;
 80080ca:	e03b      	b.n	8008144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e029      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa63 	bl	80085be <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e021      	b.n	8008144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008122:	e00f      	b.n	8008144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa49 	bl	80085be <USBD_CtlError>
            err++;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	72fb      	strb	r3, [r7, #11]
          break;
 8008132:	e007      	b.n	8008144 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa41 	bl	80085be <USBD_CtlError>
          err++;
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	3301      	adds	r3, #1
 8008140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008142:	bf00      	nop
      }
      break;
 8008144:	e037      	b.n	80081b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7c1b      	ldrb	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008156:	f107 0208 	add.w	r2, r7, #8
 800815a:	4610      	mov	r0, r2
 800815c:	4798      	blx	r3
 800815e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008160:	e029      	b.n	80081b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa2a 	bl	80085be <USBD_CtlError>
        err++;
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	3301      	adds	r3, #1
 800816e:	72fb      	strb	r3, [r7, #11]
      break;
 8008170:	e021      	b.n	80081b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7c1b      	ldrb	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008182:	f107 0208 	add.w	r2, r7, #8
 8008186:	4610      	mov	r0, r2
 8008188:	4798      	blx	r3
 800818a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	2207      	movs	r2, #7
 8008192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008194:	e00f      	b.n	80081b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fa10 	bl	80085be <USBD_CtlError>
        err++;
 800819e:	7afb      	ldrb	r3, [r7, #11]
 80081a0:	3301      	adds	r3, #1
 80081a2:	72fb      	strb	r3, [r7, #11]
      break;
 80081a4:	e007      	b.n	80081b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fa08 	bl	80085be <USBD_CtlError>
      err++;
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	3301      	adds	r3, #1
 80081b2:	72fb      	strb	r3, [r7, #11]
      break;
 80081b4:	bf00      	nop
  }

  if (err != 0U)
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d11e      	bne.n	80081fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	88db      	ldrh	r3, [r3, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d016      	beq.n	80081f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081c4:	893b      	ldrh	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	88da      	ldrh	r2, [r3, #6]
 80081ce:	893b      	ldrh	r3, [r7, #8]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bf28      	it	cs
 80081d4:	4613      	movcs	r3, r2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081da:	893b      	ldrh	r3, [r7, #8]
 80081dc:	461a      	mov	r2, r3
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa5d 	bl	80086a0 <USBD_CtlSendData>
 80081e6:	e009      	b.n	80081fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f9e7 	bl	80085be <USBD_CtlError>
 80081f0:	e004      	b.n	80081fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa91 	bl	800871a <USBD_CtlSendStatus>
 80081f8:	e000      	b.n	80081fc <USBD_GetDescriptor+0x2cc>
    return;
 80081fa:	bf00      	nop
  }
}
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	889b      	ldrh	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d131      	bne.n	800827a <USBD_SetAddress+0x76>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d12d      	bne.n	800827a <USBD_SetAddress+0x76>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	2b7f      	cmp	r3, #127	@ 0x7f
 8008224:	d829      	bhi.n	800827a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b03      	cmp	r3, #3
 800823c:	d104      	bne.n	8008248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f9bc 	bl	80085be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	e01d      	b.n	8008284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7bfa      	ldrb	r2, [r7, #15]
 800824c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fe0b 	bl	8008e70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa5d 	bl	800871a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800826e:	e009      	b.n	8008284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008278:	e004      	b.n	8008284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f99e 	bl	80085be <USBD_CtlError>
  }
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	885b      	ldrh	r3, [r3, #2]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	4b4e      	ldr	r3, [pc, #312]	@ (80083dc <USBD_SetConfig+0x150>)
 80082a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082a4:	4b4d      	ldr	r3, [pc, #308]	@ (80083dc <USBD_SetConfig+0x150>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d905      	bls.n	80082b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f985 	bl	80085be <USBD_CtlError>
    return USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e08c      	b.n	80083d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d002      	beq.n	80082ca <USBD_SetConfig+0x3e>
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d029      	beq.n	800831c <USBD_SetConfig+0x90>
 80082c8:	e075      	b.n	80083b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082ca:	4b44      	ldr	r3, [pc, #272]	@ (80083dc <USBD_SetConfig+0x150>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d020      	beq.n	8008314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082d2:	4b42      	ldr	r3, [pc, #264]	@ (80083dc <USBD_SetConfig+0x150>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082dc:	4b3f      	ldr	r3, [pc, #252]	@ (80083dc <USBD_SetConfig+0x150>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fe ffe3 	bl	80072ae <USBD_SetClassConfig>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f962 	bl	80085be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008302:	e065      	b.n	80083d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa08 	bl	800871a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2203      	movs	r2, #3
 800830e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008312:	e05d      	b.n	80083d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fa00 	bl	800871a <USBD_CtlSendStatus>
      break;
 800831a:	e059      	b.n	80083d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800831c:	4b2f      	ldr	r3, [pc, #188]	@ (80083dc <USBD_SetConfig+0x150>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d112      	bne.n	800834a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800832c:	4b2b      	ldr	r3, [pc, #172]	@ (80083dc <USBD_SetConfig+0x150>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008336:	4b29      	ldr	r3, [pc, #164]	@ (80083dc <USBD_SetConfig+0x150>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fe ffd2 	bl	80072e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9e9 	bl	800871a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008348:	e042      	b.n	80083d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800834a:	4b24      	ldr	r3, [pc, #144]	@ (80083dc <USBD_SetConfig+0x150>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d02a      	beq.n	80083ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fe ffc0 	bl	80072e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <USBD_SetConfig+0x150>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008370:	4b1a      	ldr	r3, [pc, #104]	@ (80083dc <USBD_SetConfig+0x150>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fe ff99 	bl	80072ae <USBD_SetClassConfig>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00f      	beq.n	80083a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f918 	bl	80085be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fe ffa5 	bl	80072e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083a4:	e014      	b.n	80083d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9b7 	bl	800871a <USBD_CtlSendStatus>
      break;
 80083ac:	e010      	b.n	80083d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9b3 	bl	800871a <USBD_CtlSendStatus>
      break;
 80083b4:	e00c      	b.n	80083d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f900 	bl	80085be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083be:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <USBD_SetConfig+0x150>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fe ff8e 	bl	80072e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083ca:	2303      	movs	r3, #3
 80083cc:	73fb      	strb	r3, [r7, #15]
      break;
 80083ce:	bf00      	nop
  }

  return ret;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000470 	.word	0x20000470

080083e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d004      	beq.n	80083fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8e2 	bl	80085be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083fa:	e023      	b.n	8008444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	dc02      	bgt.n	800840e <USBD_GetConfig+0x2e>
 8008408:	2b00      	cmp	r3, #0
 800840a:	dc03      	bgt.n	8008414 <USBD_GetConfig+0x34>
 800840c:	e015      	b.n	800843a <USBD_GetConfig+0x5a>
 800840e:	2b03      	cmp	r3, #3
 8008410:	d00b      	beq.n	800842a <USBD_GetConfig+0x4a>
 8008412:	e012      	b.n	800843a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3308      	adds	r3, #8
 800841e:	2201      	movs	r2, #1
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f93c 	bl	80086a0 <USBD_CtlSendData>
        break;
 8008428:	e00c      	b.n	8008444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3304      	adds	r3, #4
 800842e:	2201      	movs	r2, #1
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f934 	bl	80086a0 <USBD_CtlSendData>
        break;
 8008438:	e004      	b.n	8008444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8be 	bl	80085be <USBD_CtlError>
        break;
 8008442:	bf00      	nop
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845c:	b2db      	uxtb	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	2b02      	cmp	r3, #2
 8008462:	d81e      	bhi.n	80084a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d004      	beq.n	8008476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f8a5 	bl	80085be <USBD_CtlError>
        break;
 8008474:	e01a      	b.n	80084ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008482:	2b00      	cmp	r3, #0
 8008484:	d005      	beq.n	8008492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f043 0202 	orr.w	r2, r3, #2
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	330c      	adds	r3, #12
 8008496:	2202      	movs	r2, #2
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f900 	bl	80086a0 <USBD_CtlSendData>
      break;
 80084a0:	e004      	b.n	80084ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f88a 	bl	80085be <USBD_CtlError>
      break;
 80084aa:	bf00      	nop
  }
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	885b      	ldrh	r3, [r3, #2]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d107      	bne.n	80084d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f923 	bl	800871a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084d4:	e013      	b.n	80084fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	885b      	ldrh	r3, [r3, #2]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d10b      	bne.n	80084f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f913 	bl	800871a <USBD_CtlSendStatus>
}
 80084f4:	e003      	b.n	80084fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f860 	bl	80085be <USBD_CtlError>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008516:	b2db      	uxtb	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	2b02      	cmp	r3, #2
 800851c:	d80b      	bhi.n	8008536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10c      	bne.n	8008540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f8f3 	bl	800871a <USBD_CtlSendStatus>
      }
      break;
 8008534:	e004      	b.n	8008540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f840 	bl	80085be <USBD_CtlError>
      break;
 800853e:	e000      	b.n	8008542 <USBD_ClrFeature+0x3c>
      break;
 8008540:	bf00      	nop
  }
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff fa40 	bl	80079fa <SWAPBYTE>
 800857a:	4603      	mov	r3, r0
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff fa33 	bl	80079fa <SWAPBYTE>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fa26 	bl	80079fa <SWAPBYTE>
 80085ae:	4603      	mov	r3, r0
 80085b0:	461a      	mov	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	80da      	strh	r2, [r3, #6]
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c8:	2180      	movs	r1, #128	@ 0x80
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fbe6 	bl	8008d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085d0:	2100      	movs	r1, #0
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fbe2 	bl	8008d9c <USBD_LL_StallEP>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d036      	beq.n	8008664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80085fa:	6938      	ldr	r0, [r7, #16]
 80085fc:	f000 f836 	bl	800866c <USBD_GetLen>
 8008600:	4603      	mov	r3, r0
 8008602:	3301      	adds	r3, #1
 8008604:	b29b      	uxth	r3, r3
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	4413      	add	r3, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	701a      	strb	r2, [r3, #0]
  idx++;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	3301      	adds	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	4413      	add	r3, r2
 8008626:	2203      	movs	r2, #3
 8008628:	701a      	strb	r2, [r3, #0]
  idx++;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	3301      	adds	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008630:	e013      	b.n	800865a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	4413      	add	r3, r2
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	3301      	adds	r3, #1
 8008642:	613b      	str	r3, [r7, #16]
    idx++;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	3301      	adds	r3, #1
 8008648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	4413      	add	r3, r2
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]
    idx++;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	3301      	adds	r3, #1
 8008658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e7      	bne.n	8008632 <USBD_GetString+0x52>
 8008662:	e000      	b.n	8008666 <USBD_GetString+0x86>
    return;
 8008664:	bf00      	nop
  }
}
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800867c:	e005      	b.n	800868a <USBD_GetLen+0x1e>
  {
    len++;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	3301      	adds	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	3301      	adds	r3, #1
 8008688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f5      	bne.n	800867e <USBD_GetLen+0x12>
  }

  return len;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	2100      	movs	r1, #0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fbf1 	bl	8008eae <USBD_LL_Transmit>

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	2100      	movs	r1, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fbe0 	bl	8008eae <USBD_LL_Transmit>

  return USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 fbf0 	bl	8008ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2204      	movs	r2, #4
 8008726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800872a:	2300      	movs	r3, #0
 800872c:	2200      	movs	r2, #0
 800872e:	2100      	movs	r1, #0
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fbbc 	bl	8008eae <USBD_LL_Transmit>

  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2205      	movs	r2, #5
 800874c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008750:	2300      	movs	r3, #0
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbca 	bl	8008ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800876c:	2201      	movs	r2, #1
 800876e:	490e      	ldr	r1, [pc, #56]	@ (80087a8 <MX_USB_DEVICE_Init+0x40>)
 8008770:	480e      	ldr	r0, [pc, #56]	@ (80087ac <MX_USB_DEVICE_Init+0x44>)
 8008772:	f7fe fd1f 	bl	80071b4 <USBD_Init>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800877c:	f7f8 fd0c 	bl	8001198 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8008780:	490b      	ldr	r1, [pc, #44]	@ (80087b0 <MX_USB_DEVICE_Init+0x48>)
 8008782:	480a      	ldr	r0, [pc, #40]	@ (80087ac <MX_USB_DEVICE_Init+0x44>)
 8008784:	f7fe fd46 	bl	8007214 <USBD_RegisterClass>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800878e:	f7f8 fd03 	bl	8001198 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008792:	4806      	ldr	r0, [pc, #24]	@ (80087ac <MX_USB_DEVICE_Init+0x44>)
 8008794:	f7fe fd74 	bl	8007280 <USBD_Start>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800879e:	f7f8 fcfb 	bl	8001198 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087a2:	bf00      	nop
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000138 	.word	0x20000138
 80087ac:	20000474 	.word	0x20000474
 80087b0:	20000078 	.word	0x20000078

080087b4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2212      	movs	r2, #18
 80087c4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80087c6:	4b03      	ldr	r3, [pc, #12]	@ (80087d4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	20000154 	.word	0x20000154

080087d8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2204      	movs	r2, #4
 80087e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087ea:	4b03      	ldr	r3, [pc, #12]	@ (80087f8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	20000168 	.word	0x20000168

080087fc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	4907      	ldr	r1, [pc, #28]	@ (8008830 <USBD_HS_ProductStrDescriptor+0x34>)
 8008812:	4808      	ldr	r0, [pc, #32]	@ (8008834 <USBD_HS_ProductStrDescriptor+0x38>)
 8008814:	f7ff fee4 	bl	80085e0 <USBD_GetString>
 8008818:	e004      	b.n	8008824 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	4904      	ldr	r1, [pc, #16]	@ (8008830 <USBD_HS_ProductStrDescriptor+0x34>)
 800881e:	4805      	ldr	r0, [pc, #20]	@ (8008834 <USBD_HS_ProductStrDescriptor+0x38>)
 8008820:	f7ff fede 	bl	80085e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008824:	4b02      	ldr	r3, [pc, #8]	@ (8008830 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000750 	.word	0x20000750
 8008834:	0800b918 	.word	0x0800b918

08008838 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	4904      	ldr	r1, [pc, #16]	@ (8008858 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008848:	4804      	ldr	r0, [pc, #16]	@ (800885c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800884a:	f7ff fec9 	bl	80085e0 <USBD_GetString>
  return USBD_StrDesc;
 800884e:	4b02      	ldr	r3, [pc, #8]	@ (8008858 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000750 	.word	0x20000750
 800885c:	0800b930 	.word	0x0800b930

08008860 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	221a      	movs	r2, #26
 8008870:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008872:	f000 f843 	bl	80088fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008876:	4b02      	ldr	r3, [pc, #8]	@ (8008880 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	2000016c 	.word	0x2000016c

08008884 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d105      	bne.n	80088a2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	4907      	ldr	r1, [pc, #28]	@ (80088b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800889a:	4808      	ldr	r0, [pc, #32]	@ (80088bc <USBD_HS_ConfigStrDescriptor+0x38>)
 800889c:	f7ff fea0 	bl	80085e0 <USBD_GetString>
 80088a0:	e004      	b.n	80088ac <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	4904      	ldr	r1, [pc, #16]	@ (80088b8 <USBD_HS_ConfigStrDescriptor+0x34>)
 80088a6:	4805      	ldr	r0, [pc, #20]	@ (80088bc <USBD_HS_ConfigStrDescriptor+0x38>)
 80088a8:	f7ff fe9a 	bl	80085e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088ac:	4b02      	ldr	r3, [pc, #8]	@ (80088b8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000750 	.word	0x20000750
 80088bc:	0800b944 	.word	0x0800b944

080088c0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4907      	ldr	r1, [pc, #28]	@ (80088f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088d6:	4808      	ldr	r0, [pc, #32]	@ (80088f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088d8:	f7ff fe82 	bl	80085e0 <USBD_GetString>
 80088dc:	e004      	b.n	80088e8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4904      	ldr	r1, [pc, #16]	@ (80088f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088e2:	4805      	ldr	r0, [pc, #20]	@ (80088f8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088e4:	f7ff fe7c 	bl	80085e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e8:	4b02      	ldr	r3, [pc, #8]	@ (80088f4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000750 	.word	0x20000750
 80088f8:	0800b950 	.word	0x0800b950

080088fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4413      	add	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008910:	2208      	movs	r2, #8
 8008912:	4906      	ldr	r1, [pc, #24]	@ (800892c <Get_SerialNum+0x30>)
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f80d 	bl	8008934 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800891a:	2204      	movs	r2, #4
 800891c:	4904      	ldr	r1, [pc, #16]	@ (8008930 <Get_SerialNum+0x34>)
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f808 	bl	8008934 <IntToUnicode>
  }
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	2000016e 	.word	0x2000016e
 8008930:	2000017e 	.word	0x2000017e

08008934 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
 800894a:	e027      	b.n	800899c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	0f1b      	lsrs	r3, r3, #28
 8008950:	2b09      	cmp	r3, #9
 8008952:	d80b      	bhi.n	800896c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	0f1b      	lsrs	r3, r3, #28
 8008958:	b2da      	uxtb	r2, r3
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	4619      	mov	r1, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	440b      	add	r3, r1
 8008964:	3230      	adds	r2, #48	@ 0x30
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	e00a      	b.n	8008982 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	0f1b      	lsrs	r3, r3, #28
 8008970:	b2da      	uxtb	r2, r3
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4619      	mov	r1, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	440b      	add	r3, r1
 800897c:	3237      	adds	r2, #55	@ 0x37
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	3301      	adds	r3, #1
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4413      	add	r3, r2
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	3301      	adds	r3, #1
 800899a:	75fb      	strb	r3, [r7, #23]
 800899c:	7dfa      	ldrb	r2, [r7, #23]
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d3d3      	bcc.n	800894c <IntToUnicode+0x18>
  }
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	@ 0x28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	609a      	str	r2, [r3, #8]
 80089c8:	60da      	str	r2, [r3, #12]
 80089ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <HAL_PCD_MspInit+0x94>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d134      	bne.n	8008a40 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]
 80089da:	4b1c      	ldr	r3, [pc, #112]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	4a1b      	ldr	r2, [pc, #108]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80089e6:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80089f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80089f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f8:	2302      	movs	r3, #2
 80089fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a00:	2303      	movs	r3, #3
 8008a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008a04:	230c      	movs	r3, #12
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4810      	ldr	r0, [pc, #64]	@ (8008a50 <HAL_PCD_MspInit+0x9c>)
 8008a10:	f7f9 fd6a 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 8008a1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a24:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <HAL_PCD_MspInit+0x98>)
 8008a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	204d      	movs	r0, #77	@ 0x4d
 8008a36:	f7f9 fd20 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008a3a:	204d      	movs	r0, #77	@ 0x4d
 8008a3c:	f7f9 fd39 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008a40:	bf00      	nop
 8008a42:	3728      	adds	r7, #40	@ 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40040000 	.word	0x40040000
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020400 	.word	0x40020400

08008a54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f7fe fc55 	bl	800731a <USBD_LL_SetupStage>
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f7fe fc8f 	bl	80073c4 <USBD_LL_DataOutStage>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	3320      	adds	r3, #32
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f7fe fd28 	bl	800752a <USBD_LL_DataInStage>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe fe62 	bl	80077ba <USBD_LL_SOF>
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b06:	2301      	movs	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	79db      	ldrb	r3, [r3, #7]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
 8008b16:	e008      	b.n	8008b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	79db      	ldrb	r3, [r3, #7]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d102      	bne.n	8008b26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]
 8008b24:	e001      	b.n	8008b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b26:	f7f8 fb37 	bl	8001198 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b30:	7bfa      	ldrb	r2, [r7, #15]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fdfc 	bl	8007732 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fda4 	bl	800768e <USBD_LL_Reset>
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fdf7 	bl	8007752 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7adb      	ldrb	r3, [r3, #11]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b84:	4b04      	ldr	r3, [pc, #16]	@ (8008b98 <HAL_PCD_SuspendCallback+0x48>)
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	4a03      	ldr	r2, [pc, #12]	@ (8008b98 <HAL_PCD_SuspendCallback+0x48>)
 8008b8a:	f043 0306 	orr.w	r3, r3, #6
 8008b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed00 	.word	0xe000ed00

08008b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fded 	bl	800778a <USBD_LL_Resume>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fe45 	bl	800785e <USBD_LL_IsoOUTIncomplete>
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fe01 	bl	80077fa <USBD_LL_IsoINIncomplete>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fe57 	bl	80078c2 <USBD_LL_DevConnected>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fe54 	bl	80078d8 <USBD_LL_DevDisconnected>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d140      	bne.n	8008cca <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008c48:	4a22      	ldr	r2, [pc, #136]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a20      	ldr	r2, [pc, #128]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c58:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8008cd8 <USBD_LL_Init+0xa0>)
 8008c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c60:	2206      	movs	r2, #6
 8008c62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008c64:	4b1b      	ldr	r3, [pc, #108]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c66:	2202      	movs	r2, #2
 8008c68:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c70:	4b18      	ldr	r3, [pc, #96]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c72:	2202      	movs	r2, #2
 8008c74:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008c76:	4b17      	ldr	r3, [pc, #92]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008c7c:	4b15      	ldr	r3, [pc, #84]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008c82:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008c8e:	4b11      	ldr	r3, [pc, #68]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008c94:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008c9a:	480e      	ldr	r0, [pc, #56]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008c9c:	f7f9 fef5 	bl	8002a8a <HAL_PCD_Init>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008ca6:	f7f8 fa77 	bl	8001198 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008caa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cae:	4809      	ldr	r0, [pc, #36]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008cb0:	f7fb f907 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008cb4:	2280      	movs	r2, #128	@ 0x80
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4806      	ldr	r0, [pc, #24]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008cba:	f7fb f8bb 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008cbe:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4803      	ldr	r0, [pc, #12]	@ (8008cd4 <USBD_LL_Init+0x9c>)
 8008cc6:	f7fb f8b5 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000950 	.word	0x20000950
 8008cd8:	40040000 	.word	0x40040000

08008cdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f9 ffd8 	bl	8002ca8 <HAL_PCD_Start>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f930 	bl	8008f64 <USBD_Get_USB_Status>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	70fb      	strb	r3, [r7, #3]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70bb      	strb	r3, [r7, #2]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d3a:	78bb      	ldrb	r3, [r7, #2]
 8008d3c:	883a      	ldrh	r2, [r7, #0]
 8008d3e:	78f9      	ldrb	r1, [r7, #3]
 8008d40:	f7fa fcac 	bl	800369c <HAL_PCD_EP_Open>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f90a 	bl	8008f64 <USBD_Get_USB_Status>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fa fcf5 	bl	800376c <HAL_PCD_EP_Close>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f8eb 	bl	8008f64 <USBD_Get_USB_Status>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fa fd95 	bl	80038ea <HAL_PCD_EP_SetStall>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f8cc 	bl	8008f64 <USBD_Get_USB_Status>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa fdd9 	bl	80039b0 <HAL_PCD_EP_ClrStall>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f8ad 	bl	8008f64 <USBD_Get_USB_Status>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da0b      	bge.n	8008e4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	3316      	adds	r3, #22
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	e00b      	b.n	8008e64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	4613      	mov	r3, r2
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008e62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fa fbe0 	bl	8003654 <HAL_PCD_SetAddress>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f862 	bl	8008f64 <USBD_Get_USB_Status>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ecc:	7af9      	ldrb	r1, [r7, #11]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	f7fa fcd0 	bl	8003876 <HAL_PCD_EP_Transmit>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f841 	bl	8008f64 <USBD_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ee6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	460b      	mov	r3, r1
 8008efe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f0e:	7af9      	ldrb	r1, [r7, #11]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	f7fa fc74 	bl	8003800 <HAL_PCD_EP_Receive>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f820 	bl	8008f64 <USBD_Get_USB_Status>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f28:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f3c:	4b03      	ldr	r3, [pc, #12]	@ (8008f4c <USBD_static_malloc+0x18>)
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000e34 	.word	0x20000e34

08008f50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]

}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d817      	bhi.n	8008fa8 <USBD_Get_USB_Status+0x44>
 8008f78:	a201      	add	r2, pc, #4	@ (adr r2, 8008f80 <USBD_Get_USB_Status+0x1c>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008f91 	.word	0x08008f91
 8008f84:	08008f97 	.word	0x08008f97
 8008f88:	08008f9d 	.word	0x08008f9d
 8008f8c:	08008fa3 	.word	0x08008fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	e00b      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f96:	2303      	movs	r3, #3
 8008f98:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9a:	e008      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa0:	e005      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa6:	e002      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	73fb      	strb	r3, [r7, #15]
    break;
 8008fac:	bf00      	nop
  }
  return usb_status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <__cvt>:
 8008fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	ec57 6b10 	vmov	r6, r7, d0
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	463b      	mov	r3, r7
 8008fcc:	bfbb      	ittet	lt
 8008fce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fd2:	461f      	movlt	r7, r3
 8008fd4:	2300      	movge	r3, #0
 8008fd6:	232d      	movlt	r3, #45	@ 0x2d
 8008fd8:	700b      	strb	r3, [r1, #0]
 8008fda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fdc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fe0:	4691      	mov	r9, r2
 8008fe2:	f023 0820 	bic.w	r8, r3, #32
 8008fe6:	bfbc      	itt	lt
 8008fe8:	4632      	movlt	r2, r6
 8008fea:	4616      	movlt	r6, r2
 8008fec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ff0:	d005      	beq.n	8008ffe <__cvt+0x42>
 8008ff2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ff6:	d100      	bne.n	8008ffa <__cvt+0x3e>
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	e000      	b.n	8009000 <__cvt+0x44>
 8008ffe:	2103      	movs	r1, #3
 8009000:	ab03      	add	r3, sp, #12
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	ab02      	add	r3, sp, #8
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	ec47 6b10 	vmov	d0, r6, r7
 800900c:	4653      	mov	r3, sl
 800900e:	4622      	mov	r2, r4
 8009010:	f000 fe4e 	bl	8009cb0 <_dtoa_r>
 8009014:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009018:	4605      	mov	r5, r0
 800901a:	d119      	bne.n	8009050 <__cvt+0x94>
 800901c:	f019 0f01 	tst.w	r9, #1
 8009020:	d00e      	beq.n	8009040 <__cvt+0x84>
 8009022:	eb00 0904 	add.w	r9, r0, r4
 8009026:	2200      	movs	r2, #0
 8009028:	2300      	movs	r3, #0
 800902a:	4630      	mov	r0, r6
 800902c:	4639      	mov	r1, r7
 800902e:	f7f7 fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009032:	b108      	cbz	r0, 8009038 <__cvt+0x7c>
 8009034:	f8cd 900c 	str.w	r9, [sp, #12]
 8009038:	2230      	movs	r2, #48	@ 0x30
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	454b      	cmp	r3, r9
 800903e:	d31e      	bcc.n	800907e <__cvt+0xc2>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009044:	1b5b      	subs	r3, r3, r5
 8009046:	4628      	mov	r0, r5
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	b004      	add	sp, #16
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009054:	eb00 0904 	add.w	r9, r0, r4
 8009058:	d1e5      	bne.n	8009026 <__cvt+0x6a>
 800905a:	7803      	ldrb	r3, [r0, #0]
 800905c:	2b30      	cmp	r3, #48	@ 0x30
 800905e:	d10a      	bne.n	8009076 <__cvt+0xba>
 8009060:	2200      	movs	r2, #0
 8009062:	2300      	movs	r3, #0
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fd3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800906c:	b918      	cbnz	r0, 8009076 <__cvt+0xba>
 800906e:	f1c4 0401 	rsb	r4, r4, #1
 8009072:	f8ca 4000 	str.w	r4, [sl]
 8009076:	f8da 3000 	ldr.w	r3, [sl]
 800907a:	4499      	add	r9, r3
 800907c:	e7d3      	b.n	8009026 <__cvt+0x6a>
 800907e:	1c59      	adds	r1, r3, #1
 8009080:	9103      	str	r1, [sp, #12]
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e7d9      	b.n	800903a <__cvt+0x7e>

08009086 <__exponent>:
 8009086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009088:	2900      	cmp	r1, #0
 800908a:	bfba      	itte	lt
 800908c:	4249      	neglt	r1, r1
 800908e:	232d      	movlt	r3, #45	@ 0x2d
 8009090:	232b      	movge	r3, #43	@ 0x2b
 8009092:	2909      	cmp	r1, #9
 8009094:	7002      	strb	r2, [r0, #0]
 8009096:	7043      	strb	r3, [r0, #1]
 8009098:	dd29      	ble.n	80090ee <__exponent+0x68>
 800909a:	f10d 0307 	add.w	r3, sp, #7
 800909e:	461d      	mov	r5, r3
 80090a0:	270a      	movs	r7, #10
 80090a2:	461a      	mov	r2, r3
 80090a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80090a8:	fb07 1416 	mls	r4, r7, r6, r1
 80090ac:	3430      	adds	r4, #48	@ 0x30
 80090ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090b2:	460c      	mov	r4, r1
 80090b4:	2c63      	cmp	r4, #99	@ 0x63
 80090b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ba:	4631      	mov	r1, r6
 80090bc:	dcf1      	bgt.n	80090a2 <__exponent+0x1c>
 80090be:	3130      	adds	r1, #48	@ 0x30
 80090c0:	1e94      	subs	r4, r2, #2
 80090c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090c6:	1c41      	adds	r1, r0, #1
 80090c8:	4623      	mov	r3, r4
 80090ca:	42ab      	cmp	r3, r5
 80090cc:	d30a      	bcc.n	80090e4 <__exponent+0x5e>
 80090ce:	f10d 0309 	add.w	r3, sp, #9
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	42ac      	cmp	r4, r5
 80090d6:	bf88      	it	hi
 80090d8:	2300      	movhi	r3, #0
 80090da:	3302      	adds	r3, #2
 80090dc:	4403      	add	r3, r0
 80090de:	1a18      	subs	r0, r3, r0
 80090e0:	b003      	add	sp, #12
 80090e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090ec:	e7ed      	b.n	80090ca <__exponent+0x44>
 80090ee:	2330      	movs	r3, #48	@ 0x30
 80090f0:	3130      	adds	r1, #48	@ 0x30
 80090f2:	7083      	strb	r3, [r0, #2]
 80090f4:	70c1      	strb	r1, [r0, #3]
 80090f6:	1d03      	adds	r3, r0, #4
 80090f8:	e7f1      	b.n	80090de <__exponent+0x58>
	...

080090fc <_printf_float>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	b08d      	sub	sp, #52	@ 0x34
 8009102:	460c      	mov	r4, r1
 8009104:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009108:	4616      	mov	r6, r2
 800910a:	461f      	mov	r7, r3
 800910c:	4605      	mov	r5, r0
 800910e:	f000 fccd 	bl	8009aac <_localeconv_r>
 8009112:	6803      	ldr	r3, [r0, #0]
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	4618      	mov	r0, r3
 8009118:	f7f7 f8ba 	bl	8000290 <strlen>
 800911c:	2300      	movs	r3, #0
 800911e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009120:	f8d8 3000 	ldr.w	r3, [r8]
 8009124:	9005      	str	r0, [sp, #20]
 8009126:	3307      	adds	r3, #7
 8009128:	f023 0307 	bic.w	r3, r3, #7
 800912c:	f103 0208 	add.w	r2, r3, #8
 8009130:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009134:	f8d4 b000 	ldr.w	fp, [r4]
 8009138:	f8c8 2000 	str.w	r2, [r8]
 800913c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009140:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009144:	9307      	str	r3, [sp, #28]
 8009146:	f8cd 8018 	str.w	r8, [sp, #24]
 800914a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800914e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009152:	4b9c      	ldr	r3, [pc, #624]	@ (80093c4 <_printf_float+0x2c8>)
 8009154:	f04f 32ff 	mov.w	r2, #4294967295
 8009158:	f7f7 fcf8 	bl	8000b4c <__aeabi_dcmpun>
 800915c:	bb70      	cbnz	r0, 80091bc <_printf_float+0xc0>
 800915e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009162:	4b98      	ldr	r3, [pc, #608]	@ (80093c4 <_printf_float+0x2c8>)
 8009164:	f04f 32ff 	mov.w	r2, #4294967295
 8009168:	f7f7 fcd2 	bl	8000b10 <__aeabi_dcmple>
 800916c:	bb30      	cbnz	r0, 80091bc <_printf_float+0xc0>
 800916e:	2200      	movs	r2, #0
 8009170:	2300      	movs	r3, #0
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 fcc1 	bl	8000afc <__aeabi_dcmplt>
 800917a:	b110      	cbz	r0, 8009182 <_printf_float+0x86>
 800917c:	232d      	movs	r3, #45	@ 0x2d
 800917e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009182:	4a91      	ldr	r2, [pc, #580]	@ (80093c8 <_printf_float+0x2cc>)
 8009184:	4b91      	ldr	r3, [pc, #580]	@ (80093cc <_printf_float+0x2d0>)
 8009186:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800918a:	bf94      	ite	ls
 800918c:	4690      	movls	r8, r2
 800918e:	4698      	movhi	r8, r3
 8009190:	2303      	movs	r3, #3
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	f02b 0304 	bic.w	r3, fp, #4
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	f04f 0900 	mov.w	r9, #0
 800919e:	9700      	str	r7, [sp, #0]
 80091a0:	4633      	mov	r3, r6
 80091a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091a4:	4621      	mov	r1, r4
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 f9d2 	bl	8009550 <_printf_common>
 80091ac:	3001      	adds	r0, #1
 80091ae:	f040 808d 	bne.w	80092cc <_printf_float+0x1d0>
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295
 80091b6:	b00d      	add	sp, #52	@ 0x34
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	f7f7 fcc2 	bl	8000b4c <__aeabi_dcmpun>
 80091c8:	b140      	cbz	r0, 80091dc <_printf_float+0xe0>
 80091ca:	464b      	mov	r3, r9
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfbc      	itt	lt
 80091d0:	232d      	movlt	r3, #45	@ 0x2d
 80091d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091d6:	4a7e      	ldr	r2, [pc, #504]	@ (80093d0 <_printf_float+0x2d4>)
 80091d8:	4b7e      	ldr	r3, [pc, #504]	@ (80093d4 <_printf_float+0x2d8>)
 80091da:	e7d4      	b.n	8009186 <_printf_float+0x8a>
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091e2:	9206      	str	r2, [sp, #24]
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	d13b      	bne.n	8009260 <_printf_float+0x164>
 80091e8:	2306      	movs	r3, #6
 80091ea:	6063      	str	r3, [r4, #4]
 80091ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091f0:	2300      	movs	r3, #0
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	9303      	str	r3, [sp, #12]
 80091f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091fc:	ab09      	add	r3, sp, #36	@ 0x24
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	6861      	ldr	r1, [r4, #4]
 8009202:	ec49 8b10 	vmov	d0, r8, r9
 8009206:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800920a:	4628      	mov	r0, r5
 800920c:	f7ff fed6 	bl	8008fbc <__cvt>
 8009210:	9b06      	ldr	r3, [sp, #24]
 8009212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009214:	2b47      	cmp	r3, #71	@ 0x47
 8009216:	4680      	mov	r8, r0
 8009218:	d129      	bne.n	800926e <_printf_float+0x172>
 800921a:	1cc8      	adds	r0, r1, #3
 800921c:	db02      	blt.n	8009224 <_printf_float+0x128>
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	4299      	cmp	r1, r3
 8009222:	dd41      	ble.n	80092a8 <_printf_float+0x1ac>
 8009224:	f1aa 0a02 	sub.w	sl, sl, #2
 8009228:	fa5f fa8a 	uxtb.w	sl, sl
 800922c:	3901      	subs	r1, #1
 800922e:	4652      	mov	r2, sl
 8009230:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009234:	9109      	str	r1, [sp, #36]	@ 0x24
 8009236:	f7ff ff26 	bl	8009086 <__exponent>
 800923a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800923c:	1813      	adds	r3, r2, r0
 800923e:	2a01      	cmp	r2, #1
 8009240:	4681      	mov	r9, r0
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	dc02      	bgt.n	800924c <_printf_float+0x150>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	07d2      	lsls	r2, r2, #31
 800924a:	d501      	bpl.n	8009250 <_printf_float+0x154>
 800924c:	3301      	adds	r3, #1
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0a2      	beq.n	800919e <_printf_float+0xa2>
 8009258:	232d      	movs	r3, #45	@ 0x2d
 800925a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800925e:	e79e      	b.n	800919e <_printf_float+0xa2>
 8009260:	9a06      	ldr	r2, [sp, #24]
 8009262:	2a47      	cmp	r2, #71	@ 0x47
 8009264:	d1c2      	bne.n	80091ec <_printf_float+0xf0>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1c0      	bne.n	80091ec <_printf_float+0xf0>
 800926a:	2301      	movs	r3, #1
 800926c:	e7bd      	b.n	80091ea <_printf_float+0xee>
 800926e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009272:	d9db      	bls.n	800922c <_printf_float+0x130>
 8009274:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009278:	d118      	bne.n	80092ac <_printf_float+0x1b0>
 800927a:	2900      	cmp	r1, #0
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	dd0b      	ble.n	8009298 <_printf_float+0x19c>
 8009280:	6121      	str	r1, [r4, #16]
 8009282:	b913      	cbnz	r3, 800928a <_printf_float+0x18e>
 8009284:	6822      	ldr	r2, [r4, #0]
 8009286:	07d0      	lsls	r0, r2, #31
 8009288:	d502      	bpl.n	8009290 <_printf_float+0x194>
 800928a:	3301      	adds	r3, #1
 800928c:	440b      	add	r3, r1
 800928e:	6123      	str	r3, [r4, #16]
 8009290:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	e7db      	b.n	8009250 <_printf_float+0x154>
 8009298:	b913      	cbnz	r3, 80092a0 <_printf_float+0x1a4>
 800929a:	6822      	ldr	r2, [r4, #0]
 800929c:	07d2      	lsls	r2, r2, #31
 800929e:	d501      	bpl.n	80092a4 <_printf_float+0x1a8>
 80092a0:	3302      	adds	r3, #2
 80092a2:	e7f4      	b.n	800928e <_printf_float+0x192>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e7f2      	b.n	800928e <_printf_float+0x192>
 80092a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80092ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ae:	4299      	cmp	r1, r3
 80092b0:	db05      	blt.n	80092be <_printf_float+0x1c2>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	6121      	str	r1, [r4, #16]
 80092b6:	07d8      	lsls	r0, r3, #31
 80092b8:	d5ea      	bpl.n	8009290 <_printf_float+0x194>
 80092ba:	1c4b      	adds	r3, r1, #1
 80092bc:	e7e7      	b.n	800928e <_printf_float+0x192>
 80092be:	2900      	cmp	r1, #0
 80092c0:	bfd4      	ite	le
 80092c2:	f1c1 0202 	rsble	r2, r1, #2
 80092c6:	2201      	movgt	r2, #1
 80092c8:	4413      	add	r3, r2
 80092ca:	e7e0      	b.n	800928e <_printf_float+0x192>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	055a      	lsls	r2, r3, #21
 80092d0:	d407      	bmi.n	80092e2 <_printf_float+0x1e6>
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	4642      	mov	r2, r8
 80092d6:	4631      	mov	r1, r6
 80092d8:	4628      	mov	r0, r5
 80092da:	47b8      	blx	r7
 80092dc:	3001      	adds	r0, #1
 80092de:	d12b      	bne.n	8009338 <_printf_float+0x23c>
 80092e0:	e767      	b.n	80091b2 <_printf_float+0xb6>
 80092e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092e6:	f240 80dd 	bls.w	80094a4 <_printf_float+0x3a8>
 80092ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092ee:	2200      	movs	r2, #0
 80092f0:	2300      	movs	r3, #0
 80092f2:	f7f7 fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d033      	beq.n	8009362 <_printf_float+0x266>
 80092fa:	4a37      	ldr	r2, [pc, #220]	@ (80093d8 <_printf_float+0x2dc>)
 80092fc:	2301      	movs	r3, #1
 80092fe:	4631      	mov	r1, r6
 8009300:	4628      	mov	r0, r5
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	f43f af54 	beq.w	80091b2 <_printf_float+0xb6>
 800930a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800930e:	4543      	cmp	r3, r8
 8009310:	db02      	blt.n	8009318 <_printf_float+0x21c>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	07d8      	lsls	r0, r3, #31
 8009316:	d50f      	bpl.n	8009338 <_printf_float+0x23c>
 8009318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f af45 	beq.w	80091b2 <_printf_float+0xb6>
 8009328:	f04f 0900 	mov.w	r9, #0
 800932c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009330:	f104 0a1a 	add.w	sl, r4, #26
 8009334:	45c8      	cmp	r8, r9
 8009336:	dc09      	bgt.n	800934c <_printf_float+0x250>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	079b      	lsls	r3, r3, #30
 800933c:	f100 8103 	bmi.w	8009546 <_printf_float+0x44a>
 8009340:	68e0      	ldr	r0, [r4, #12]
 8009342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009344:	4298      	cmp	r0, r3
 8009346:	bfb8      	it	lt
 8009348:	4618      	movlt	r0, r3
 800934a:	e734      	b.n	80091b6 <_printf_float+0xba>
 800934c:	2301      	movs	r3, #1
 800934e:	4652      	mov	r2, sl
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	f43f af2b 	beq.w	80091b2 <_printf_float+0xb6>
 800935c:	f109 0901 	add.w	r9, r9, #1
 8009360:	e7e8      	b.n	8009334 <_printf_float+0x238>
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc39      	bgt.n	80093dc <_printf_float+0x2e0>
 8009368:	4a1b      	ldr	r2, [pc, #108]	@ (80093d8 <_printf_float+0x2dc>)
 800936a:	2301      	movs	r3, #1
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af1d 	beq.w	80091b2 <_printf_float+0xb6>
 8009378:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800937c:	ea59 0303 	orrs.w	r3, r9, r3
 8009380:	d102      	bne.n	8009388 <_printf_float+0x28c>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	07d9      	lsls	r1, r3, #31
 8009386:	d5d7      	bpl.n	8009338 <_printf_float+0x23c>
 8009388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938c:	4631      	mov	r1, r6
 800938e:	4628      	mov	r0, r5
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f af0d 	beq.w	80091b2 <_printf_float+0xb6>
 8009398:	f04f 0a00 	mov.w	sl, #0
 800939c:	f104 0b1a 	add.w	fp, r4, #26
 80093a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a2:	425b      	negs	r3, r3
 80093a4:	4553      	cmp	r3, sl
 80093a6:	dc01      	bgt.n	80093ac <_printf_float+0x2b0>
 80093a8:	464b      	mov	r3, r9
 80093aa:	e793      	b.n	80092d4 <_printf_float+0x1d8>
 80093ac:	2301      	movs	r3, #1
 80093ae:	465a      	mov	r2, fp
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f aefb 	beq.w	80091b2 <_printf_float+0xb6>
 80093bc:	f10a 0a01 	add.w	sl, sl, #1
 80093c0:	e7ee      	b.n	80093a0 <_printf_float+0x2a4>
 80093c2:	bf00      	nop
 80093c4:	7fefffff 	.word	0x7fefffff
 80093c8:	0800b978 	.word	0x0800b978
 80093cc:	0800b97c 	.word	0x0800b97c
 80093d0:	0800b980 	.word	0x0800b980
 80093d4:	0800b984 	.word	0x0800b984
 80093d8:	0800b988 	.word	0x0800b988
 80093dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093e2:	4553      	cmp	r3, sl
 80093e4:	bfa8      	it	ge
 80093e6:	4653      	movge	r3, sl
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	4699      	mov	r9, r3
 80093ec:	dc36      	bgt.n	800945c <_printf_float+0x360>
 80093ee:	f04f 0b00 	mov.w	fp, #0
 80093f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093f6:	f104 021a 	add.w	r2, r4, #26
 80093fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093fc:	9306      	str	r3, [sp, #24]
 80093fe:	eba3 0309 	sub.w	r3, r3, r9
 8009402:	455b      	cmp	r3, fp
 8009404:	dc31      	bgt.n	800946a <_printf_float+0x36e>
 8009406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009408:	459a      	cmp	sl, r3
 800940a:	dc3a      	bgt.n	8009482 <_printf_float+0x386>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	07da      	lsls	r2, r3, #31
 8009410:	d437      	bmi.n	8009482 <_printf_float+0x386>
 8009412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009414:	ebaa 0903 	sub.w	r9, sl, r3
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	ebaa 0303 	sub.w	r3, sl, r3
 800941e:	4599      	cmp	r9, r3
 8009420:	bfa8      	it	ge
 8009422:	4699      	movge	r9, r3
 8009424:	f1b9 0f00 	cmp.w	r9, #0
 8009428:	dc33      	bgt.n	8009492 <_printf_float+0x396>
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009432:	f104 0b1a 	add.w	fp, r4, #26
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	ebaa 0303 	sub.w	r3, sl, r3
 800943c:	eba3 0309 	sub.w	r3, r3, r9
 8009440:	4543      	cmp	r3, r8
 8009442:	f77f af79 	ble.w	8009338 <_printf_float+0x23c>
 8009446:	2301      	movs	r3, #1
 8009448:	465a      	mov	r2, fp
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f aeae 	beq.w	80091b2 <_printf_float+0xb6>
 8009456:	f108 0801 	add.w	r8, r8, #1
 800945a:	e7ec      	b.n	8009436 <_printf_float+0x33a>
 800945c:	4642      	mov	r2, r8
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	d1c2      	bne.n	80093ee <_printf_float+0x2f2>
 8009468:	e6a3      	b.n	80091b2 <_printf_float+0xb6>
 800946a:	2301      	movs	r3, #1
 800946c:	4631      	mov	r1, r6
 800946e:	4628      	mov	r0, r5
 8009470:	9206      	str	r2, [sp, #24]
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	f43f ae9c 	beq.w	80091b2 <_printf_float+0xb6>
 800947a:	9a06      	ldr	r2, [sp, #24]
 800947c:	f10b 0b01 	add.w	fp, fp, #1
 8009480:	e7bb      	b.n	80093fa <_printf_float+0x2fe>
 8009482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	d1c0      	bne.n	8009412 <_printf_float+0x316>
 8009490:	e68f      	b.n	80091b2 <_printf_float+0xb6>
 8009492:	9a06      	ldr	r2, [sp, #24]
 8009494:	464b      	mov	r3, r9
 8009496:	4442      	add	r2, r8
 8009498:	4631      	mov	r1, r6
 800949a:	4628      	mov	r0, r5
 800949c:	47b8      	blx	r7
 800949e:	3001      	adds	r0, #1
 80094a0:	d1c3      	bne.n	800942a <_printf_float+0x32e>
 80094a2:	e686      	b.n	80091b2 <_printf_float+0xb6>
 80094a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094a8:	f1ba 0f01 	cmp.w	sl, #1
 80094ac:	dc01      	bgt.n	80094b2 <_printf_float+0x3b6>
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d536      	bpl.n	8009520 <_printf_float+0x424>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4642      	mov	r2, r8
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	f43f ae78 	beq.w	80091b2 <_printf_float+0xb6>
 80094c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f ae70 	beq.w	80091b2 <_printf_float+0xb6>
 80094d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094d6:	2200      	movs	r2, #0
 80094d8:	2300      	movs	r3, #0
 80094da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094de:	f7f7 fb03 	bl	8000ae8 <__aeabi_dcmpeq>
 80094e2:	b9c0      	cbnz	r0, 8009516 <_printf_float+0x41a>
 80094e4:	4653      	mov	r3, sl
 80094e6:	f108 0201 	add.w	r2, r8, #1
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	d10c      	bne.n	800950e <_printf_float+0x412>
 80094f4:	e65d      	b.n	80091b2 <_printf_float+0xb6>
 80094f6:	2301      	movs	r3, #1
 80094f8:	465a      	mov	r2, fp
 80094fa:	4631      	mov	r1, r6
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	f43f ae56 	beq.w	80091b2 <_printf_float+0xb6>
 8009506:	f108 0801 	add.w	r8, r8, #1
 800950a:	45d0      	cmp	r8, sl
 800950c:	dbf3      	blt.n	80094f6 <_printf_float+0x3fa>
 800950e:	464b      	mov	r3, r9
 8009510:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009514:	e6df      	b.n	80092d6 <_printf_float+0x1da>
 8009516:	f04f 0800 	mov.w	r8, #0
 800951a:	f104 0b1a 	add.w	fp, r4, #26
 800951e:	e7f4      	b.n	800950a <_printf_float+0x40e>
 8009520:	2301      	movs	r3, #1
 8009522:	4642      	mov	r2, r8
 8009524:	e7e1      	b.n	80094ea <_printf_float+0x3ee>
 8009526:	2301      	movs	r3, #1
 8009528:	464a      	mov	r2, r9
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	f43f ae3e 	beq.w	80091b2 <_printf_float+0xb6>
 8009536:	f108 0801 	add.w	r8, r8, #1
 800953a:	68e3      	ldr	r3, [r4, #12]
 800953c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800953e:	1a5b      	subs	r3, r3, r1
 8009540:	4543      	cmp	r3, r8
 8009542:	dcf0      	bgt.n	8009526 <_printf_float+0x42a>
 8009544:	e6fc      	b.n	8009340 <_printf_float+0x244>
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	f104 0919 	add.w	r9, r4, #25
 800954e:	e7f4      	b.n	800953a <_printf_float+0x43e>

08009550 <_printf_common>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	4616      	mov	r6, r2
 8009556:	4698      	mov	r8, r3
 8009558:	688a      	ldr	r2, [r1, #8]
 800955a:	690b      	ldr	r3, [r1, #16]
 800955c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009560:	4293      	cmp	r3, r2
 8009562:	bfb8      	it	lt
 8009564:	4613      	movlt	r3, r2
 8009566:	6033      	str	r3, [r6, #0]
 8009568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800956c:	4607      	mov	r7, r0
 800956e:	460c      	mov	r4, r1
 8009570:	b10a      	cbz	r2, 8009576 <_printf_common+0x26>
 8009572:	3301      	adds	r3, #1
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	0699      	lsls	r1, r3, #26
 800957a:	bf42      	ittt	mi
 800957c:	6833      	ldrmi	r3, [r6, #0]
 800957e:	3302      	addmi	r3, #2
 8009580:	6033      	strmi	r3, [r6, #0]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	f015 0506 	ands.w	r5, r5, #6
 8009588:	d106      	bne.n	8009598 <_printf_common+0x48>
 800958a:	f104 0a19 	add.w	sl, r4, #25
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	6832      	ldr	r2, [r6, #0]
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	42ab      	cmp	r3, r5
 8009596:	dc26      	bgt.n	80095e6 <_printf_common+0x96>
 8009598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	3b00      	subs	r3, #0
 80095a0:	bf18      	it	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	0692      	lsls	r2, r2, #26
 80095a6:	d42b      	bmi.n	8009600 <_printf_common+0xb0>
 80095a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095ac:	4641      	mov	r1, r8
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c8      	blx	r9
 80095b2:	3001      	adds	r0, #1
 80095b4:	d01e      	beq.n	80095f4 <_printf_common+0xa4>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	6922      	ldr	r2, [r4, #16]
 80095ba:	f003 0306 	and.w	r3, r3, #6
 80095be:	2b04      	cmp	r3, #4
 80095c0:	bf02      	ittt	eq
 80095c2:	68e5      	ldreq	r5, [r4, #12]
 80095c4:	6833      	ldreq	r3, [r6, #0]
 80095c6:	1aed      	subeq	r5, r5, r3
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	bf0c      	ite	eq
 80095cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d0:	2500      	movne	r5, #0
 80095d2:	4293      	cmp	r3, r2
 80095d4:	bfc4      	itt	gt
 80095d6:	1a9b      	subgt	r3, r3, r2
 80095d8:	18ed      	addgt	r5, r5, r3
 80095da:	2600      	movs	r6, #0
 80095dc:	341a      	adds	r4, #26
 80095de:	42b5      	cmp	r5, r6
 80095e0:	d11a      	bne.n	8009618 <_printf_common+0xc8>
 80095e2:	2000      	movs	r0, #0
 80095e4:	e008      	b.n	80095f8 <_printf_common+0xa8>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4652      	mov	r2, sl
 80095ea:	4641      	mov	r1, r8
 80095ec:	4638      	mov	r0, r7
 80095ee:	47c8      	blx	r9
 80095f0:	3001      	adds	r0, #1
 80095f2:	d103      	bne.n	80095fc <_printf_common+0xac>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fc:	3501      	adds	r5, #1
 80095fe:	e7c6      	b.n	800958e <_printf_common+0x3e>
 8009600:	18e1      	adds	r1, r4, r3
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	2030      	movs	r0, #48	@ 0x30
 8009606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800960a:	4422      	add	r2, r4
 800960c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009614:	3302      	adds	r3, #2
 8009616:	e7c7      	b.n	80095a8 <_printf_common+0x58>
 8009618:	2301      	movs	r3, #1
 800961a:	4622      	mov	r2, r4
 800961c:	4641      	mov	r1, r8
 800961e:	4638      	mov	r0, r7
 8009620:	47c8      	blx	r9
 8009622:	3001      	adds	r0, #1
 8009624:	d0e6      	beq.n	80095f4 <_printf_common+0xa4>
 8009626:	3601      	adds	r6, #1
 8009628:	e7d9      	b.n	80095de <_printf_common+0x8e>
	...

0800962c <_printf_i>:
 800962c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	7e0f      	ldrb	r7, [r1, #24]
 8009632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009634:	2f78      	cmp	r7, #120	@ 0x78
 8009636:	4691      	mov	r9, r2
 8009638:	4680      	mov	r8, r0
 800963a:	460c      	mov	r4, r1
 800963c:	469a      	mov	sl, r3
 800963e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009642:	d807      	bhi.n	8009654 <_printf_i+0x28>
 8009644:	2f62      	cmp	r7, #98	@ 0x62
 8009646:	d80a      	bhi.n	800965e <_printf_i+0x32>
 8009648:	2f00      	cmp	r7, #0
 800964a:	f000 80d2 	beq.w	80097f2 <_printf_i+0x1c6>
 800964e:	2f58      	cmp	r7, #88	@ 0x58
 8009650:	f000 80b9 	beq.w	80097c6 <_printf_i+0x19a>
 8009654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800965c:	e03a      	b.n	80096d4 <_printf_i+0xa8>
 800965e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009662:	2b15      	cmp	r3, #21
 8009664:	d8f6      	bhi.n	8009654 <_printf_i+0x28>
 8009666:	a101      	add	r1, pc, #4	@ (adr r1, 800966c <_printf_i+0x40>)
 8009668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800966c:	080096c5 	.word	0x080096c5
 8009670:	080096d9 	.word	0x080096d9
 8009674:	08009655 	.word	0x08009655
 8009678:	08009655 	.word	0x08009655
 800967c:	08009655 	.word	0x08009655
 8009680:	08009655 	.word	0x08009655
 8009684:	080096d9 	.word	0x080096d9
 8009688:	08009655 	.word	0x08009655
 800968c:	08009655 	.word	0x08009655
 8009690:	08009655 	.word	0x08009655
 8009694:	08009655 	.word	0x08009655
 8009698:	080097d9 	.word	0x080097d9
 800969c:	08009703 	.word	0x08009703
 80096a0:	08009793 	.word	0x08009793
 80096a4:	08009655 	.word	0x08009655
 80096a8:	08009655 	.word	0x08009655
 80096ac:	080097fb 	.word	0x080097fb
 80096b0:	08009655 	.word	0x08009655
 80096b4:	08009703 	.word	0x08009703
 80096b8:	08009655 	.word	0x08009655
 80096bc:	08009655 	.word	0x08009655
 80096c0:	0800979b 	.word	0x0800979b
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	1d1a      	adds	r2, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6032      	str	r2, [r6, #0]
 80096cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096d4:	2301      	movs	r3, #1
 80096d6:	e09d      	b.n	8009814 <_printf_i+0x1e8>
 80096d8:	6833      	ldr	r3, [r6, #0]
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	6031      	str	r1, [r6, #0]
 80096e0:	0606      	lsls	r6, r0, #24
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0xbc>
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	e003      	b.n	80096f0 <_printf_i+0xc4>
 80096e8:	0645      	lsls	r5, r0, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0xb8>
 80096ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	da03      	bge.n	80096fc <_printf_i+0xd0>
 80096f4:	232d      	movs	r3, #45	@ 0x2d
 80096f6:	426d      	negs	r5, r5
 80096f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096fc:	4859      	ldr	r0, [pc, #356]	@ (8009864 <_printf_i+0x238>)
 80096fe:	230a      	movs	r3, #10
 8009700:	e011      	b.n	8009726 <_printf_i+0xfa>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	0608      	lsls	r0, r1, #24
 8009708:	f853 5b04 	ldr.w	r5, [r3], #4
 800970c:	d402      	bmi.n	8009714 <_printf_i+0xe8>
 800970e:	0649      	lsls	r1, r1, #25
 8009710:	bf48      	it	mi
 8009712:	b2ad      	uxthmi	r5, r5
 8009714:	2f6f      	cmp	r7, #111	@ 0x6f
 8009716:	4853      	ldr	r0, [pc, #332]	@ (8009864 <_printf_i+0x238>)
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	bf14      	ite	ne
 800971c:	230a      	movne	r3, #10
 800971e:	2308      	moveq	r3, #8
 8009720:	2100      	movs	r1, #0
 8009722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009726:	6866      	ldr	r6, [r4, #4]
 8009728:	60a6      	str	r6, [r4, #8]
 800972a:	2e00      	cmp	r6, #0
 800972c:	bfa2      	ittt	ge
 800972e:	6821      	ldrge	r1, [r4, #0]
 8009730:	f021 0104 	bicge.w	r1, r1, #4
 8009734:	6021      	strge	r1, [r4, #0]
 8009736:	b90d      	cbnz	r5, 800973c <_printf_i+0x110>
 8009738:	2e00      	cmp	r6, #0
 800973a:	d04b      	beq.n	80097d4 <_printf_i+0x1a8>
 800973c:	4616      	mov	r6, r2
 800973e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009742:	fb03 5711 	mls	r7, r3, r1, r5
 8009746:	5dc7      	ldrb	r7, [r0, r7]
 8009748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800974c:	462f      	mov	r7, r5
 800974e:	42bb      	cmp	r3, r7
 8009750:	460d      	mov	r5, r1
 8009752:	d9f4      	bls.n	800973e <_printf_i+0x112>
 8009754:	2b08      	cmp	r3, #8
 8009756:	d10b      	bne.n	8009770 <_printf_i+0x144>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	07df      	lsls	r7, r3, #31
 800975c:	d508      	bpl.n	8009770 <_printf_i+0x144>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6861      	ldr	r1, [r4, #4]
 8009762:	4299      	cmp	r1, r3
 8009764:	bfde      	ittt	le
 8009766:	2330      	movle	r3, #48	@ 0x30
 8009768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800976c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009770:	1b92      	subs	r2, r2, r6
 8009772:	6122      	str	r2, [r4, #16]
 8009774:	f8cd a000 	str.w	sl, [sp]
 8009778:	464b      	mov	r3, r9
 800977a:	aa03      	add	r2, sp, #12
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fee6 	bl	8009550 <_printf_common>
 8009784:	3001      	adds	r0, #1
 8009786:	d14a      	bne.n	800981e <_printf_i+0x1f2>
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	b004      	add	sp, #16
 800978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	f043 0320 	orr.w	r3, r3, #32
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	4833      	ldr	r0, [pc, #204]	@ (8009868 <_printf_i+0x23c>)
 800979c:	2778      	movs	r7, #120	@ 0x78
 800979e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6831      	ldr	r1, [r6, #0]
 80097a6:	061f      	lsls	r7, r3, #24
 80097a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80097ac:	d402      	bmi.n	80097b4 <_printf_i+0x188>
 80097ae:	065f      	lsls	r7, r3, #25
 80097b0:	bf48      	it	mi
 80097b2:	b2ad      	uxthmi	r5, r5
 80097b4:	6031      	str	r1, [r6, #0]
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	bf44      	itt	mi
 80097ba:	f043 0320 	orrmi.w	r3, r3, #32
 80097be:	6023      	strmi	r3, [r4, #0]
 80097c0:	b11d      	cbz	r5, 80097ca <_printf_i+0x19e>
 80097c2:	2310      	movs	r3, #16
 80097c4:	e7ac      	b.n	8009720 <_printf_i+0xf4>
 80097c6:	4827      	ldr	r0, [pc, #156]	@ (8009864 <_printf_i+0x238>)
 80097c8:	e7e9      	b.n	800979e <_printf_i+0x172>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f023 0320 	bic.w	r3, r3, #32
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	e7f6      	b.n	80097c2 <_printf_i+0x196>
 80097d4:	4616      	mov	r6, r2
 80097d6:	e7bd      	b.n	8009754 <_printf_i+0x128>
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	6825      	ldr	r5, [r4, #0]
 80097dc:	6961      	ldr	r1, [r4, #20]
 80097de:	1d18      	adds	r0, r3, #4
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	062e      	lsls	r6, r5, #24
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	d501      	bpl.n	80097ec <_printf_i+0x1c0>
 80097e8:	6019      	str	r1, [r3, #0]
 80097ea:	e002      	b.n	80097f2 <_printf_i+0x1c6>
 80097ec:	0668      	lsls	r0, r5, #25
 80097ee:	d5fb      	bpl.n	80097e8 <_printf_i+0x1bc>
 80097f0:	8019      	strh	r1, [r3, #0]
 80097f2:	2300      	movs	r3, #0
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	4616      	mov	r6, r2
 80097f8:	e7bc      	b.n	8009774 <_printf_i+0x148>
 80097fa:	6833      	ldr	r3, [r6, #0]
 80097fc:	1d1a      	adds	r2, r3, #4
 80097fe:	6032      	str	r2, [r6, #0]
 8009800:	681e      	ldr	r6, [r3, #0]
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	2100      	movs	r1, #0
 8009806:	4630      	mov	r0, r6
 8009808:	f7f6 fcf2 	bl	80001f0 <memchr>
 800980c:	b108      	cbz	r0, 8009812 <_printf_i+0x1e6>
 800980e:	1b80      	subs	r0, r0, r6
 8009810:	6060      	str	r0, [r4, #4]
 8009812:	6863      	ldr	r3, [r4, #4]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	2300      	movs	r3, #0
 8009818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800981c:	e7aa      	b.n	8009774 <_printf_i+0x148>
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	4632      	mov	r2, r6
 8009822:	4649      	mov	r1, r9
 8009824:	4640      	mov	r0, r8
 8009826:	47d0      	blx	sl
 8009828:	3001      	adds	r0, #1
 800982a:	d0ad      	beq.n	8009788 <_printf_i+0x15c>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	079b      	lsls	r3, r3, #30
 8009830:	d413      	bmi.n	800985a <_printf_i+0x22e>
 8009832:	68e0      	ldr	r0, [r4, #12]
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	4298      	cmp	r0, r3
 8009838:	bfb8      	it	lt
 800983a:	4618      	movlt	r0, r3
 800983c:	e7a6      	b.n	800978c <_printf_i+0x160>
 800983e:	2301      	movs	r3, #1
 8009840:	4632      	mov	r2, r6
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d09d      	beq.n	8009788 <_printf_i+0x15c>
 800984c:	3501      	adds	r5, #1
 800984e:	68e3      	ldr	r3, [r4, #12]
 8009850:	9903      	ldr	r1, [sp, #12]
 8009852:	1a5b      	subs	r3, r3, r1
 8009854:	42ab      	cmp	r3, r5
 8009856:	dcf2      	bgt.n	800983e <_printf_i+0x212>
 8009858:	e7eb      	b.n	8009832 <_printf_i+0x206>
 800985a:	2500      	movs	r5, #0
 800985c:	f104 0619 	add.w	r6, r4, #25
 8009860:	e7f5      	b.n	800984e <_printf_i+0x222>
 8009862:	bf00      	nop
 8009864:	0800b98a 	.word	0x0800b98a
 8009868:	0800b99b 	.word	0x0800b99b

0800986c <std>:
 800986c:	2300      	movs	r3, #0
 800986e:	b510      	push	{r4, lr}
 8009870:	4604      	mov	r4, r0
 8009872:	e9c0 3300 	strd	r3, r3, [r0]
 8009876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800987a:	6083      	str	r3, [r0, #8]
 800987c:	8181      	strh	r1, [r0, #12]
 800987e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009880:	81c2      	strh	r2, [r0, #14]
 8009882:	6183      	str	r3, [r0, #24]
 8009884:	4619      	mov	r1, r3
 8009886:	2208      	movs	r2, #8
 8009888:	305c      	adds	r0, #92	@ 0x5c
 800988a:	f000 f906 	bl	8009a9a <memset>
 800988e:	4b0d      	ldr	r3, [pc, #52]	@ (80098c4 <std+0x58>)
 8009890:	6263      	str	r3, [r4, #36]	@ 0x24
 8009892:	4b0d      	ldr	r3, [pc, #52]	@ (80098c8 <std+0x5c>)
 8009894:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009896:	4b0d      	ldr	r3, [pc, #52]	@ (80098cc <std+0x60>)
 8009898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800989a:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <std+0x64>)
 800989c:	6323      	str	r3, [r4, #48]	@ 0x30
 800989e:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <std+0x68>)
 80098a0:	6224      	str	r4, [r4, #32]
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d006      	beq.n	80098b4 <std+0x48>
 80098a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80098aa:	4294      	cmp	r4, r2
 80098ac:	d002      	beq.n	80098b4 <std+0x48>
 80098ae:	33d0      	adds	r3, #208	@ 0xd0
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d105      	bne.n	80098c0 <std+0x54>
 80098b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098bc:	f000 b96a 	b.w	8009b94 <__retarget_lock_init_recursive>
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	bf00      	nop
 80098c4:	08009a15 	.word	0x08009a15
 80098c8:	08009a37 	.word	0x08009a37
 80098cc:	08009a6f 	.word	0x08009a6f
 80098d0:	08009a93 	.word	0x08009a93
 80098d4:	20000e48 	.word	0x20000e48

080098d8 <stdio_exit_handler>:
 80098d8:	4a02      	ldr	r2, [pc, #8]	@ (80098e4 <stdio_exit_handler+0xc>)
 80098da:	4903      	ldr	r1, [pc, #12]	@ (80098e8 <stdio_exit_handler+0x10>)
 80098dc:	4803      	ldr	r0, [pc, #12]	@ (80098ec <stdio_exit_handler+0x14>)
 80098de:	f000 b869 	b.w	80099b4 <_fwalk_sglue>
 80098e2:	bf00      	nop
 80098e4:	20000188 	.word	0x20000188
 80098e8:	0800b4c9 	.word	0x0800b4c9
 80098ec:	20000198 	.word	0x20000198

080098f0 <cleanup_stdio>:
 80098f0:	6841      	ldr	r1, [r0, #4]
 80098f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <cleanup_stdio+0x34>)
 80098f4:	4299      	cmp	r1, r3
 80098f6:	b510      	push	{r4, lr}
 80098f8:	4604      	mov	r4, r0
 80098fa:	d001      	beq.n	8009900 <cleanup_stdio+0x10>
 80098fc:	f001 fde4 	bl	800b4c8 <_fflush_r>
 8009900:	68a1      	ldr	r1, [r4, #8]
 8009902:	4b09      	ldr	r3, [pc, #36]	@ (8009928 <cleanup_stdio+0x38>)
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <cleanup_stdio+0x1e>
 8009908:	4620      	mov	r0, r4
 800990a:	f001 fddd 	bl	800b4c8 <_fflush_r>
 800990e:	68e1      	ldr	r1, [r4, #12]
 8009910:	4b06      	ldr	r3, [pc, #24]	@ (800992c <cleanup_stdio+0x3c>)
 8009912:	4299      	cmp	r1, r3
 8009914:	d004      	beq.n	8009920 <cleanup_stdio+0x30>
 8009916:	4620      	mov	r0, r4
 8009918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991c:	f001 bdd4 	b.w	800b4c8 <_fflush_r>
 8009920:	bd10      	pop	{r4, pc}
 8009922:	bf00      	nop
 8009924:	20000e48 	.word	0x20000e48
 8009928:	20000eb0 	.word	0x20000eb0
 800992c:	20000f18 	.word	0x20000f18

08009930 <global_stdio_init.part.0>:
 8009930:	b510      	push	{r4, lr}
 8009932:	4b0b      	ldr	r3, [pc, #44]	@ (8009960 <global_stdio_init.part.0+0x30>)
 8009934:	4c0b      	ldr	r4, [pc, #44]	@ (8009964 <global_stdio_init.part.0+0x34>)
 8009936:	4a0c      	ldr	r2, [pc, #48]	@ (8009968 <global_stdio_init.part.0+0x38>)
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	4620      	mov	r0, r4
 800993c:	2200      	movs	r2, #0
 800993e:	2104      	movs	r1, #4
 8009940:	f7ff ff94 	bl	800986c <std>
 8009944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009948:	2201      	movs	r2, #1
 800994a:	2109      	movs	r1, #9
 800994c:	f7ff ff8e 	bl	800986c <std>
 8009950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009954:	2202      	movs	r2, #2
 8009956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800995a:	2112      	movs	r1, #18
 800995c:	f7ff bf86 	b.w	800986c <std>
 8009960:	20000f80 	.word	0x20000f80
 8009964:	20000e48 	.word	0x20000e48
 8009968:	080098d9 	.word	0x080098d9

0800996c <__sfp_lock_acquire>:
 800996c:	4801      	ldr	r0, [pc, #4]	@ (8009974 <__sfp_lock_acquire+0x8>)
 800996e:	f000 b912 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 8009972:	bf00      	nop
 8009974:	20000f89 	.word	0x20000f89

08009978 <__sfp_lock_release>:
 8009978:	4801      	ldr	r0, [pc, #4]	@ (8009980 <__sfp_lock_release+0x8>)
 800997a:	f000 b90d 	b.w	8009b98 <__retarget_lock_release_recursive>
 800997e:	bf00      	nop
 8009980:	20000f89 	.word	0x20000f89

08009984 <__sinit>:
 8009984:	b510      	push	{r4, lr}
 8009986:	4604      	mov	r4, r0
 8009988:	f7ff fff0 	bl	800996c <__sfp_lock_acquire>
 800998c:	6a23      	ldr	r3, [r4, #32]
 800998e:	b11b      	cbz	r3, 8009998 <__sinit+0x14>
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009994:	f7ff bff0 	b.w	8009978 <__sfp_lock_release>
 8009998:	4b04      	ldr	r3, [pc, #16]	@ (80099ac <__sinit+0x28>)
 800999a:	6223      	str	r3, [r4, #32]
 800999c:	4b04      	ldr	r3, [pc, #16]	@ (80099b0 <__sinit+0x2c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f5      	bne.n	8009990 <__sinit+0xc>
 80099a4:	f7ff ffc4 	bl	8009930 <global_stdio_init.part.0>
 80099a8:	e7f2      	b.n	8009990 <__sinit+0xc>
 80099aa:	bf00      	nop
 80099ac:	080098f1 	.word	0x080098f1
 80099b0:	20000f80 	.word	0x20000f80

080099b4 <_fwalk_sglue>:
 80099b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b8:	4607      	mov	r7, r0
 80099ba:	4688      	mov	r8, r1
 80099bc:	4614      	mov	r4, r2
 80099be:	2600      	movs	r6, #0
 80099c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099c4:	f1b9 0901 	subs.w	r9, r9, #1
 80099c8:	d505      	bpl.n	80099d6 <_fwalk_sglue+0x22>
 80099ca:	6824      	ldr	r4, [r4, #0]
 80099cc:	2c00      	cmp	r4, #0
 80099ce:	d1f7      	bne.n	80099c0 <_fwalk_sglue+0xc>
 80099d0:	4630      	mov	r0, r6
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d907      	bls.n	80099ec <_fwalk_sglue+0x38>
 80099dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099e0:	3301      	adds	r3, #1
 80099e2:	d003      	beq.n	80099ec <_fwalk_sglue+0x38>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c0      	blx	r8
 80099ea:	4306      	orrs	r6, r0
 80099ec:	3568      	adds	r5, #104	@ 0x68
 80099ee:	e7e9      	b.n	80099c4 <_fwalk_sglue+0x10>

080099f0 <iprintf>:
 80099f0:	b40f      	push	{r0, r1, r2, r3}
 80099f2:	b507      	push	{r0, r1, r2, lr}
 80099f4:	4906      	ldr	r1, [pc, #24]	@ (8009a10 <iprintf+0x20>)
 80099f6:	ab04      	add	r3, sp, #16
 80099f8:	6808      	ldr	r0, [r1, #0]
 80099fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fe:	6881      	ldr	r1, [r0, #8]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	f001 fbc5 	bl	800b190 <_vfiprintf_r>
 8009a06:	b003      	add	sp, #12
 8009a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a0c:	b004      	add	sp, #16
 8009a0e:	4770      	bx	lr
 8009a10:	20000194 	.word	0x20000194

08009a14 <__sread>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	460c      	mov	r4, r1
 8009a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1c:	f000 f86c 	bl	8009af8 <_read_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	bfab      	itete	ge
 8009a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a26:	89a3      	ldrhlt	r3, [r4, #12]
 8009a28:	181b      	addge	r3, r3, r0
 8009a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a2e:	bfac      	ite	ge
 8009a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a32:	81a3      	strhlt	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__swrite>:
 8009a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	898b      	ldrh	r3, [r1, #12]
 8009a3e:	05db      	lsls	r3, r3, #23
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	4616      	mov	r6, r2
 8009a46:	d505      	bpl.n	8009a54 <__swrite+0x1e>
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f000 f840 	bl	8009ad4 <_lseek_r>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	4628      	mov	r0, r5
 8009a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	f000 b857 	b.w	8009b1c <_write_r>

08009a6e <__sseek>:
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	460c      	mov	r4, r1
 8009a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a76:	f000 f82d 	bl	8009ad4 <_lseek_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	bf15      	itete	ne
 8009a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a8a:	81a3      	strheq	r3, [r4, #12]
 8009a8c:	bf18      	it	ne
 8009a8e:	81a3      	strhne	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__sclose>:
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 b80d 	b.w	8009ab4 <_close_r>

08009a9a <memset>:
 8009a9a:	4402      	add	r2, r0
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d100      	bne.n	8009aa4 <memset+0xa>
 8009aa2:	4770      	bx	lr
 8009aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa8:	e7f9      	b.n	8009a9e <memset+0x4>
	...

08009aac <_localeconv_r>:
 8009aac:	4800      	ldr	r0, [pc, #0]	@ (8009ab0 <_localeconv_r+0x4>)
 8009aae:	4770      	bx	lr
 8009ab0:	200002d4 	.word	0x200002d4

08009ab4 <_close_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	@ (8009ad0 <_close_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f7 fcc0 	bl	8001444 <_close>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_close_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_close_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	20000f84 	.word	0x20000f84

08009ad4 <_lseek_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	@ (8009af4 <_lseek_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f7 fcd5 	bl	8001492 <_lseek>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_lseek_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_lseek_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	20000f84 	.word	0x20000f84

08009af8 <_read_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	@ (8009b18 <_read_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f7f7 fc7f 	bl	800140a <_read>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_read_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_read_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20000f84 	.word	0x20000f84

08009b1c <_write_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	@ (8009b3c <_write_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7f7 f9c4 	bl	8000eb8 <_write>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_write_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_write_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000f84 	.word	0x20000f84

08009b40 <__errno>:
 8009b40:	4b01      	ldr	r3, [pc, #4]	@ (8009b48 <__errno+0x8>)
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000194 	.word	0x20000194

08009b4c <__libc_init_array>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b84 <__libc_init_array+0x38>)
 8009b50:	4c0d      	ldr	r4, [pc, #52]	@ (8009b88 <__libc_init_array+0x3c>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	2600      	movs	r6, #0
 8009b58:	42a6      	cmp	r6, r4
 8009b5a:	d109      	bne.n	8009b70 <__libc_init_array+0x24>
 8009b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b8c <__libc_init_array+0x40>)
 8009b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b90 <__libc_init_array+0x44>)
 8009b60:	f001 fec0 	bl	800b8e4 <_init>
 8009b64:	1b64      	subs	r4, r4, r5
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	2600      	movs	r6, #0
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	d105      	bne.n	8009b7a <__libc_init_array+0x2e>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b74:	4798      	blx	r3
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7ee      	b.n	8009b58 <__libc_init_array+0xc>
 8009b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7e:	4798      	blx	r3
 8009b80:	3601      	adds	r6, #1
 8009b82:	e7f2      	b.n	8009b6a <__libc_init_array+0x1e>
 8009b84:	0800bcf0 	.word	0x0800bcf0
 8009b88:	0800bcf0 	.word	0x0800bcf0
 8009b8c:	0800bcf0 	.word	0x0800bcf0
 8009b90:	0800bcf4 	.word	0x0800bcf4

08009b94 <__retarget_lock_init_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_acquire_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <__retarget_lock_release_recursive>:
 8009b98:	4770      	bx	lr

08009b9a <quorem>:
 8009b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9e:	6903      	ldr	r3, [r0, #16]
 8009ba0:	690c      	ldr	r4, [r1, #16]
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	db7e      	blt.n	8009ca6 <quorem+0x10c>
 8009ba8:	3c01      	subs	r4, #1
 8009baa:	f101 0814 	add.w	r8, r1, #20
 8009bae:	00a3      	lsls	r3, r4, #2
 8009bb0:	f100 0514 	add.w	r5, r0, #20
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bd0:	d32e      	bcc.n	8009c30 <quorem+0x96>
 8009bd2:	f04f 0a00 	mov.w	sl, #0
 8009bd6:	46c4      	mov	ip, r8
 8009bd8:	46ae      	mov	lr, r5
 8009bda:	46d3      	mov	fp, sl
 8009bdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009be0:	b298      	uxth	r0, r3
 8009be2:	fb06 a000 	mla	r0, r6, r0, sl
 8009be6:	0c02      	lsrs	r2, r0, #16
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	fb06 2303 	mla	r3, r6, r3, r2
 8009bee:	f8de 2000 	ldr.w	r2, [lr]
 8009bf2:	b280      	uxth	r0, r0
 8009bf4:	b292      	uxth	r2, r2
 8009bf6:	1a12      	subs	r2, r2, r0
 8009bf8:	445a      	add	r2, fp
 8009bfa:	f8de 0000 	ldr.w	r0, [lr]
 8009bfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c0c:	b292      	uxth	r2, r2
 8009c0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c12:	45e1      	cmp	r9, ip
 8009c14:	f84e 2b04 	str.w	r2, [lr], #4
 8009c18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c1c:	d2de      	bcs.n	8009bdc <quorem+0x42>
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	58eb      	ldr	r3, [r5, r3]
 8009c22:	b92b      	cbnz	r3, 8009c30 <quorem+0x96>
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	3b04      	subs	r3, #4
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	d32f      	bcc.n	8009c8e <quorem+0xf4>
 8009c2e:	613c      	str	r4, [r7, #16]
 8009c30:	4638      	mov	r0, r7
 8009c32:	f001 f97b 	bl	800af2c <__mcmp>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	db25      	blt.n	8009c86 <quorem+0xec>
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c42:	f8d1 c000 	ldr.w	ip, [r1]
 8009c46:	fa1f fe82 	uxth.w	lr, r2
 8009c4a:	fa1f f38c 	uxth.w	r3, ip
 8009c4e:	eba3 030e 	sub.w	r3, r3, lr
 8009c52:	4403      	add	r3, r0
 8009c54:	0c12      	lsrs	r2, r2, #16
 8009c56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c64:	45c1      	cmp	r9, r8
 8009c66:	f841 3b04 	str.w	r3, [r1], #4
 8009c6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c6e:	d2e6      	bcs.n	8009c3e <quorem+0xa4>
 8009c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c78:	b922      	cbnz	r2, 8009c84 <quorem+0xea>
 8009c7a:	3b04      	subs	r3, #4
 8009c7c:	429d      	cmp	r5, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	d30b      	bcc.n	8009c9a <quorem+0x100>
 8009c82:	613c      	str	r4, [r7, #16]
 8009c84:	3601      	adds	r6, #1
 8009c86:	4630      	mov	r0, r6
 8009c88:	b003      	add	sp, #12
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	3b04      	subs	r3, #4
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d1cb      	bne.n	8009c2e <quorem+0x94>
 8009c96:	3c01      	subs	r4, #1
 8009c98:	e7c6      	b.n	8009c28 <quorem+0x8e>
 8009c9a:	6812      	ldr	r2, [r2, #0]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	2a00      	cmp	r2, #0
 8009ca0:	d1ef      	bne.n	8009c82 <quorem+0xe8>
 8009ca2:	3c01      	subs	r4, #1
 8009ca4:	e7ea      	b.n	8009c7c <quorem+0xe2>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e7ee      	b.n	8009c88 <quorem+0xee>
 8009caa:	0000      	movs	r0, r0
 8009cac:	0000      	movs	r0, r0
	...

08009cb0 <_dtoa_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	69c7      	ldr	r7, [r0, #28]
 8009cb6:	b099      	sub	sp, #100	@ 0x64
 8009cb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cbc:	ec55 4b10 	vmov	r4, r5, d0
 8009cc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009cc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cc4:	4683      	mov	fp, r0
 8009cc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cca:	b97f      	cbnz	r7, 8009cec <_dtoa_r+0x3c>
 8009ccc:	2010      	movs	r0, #16
 8009cce:	f000 fdfd 	bl	800a8cc <malloc>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009cd8:	b920      	cbnz	r0, 8009ce4 <_dtoa_r+0x34>
 8009cda:	4ba7      	ldr	r3, [pc, #668]	@ (8009f78 <_dtoa_r+0x2c8>)
 8009cdc:	21ef      	movs	r1, #239	@ 0xef
 8009cde:	48a7      	ldr	r0, [pc, #668]	@ (8009f7c <_dtoa_r+0x2cc>)
 8009ce0:	f001 fccc 	bl	800b67c <__assert_func>
 8009ce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ce8:	6007      	str	r7, [r0, #0]
 8009cea:	60c7      	str	r7, [r0, #12]
 8009cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	b159      	cbz	r1, 8009d0c <_dtoa_r+0x5c>
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	604a      	str	r2, [r1, #4]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4093      	lsls	r3, r2
 8009cfc:	608b      	str	r3, [r1, #8]
 8009cfe:	4658      	mov	r0, fp
 8009d00:	f000 feda 	bl	800aab8 <_Bfree>
 8009d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	1e2b      	subs	r3, r5, #0
 8009d0e:	bfb9      	ittee	lt
 8009d10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d14:	9303      	strlt	r3, [sp, #12]
 8009d16:	2300      	movge	r3, #0
 8009d18:	6033      	strge	r3, [r6, #0]
 8009d1a:	9f03      	ldr	r7, [sp, #12]
 8009d1c:	4b98      	ldr	r3, [pc, #608]	@ (8009f80 <_dtoa_r+0x2d0>)
 8009d1e:	bfbc      	itt	lt
 8009d20:	2201      	movlt	r2, #1
 8009d22:	6032      	strlt	r2, [r6, #0]
 8009d24:	43bb      	bics	r3, r7
 8009d26:	d112      	bne.n	8009d4e <_dtoa_r+0x9e>
 8009d28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d34:	4323      	orrs	r3, r4
 8009d36:	f000 854d 	beq.w	800a7d4 <_dtoa_r+0xb24>
 8009d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f94 <_dtoa_r+0x2e4>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 854f 	beq.w	800a7e4 <_dtoa_r+0xb34>
 8009d46:	f10a 0303 	add.w	r3, sl, #3
 8009d4a:	f000 bd49 	b.w	800a7e0 <_dtoa_r+0xb30>
 8009d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	ec51 0b17 	vmov	r0, r1, d7
 8009d58:	2300      	movs	r3, #0
 8009d5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d5e:	f7f6 fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d62:	4680      	mov	r8, r0
 8009d64:	b158      	cbz	r0, 8009d7e <_dtoa_r+0xce>
 8009d66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d68:	2301      	movs	r3, #1
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d6e:	b113      	cbz	r3, 8009d76 <_dtoa_r+0xc6>
 8009d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d72:	4b84      	ldr	r3, [pc, #528]	@ (8009f84 <_dtoa_r+0x2d4>)
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f98 <_dtoa_r+0x2e8>
 8009d7a:	f000 bd33 	b.w	800a7e4 <_dtoa_r+0xb34>
 8009d7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d82:	aa16      	add	r2, sp, #88	@ 0x58
 8009d84:	a917      	add	r1, sp, #92	@ 0x5c
 8009d86:	4658      	mov	r0, fp
 8009d88:	f001 f980 	bl	800b08c <__d2b>
 8009d8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d90:	4681      	mov	r9, r0
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d077      	beq.n	8009e86 <_dtoa_r+0x1d6>
 8009d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009da8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009dac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009db0:	4619      	mov	r1, r3
 8009db2:	2200      	movs	r2, #0
 8009db4:	4b74      	ldr	r3, [pc, #464]	@ (8009f88 <_dtoa_r+0x2d8>)
 8009db6:	f7f6 fa77 	bl	80002a8 <__aeabi_dsub>
 8009dba:	a369      	add	r3, pc, #420	@ (adr r3, 8009f60 <_dtoa_r+0x2b0>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f7f6 fc2a 	bl	8000618 <__aeabi_dmul>
 8009dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8009f68 <_dtoa_r+0x2b8>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f7f6 fa6f 	bl	80002ac <__adddf3>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	f7f6 fbb6 	bl	8000544 <__aeabi_i2d>
 8009dd8:	a365      	add	r3, pc, #404	@ (adr r3, 8009f70 <_dtoa_r+0x2c0>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fc1b 	bl	8000618 <__aeabi_dmul>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fa5f 	bl	80002ac <__adddf3>
 8009dee:	4604      	mov	r4, r0
 8009df0:	460d      	mov	r5, r1
 8009df2:	f7f6 fec1 	bl	8000b78 <__aeabi_d2iz>
 8009df6:	2200      	movs	r2, #0
 8009df8:	4607      	mov	r7, r0
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f7f6 fe7c 	bl	8000afc <__aeabi_dcmplt>
 8009e04:	b140      	cbz	r0, 8009e18 <_dtoa_r+0x168>
 8009e06:	4638      	mov	r0, r7
 8009e08:	f7f6 fb9c 	bl	8000544 <__aeabi_i2d>
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	462b      	mov	r3, r5
 8009e10:	f7f6 fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e14:	b900      	cbnz	r0, 8009e18 <_dtoa_r+0x168>
 8009e16:	3f01      	subs	r7, #1
 8009e18:	2f16      	cmp	r7, #22
 8009e1a:	d851      	bhi.n	8009ec0 <_dtoa_r+0x210>
 8009e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8009f8c <_dtoa_r+0x2dc>)
 8009e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e2a:	f7f6 fe67 	bl	8000afc <__aeabi_dcmplt>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d048      	beq.n	8009ec4 <_dtoa_r+0x214>
 8009e32:	3f01      	subs	r7, #1
 8009e34:	2300      	movs	r3, #0
 8009e36:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e3a:	1b9b      	subs	r3, r3, r6
 8009e3c:	1e5a      	subs	r2, r3, #1
 8009e3e:	bf44      	itt	mi
 8009e40:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e44:	2300      	movmi	r3, #0
 8009e46:	9208      	str	r2, [sp, #32]
 8009e48:	bf54      	ite	pl
 8009e4a:	f04f 0800 	movpl.w	r8, #0
 8009e4e:	9308      	strmi	r3, [sp, #32]
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	db39      	blt.n	8009ec8 <_dtoa_r+0x218>
 8009e54:	9b08      	ldr	r3, [sp, #32]
 8009e56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e58:	443b      	add	r3, r7
 8009e5a:	9308      	str	r3, [sp, #32]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e62:	2b09      	cmp	r3, #9
 8009e64:	d864      	bhi.n	8009f30 <_dtoa_r+0x280>
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	bfc4      	itt	gt
 8009e6a:	3b04      	subgt	r3, #4
 8009e6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	f1a3 0302 	sub.w	r3, r3, #2
 8009e74:	bfcc      	ite	gt
 8009e76:	2400      	movgt	r4, #0
 8009e78:	2401      	movle	r4, #1
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d863      	bhi.n	8009f46 <_dtoa_r+0x296>
 8009e7e:	e8df f003 	tbb	[pc, r3]
 8009e82:	372a      	.short	0x372a
 8009e84:	5535      	.short	0x5535
 8009e86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e8a:	441e      	add	r6, r3
 8009e8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	bfc1      	itttt	gt
 8009e94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e98:	409f      	lslgt	r7, r3
 8009e9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ea2:	bfd6      	itet	le
 8009ea4:	f1c3 0320 	rsble	r3, r3, #32
 8009ea8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009eac:	fa04 f003 	lslle.w	r0, r4, r3
 8009eb0:	f7f6 fb38 	bl	8000524 <__aeabi_ui2d>
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009eba:	3e01      	subs	r6, #1
 8009ebc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ebe:	e777      	b.n	8009db0 <_dtoa_r+0x100>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e7b8      	b.n	8009e36 <_dtoa_r+0x186>
 8009ec4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ec6:	e7b7      	b.n	8009e38 <_dtoa_r+0x188>
 8009ec8:	427b      	negs	r3, r7
 8009eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ecc:	2300      	movs	r3, #0
 8009ece:	eba8 0807 	sub.w	r8, r8, r7
 8009ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ed4:	e7c4      	b.n	8009e60 <_dtoa_r+0x1b0>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc35      	bgt.n	8009f4c <_dtoa_r+0x29c>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	9307      	str	r3, [sp, #28]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eea:	e00b      	b.n	8009f04 <_dtoa_r+0x254>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e7f3      	b.n	8009ed8 <_dtoa_r+0x228>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef6:	18fb      	adds	r3, r7, r3
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	3301      	adds	r3, #1
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	bfb8      	it	lt
 8009f02:	2301      	movlt	r3, #1
 8009f04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	f102 0514 	add.w	r5, r2, #20
 8009f10:	429d      	cmp	r5, r3
 8009f12:	d91f      	bls.n	8009f54 <_dtoa_r+0x2a4>
 8009f14:	6041      	str	r1, [r0, #4]
 8009f16:	4658      	mov	r0, fp
 8009f18:	f000 fd8e 	bl	800aa38 <_Balloc>
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d13c      	bne.n	8009f9c <_dtoa_r+0x2ec>
 8009f22:	4b1b      	ldr	r3, [pc, #108]	@ (8009f90 <_dtoa_r+0x2e0>)
 8009f24:	4602      	mov	r2, r0
 8009f26:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f2a:	e6d8      	b.n	8009cde <_dtoa_r+0x2e>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e7e0      	b.n	8009ef2 <_dtoa_r+0x242>
 8009f30:	2401      	movs	r4, #1
 8009f32:	2300      	movs	r3, #0
 8009f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f38:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	2200      	movs	r2, #0
 8009f42:	2312      	movs	r3, #18
 8009f44:	e7d0      	b.n	8009ee8 <_dtoa_r+0x238>
 8009f46:	2301      	movs	r3, #1
 8009f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f4a:	e7f5      	b.n	8009f38 <_dtoa_r+0x288>
 8009f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	9307      	str	r3, [sp, #28]
 8009f52:	e7d7      	b.n	8009f04 <_dtoa_r+0x254>
 8009f54:	3101      	adds	r1, #1
 8009f56:	0052      	lsls	r2, r2, #1
 8009f58:	e7d8      	b.n	8009f0c <_dtoa_r+0x25c>
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w
 8009f60:	636f4361 	.word	0x636f4361
 8009f64:	3fd287a7 	.word	0x3fd287a7
 8009f68:	8b60c8b3 	.word	0x8b60c8b3
 8009f6c:	3fc68a28 	.word	0x3fc68a28
 8009f70:	509f79fb 	.word	0x509f79fb
 8009f74:	3fd34413 	.word	0x3fd34413
 8009f78:	0800b9b9 	.word	0x0800b9b9
 8009f7c:	0800b9d0 	.word	0x0800b9d0
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	0800b989 	.word	0x0800b989
 8009f88:	3ff80000 	.word	0x3ff80000
 8009f8c:	0800bac8 	.word	0x0800bac8
 8009f90:	0800ba28 	.word	0x0800ba28
 8009f94:	0800b9b5 	.word	0x0800b9b5
 8009f98:	0800b988 	.word	0x0800b988
 8009f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009fa0:	6018      	str	r0, [r3, #0]
 8009fa2:	9b07      	ldr	r3, [sp, #28]
 8009fa4:	2b0e      	cmp	r3, #14
 8009fa6:	f200 80a4 	bhi.w	800a0f2 <_dtoa_r+0x442>
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	f000 80a1 	beq.w	800a0f2 <_dtoa_r+0x442>
 8009fb0:	2f00      	cmp	r7, #0
 8009fb2:	dd33      	ble.n	800a01c <_dtoa_r+0x36c>
 8009fb4:	4bad      	ldr	r3, [pc, #692]	@ (800a26c <_dtoa_r+0x5bc>)
 8009fb6:	f007 020f 	and.w	r2, r7, #15
 8009fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fbe:	ed93 7b00 	vldr	d7, [r3]
 8009fc2:	05f8      	lsls	r0, r7, #23
 8009fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fcc:	d516      	bpl.n	8009ffc <_dtoa_r+0x34c>
 8009fce:	4ba8      	ldr	r3, [pc, #672]	@ (800a270 <_dtoa_r+0x5c0>)
 8009fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd8:	f7f6 fc48 	bl	800086c <__aeabi_ddiv>
 8009fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe0:	f004 040f 	and.w	r4, r4, #15
 8009fe4:	2603      	movs	r6, #3
 8009fe6:	4da2      	ldr	r5, [pc, #648]	@ (800a270 <_dtoa_r+0x5c0>)
 8009fe8:	b954      	cbnz	r4, 800a000 <_dtoa_r+0x350>
 8009fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff2:	f7f6 fc3b 	bl	800086c <__aeabi_ddiv>
 8009ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ffa:	e028      	b.n	800a04e <_dtoa_r+0x39e>
 8009ffc:	2602      	movs	r6, #2
 8009ffe:	e7f2      	b.n	8009fe6 <_dtoa_r+0x336>
 800a000:	07e1      	lsls	r1, r4, #31
 800a002:	d508      	bpl.n	800a016 <_dtoa_r+0x366>
 800a004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a00c:	f7f6 fb04 	bl	8000618 <__aeabi_dmul>
 800a010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a014:	3601      	adds	r6, #1
 800a016:	1064      	asrs	r4, r4, #1
 800a018:	3508      	adds	r5, #8
 800a01a:	e7e5      	b.n	8009fe8 <_dtoa_r+0x338>
 800a01c:	f000 80d2 	beq.w	800a1c4 <_dtoa_r+0x514>
 800a020:	427c      	negs	r4, r7
 800a022:	4b92      	ldr	r3, [pc, #584]	@ (800a26c <_dtoa_r+0x5bc>)
 800a024:	4d92      	ldr	r5, [pc, #584]	@ (800a270 <_dtoa_r+0x5c0>)
 800a026:	f004 020f 	and.w	r2, r4, #15
 800a02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a036:	f7f6 faef 	bl	8000618 <__aeabi_dmul>
 800a03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a03e:	1124      	asrs	r4, r4, #4
 800a040:	2300      	movs	r3, #0
 800a042:	2602      	movs	r6, #2
 800a044:	2c00      	cmp	r4, #0
 800a046:	f040 80b2 	bne.w	800a1ae <_dtoa_r+0x4fe>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1d3      	bne.n	8009ff6 <_dtoa_r+0x346>
 800a04e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 80b7 	beq.w	800a1c8 <_dtoa_r+0x518>
 800a05a:	4b86      	ldr	r3, [pc, #536]	@ (800a274 <_dtoa_r+0x5c4>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 fd4b 	bl	8000afc <__aeabi_dcmplt>
 800a066:	2800      	cmp	r0, #0
 800a068:	f000 80ae 	beq.w	800a1c8 <_dtoa_r+0x518>
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80aa 	beq.w	800a1c8 <_dtoa_r+0x518>
 800a074:	9b00      	ldr	r3, [sp, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	dd37      	ble.n	800a0ea <_dtoa_r+0x43a>
 800a07a:	1e7b      	subs	r3, r7, #1
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	4620      	mov	r0, r4
 800a080:	4b7d      	ldr	r3, [pc, #500]	@ (800a278 <_dtoa_r+0x5c8>)
 800a082:	2200      	movs	r2, #0
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fac7 	bl	8000618 <__aeabi_dmul>
 800a08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a08e:	9c00      	ldr	r4, [sp, #0]
 800a090:	3601      	adds	r6, #1
 800a092:	4630      	mov	r0, r6
 800a094:	f7f6 fa56 	bl	8000544 <__aeabi_i2d>
 800a098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a09c:	f7f6 fabc 	bl	8000618 <__aeabi_dmul>
 800a0a0:	4b76      	ldr	r3, [pc, #472]	@ (800a27c <_dtoa_r+0x5cc>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f7f6 f902 	bl	80002ac <__adddf3>
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	f040 808d 	bne.w	800a1ce <_dtoa_r+0x51e>
 800a0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b8:	4b71      	ldr	r3, [pc, #452]	@ (800a280 <_dtoa_r+0x5d0>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7f6 f8f4 	bl	80002a8 <__aeabi_dsub>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4633      	mov	r3, r6
 800a0cc:	f7f6 fd34 	bl	8000b38 <__aeabi_dcmpgt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	f040 828b 	bne.w	800a5ec <_dtoa_r+0x93c>
 800a0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0da:	462a      	mov	r2, r5
 800a0dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0e0:	f7f6 fd0c 	bl	8000afc <__aeabi_dcmplt>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f040 8128 	bne.w	800a33a <_dtoa_r+0x68a>
 800a0ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f2c0 815a 	blt.w	800a3ae <_dtoa_r+0x6fe>
 800a0fa:	2f0e      	cmp	r7, #14
 800a0fc:	f300 8157 	bgt.w	800a3ae <_dtoa_r+0x6fe>
 800a100:	4b5a      	ldr	r3, [pc, #360]	@ (800a26c <_dtoa_r+0x5bc>)
 800a102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a106:	ed93 7b00 	vldr	d7, [r3]
 800a10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	ed8d 7b00 	vstr	d7, [sp]
 800a112:	da03      	bge.n	800a11c <_dtoa_r+0x46c>
 800a114:	9b07      	ldr	r3, [sp, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f340 8101 	ble.w	800a31e <_dtoa_r+0x66e>
 800a11c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a120:	4656      	mov	r6, sl
 800a122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a126:	4620      	mov	r0, r4
 800a128:	4629      	mov	r1, r5
 800a12a:	f7f6 fb9f 	bl	800086c <__aeabi_ddiv>
 800a12e:	f7f6 fd23 	bl	8000b78 <__aeabi_d2iz>
 800a132:	4680      	mov	r8, r0
 800a134:	f7f6 fa06 	bl	8000544 <__aeabi_i2d>
 800a138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13c:	f7f6 fa6c 	bl	8000618 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a14c:	f7f6 f8ac 	bl	80002a8 <__aeabi_dsub>
 800a150:	f806 4b01 	strb.w	r4, [r6], #1
 800a154:	9d07      	ldr	r5, [sp, #28]
 800a156:	eba6 040a 	sub.w	r4, r6, sl
 800a15a:	42a5      	cmp	r5, r4
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	f040 8117 	bne.w	800a392 <_dtoa_r+0x6e2>
 800a164:	f7f6 f8a2 	bl	80002ac <__adddf3>
 800a168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	f7f6 fce2 	bl	8000b38 <__aeabi_dcmpgt>
 800a174:	2800      	cmp	r0, #0
 800a176:	f040 80f9 	bne.w	800a36c <_dtoa_r+0x6bc>
 800a17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800a186:	b118      	cbz	r0, 800a190 <_dtoa_r+0x4e0>
 800a188:	f018 0f01 	tst.w	r8, #1
 800a18c:	f040 80ee 	bne.w	800a36c <_dtoa_r+0x6bc>
 800a190:	4649      	mov	r1, r9
 800a192:	4658      	mov	r0, fp
 800a194:	f000 fc90 	bl	800aab8 <_Bfree>
 800a198:	2300      	movs	r3, #0
 800a19a:	7033      	strb	r3, [r6, #0]
 800a19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a19e:	3701      	adds	r7, #1
 800a1a0:	601f      	str	r7, [r3, #0]
 800a1a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 831d 	beq.w	800a7e4 <_dtoa_r+0xb34>
 800a1aa:	601e      	str	r6, [r3, #0]
 800a1ac:	e31a      	b.n	800a7e4 <_dtoa_r+0xb34>
 800a1ae:	07e2      	lsls	r2, r4, #31
 800a1b0:	d505      	bpl.n	800a1be <_dtoa_r+0x50e>
 800a1b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1b6:	f7f6 fa2f 	bl	8000618 <__aeabi_dmul>
 800a1ba:	3601      	adds	r6, #1
 800a1bc:	2301      	movs	r3, #1
 800a1be:	1064      	asrs	r4, r4, #1
 800a1c0:	3508      	adds	r5, #8
 800a1c2:	e73f      	b.n	800a044 <_dtoa_r+0x394>
 800a1c4:	2602      	movs	r6, #2
 800a1c6:	e742      	b.n	800a04e <_dtoa_r+0x39e>
 800a1c8:	9c07      	ldr	r4, [sp, #28]
 800a1ca:	9704      	str	r7, [sp, #16]
 800a1cc:	e761      	b.n	800a092 <_dtoa_r+0x3e2>
 800a1ce:	4b27      	ldr	r3, [pc, #156]	@ (800a26c <_dtoa_r+0x5bc>)
 800a1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1da:	4454      	add	r4, sl
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	d053      	beq.n	800a288 <_dtoa_r+0x5d8>
 800a1e0:	4928      	ldr	r1, [pc, #160]	@ (800a284 <_dtoa_r+0x5d4>)
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f7f6 fb42 	bl	800086c <__aeabi_ddiv>
 800a1e8:	4633      	mov	r3, r6
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	f7f6 f85c 	bl	80002a8 <__aeabi_dsub>
 800a1f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1f4:	4656      	mov	r6, sl
 800a1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1fa:	f7f6 fcbd 	bl	8000b78 <__aeabi_d2iz>
 800a1fe:	4605      	mov	r5, r0
 800a200:	f7f6 f9a0 	bl	8000544 <__aeabi_i2d>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20c:	f7f6 f84c 	bl	80002a8 <__aeabi_dsub>
 800a210:	3530      	adds	r5, #48	@ 0x30
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a21a:	f806 5b01 	strb.w	r5, [r6], #1
 800a21e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a222:	f7f6 fc6b 	bl	8000afc <__aeabi_dcmplt>
 800a226:	2800      	cmp	r0, #0
 800a228:	d171      	bne.n	800a30e <_dtoa_r+0x65e>
 800a22a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a22e:	4911      	ldr	r1, [pc, #68]	@ (800a274 <_dtoa_r+0x5c4>)
 800a230:	2000      	movs	r0, #0
 800a232:	f7f6 f839 	bl	80002a8 <__aeabi_dsub>
 800a236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a23a:	f7f6 fc5f 	bl	8000afc <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f040 8095 	bne.w	800a36e <_dtoa_r+0x6be>
 800a244:	42a6      	cmp	r6, r4
 800a246:	f43f af50 	beq.w	800a0ea <_dtoa_r+0x43a>
 800a24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a24e:	4b0a      	ldr	r3, [pc, #40]	@ (800a278 <_dtoa_r+0x5c8>)
 800a250:	2200      	movs	r2, #0
 800a252:	f7f6 f9e1 	bl	8000618 <__aeabi_dmul>
 800a256:	4b08      	ldr	r3, [pc, #32]	@ (800a278 <_dtoa_r+0x5c8>)
 800a258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a25c:	2200      	movs	r2, #0
 800a25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a262:	f7f6 f9d9 	bl	8000618 <__aeabi_dmul>
 800a266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a26a:	e7c4      	b.n	800a1f6 <_dtoa_r+0x546>
 800a26c:	0800bac8 	.word	0x0800bac8
 800a270:	0800baa0 	.word	0x0800baa0
 800a274:	3ff00000 	.word	0x3ff00000
 800a278:	40240000 	.word	0x40240000
 800a27c:	401c0000 	.word	0x401c0000
 800a280:	40140000 	.word	0x40140000
 800a284:	3fe00000 	.word	0x3fe00000
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7f6 f9c4 	bl	8000618 <__aeabi_dmul>
 800a290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a294:	9415      	str	r4, [sp, #84]	@ 0x54
 800a296:	4656      	mov	r6, sl
 800a298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a29c:	f7f6 fc6c 	bl	8000b78 <__aeabi_d2iz>
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	f7f6 f94f 	bl	8000544 <__aeabi_i2d>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ae:	f7f5 fffb 	bl	80002a8 <__aeabi_dsub>
 800a2b2:	3530      	adds	r5, #48	@ 0x30
 800a2b4:	f806 5b01 	strb.w	r5, [r6], #1
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2c2:	f04f 0200 	mov.w	r2, #0
 800a2c6:	d124      	bne.n	800a312 <_dtoa_r+0x662>
 800a2c8:	4bac      	ldr	r3, [pc, #688]	@ (800a57c <_dtoa_r+0x8cc>)
 800a2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2ce:	f7f5 ffed 	bl	80002ac <__adddf3>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	f7f6 fc2d 	bl	8000b38 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d145      	bne.n	800a36e <_dtoa_r+0x6be>
 800a2e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2e6:	49a5      	ldr	r1, [pc, #660]	@ (800a57c <_dtoa_r+0x8cc>)
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f7f5 ffdd 	bl	80002a8 <__aeabi_dsub>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f6:	f7f6 fc01 	bl	8000afc <__aeabi_dcmplt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aef5 	beq.w	800a0ea <_dtoa_r+0x43a>
 800a300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a302:	1e73      	subs	r3, r6, #1
 800a304:	9315      	str	r3, [sp, #84]	@ 0x54
 800a306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a30a:	2b30      	cmp	r3, #48	@ 0x30
 800a30c:	d0f8      	beq.n	800a300 <_dtoa_r+0x650>
 800a30e:	9f04      	ldr	r7, [sp, #16]
 800a310:	e73e      	b.n	800a190 <_dtoa_r+0x4e0>
 800a312:	4b9b      	ldr	r3, [pc, #620]	@ (800a580 <_dtoa_r+0x8d0>)
 800a314:	f7f6 f980 	bl	8000618 <__aeabi_dmul>
 800a318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a31c:	e7bc      	b.n	800a298 <_dtoa_r+0x5e8>
 800a31e:	d10c      	bne.n	800a33a <_dtoa_r+0x68a>
 800a320:	4b98      	ldr	r3, [pc, #608]	@ (800a584 <_dtoa_r+0x8d4>)
 800a322:	2200      	movs	r2, #0
 800a324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a328:	f7f6 f976 	bl	8000618 <__aeabi_dmul>
 800a32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a330:	f7f6 fbf8 	bl	8000b24 <__aeabi_dcmpge>
 800a334:	2800      	cmp	r0, #0
 800a336:	f000 8157 	beq.w	800a5e8 <_dtoa_r+0x938>
 800a33a:	2400      	movs	r4, #0
 800a33c:	4625      	mov	r5, r4
 800a33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a340:	43db      	mvns	r3, r3
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	4656      	mov	r6, sl
 800a346:	2700      	movs	r7, #0
 800a348:	4621      	mov	r1, r4
 800a34a:	4658      	mov	r0, fp
 800a34c:	f000 fbb4 	bl	800aab8 <_Bfree>
 800a350:	2d00      	cmp	r5, #0
 800a352:	d0dc      	beq.n	800a30e <_dtoa_r+0x65e>
 800a354:	b12f      	cbz	r7, 800a362 <_dtoa_r+0x6b2>
 800a356:	42af      	cmp	r7, r5
 800a358:	d003      	beq.n	800a362 <_dtoa_r+0x6b2>
 800a35a:	4639      	mov	r1, r7
 800a35c:	4658      	mov	r0, fp
 800a35e:	f000 fbab 	bl	800aab8 <_Bfree>
 800a362:	4629      	mov	r1, r5
 800a364:	4658      	mov	r0, fp
 800a366:	f000 fba7 	bl	800aab8 <_Bfree>
 800a36a:	e7d0      	b.n	800a30e <_dtoa_r+0x65e>
 800a36c:	9704      	str	r7, [sp, #16]
 800a36e:	4633      	mov	r3, r6
 800a370:	461e      	mov	r6, r3
 800a372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a376:	2a39      	cmp	r2, #57	@ 0x39
 800a378:	d107      	bne.n	800a38a <_dtoa_r+0x6da>
 800a37a:	459a      	cmp	sl, r3
 800a37c:	d1f8      	bne.n	800a370 <_dtoa_r+0x6c0>
 800a37e:	9a04      	ldr	r2, [sp, #16]
 800a380:	3201      	adds	r2, #1
 800a382:	9204      	str	r2, [sp, #16]
 800a384:	2230      	movs	r2, #48	@ 0x30
 800a386:	f88a 2000 	strb.w	r2, [sl]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	3201      	adds	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e7bd      	b.n	800a30e <_dtoa_r+0x65e>
 800a392:	4b7b      	ldr	r3, [pc, #492]	@ (800a580 <_dtoa_r+0x8d0>)
 800a394:	2200      	movs	r2, #0
 800a396:	f7f6 f93f 	bl	8000618 <__aeabi_dmul>
 800a39a:	2200      	movs	r2, #0
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	f7f6 fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f43f aebb 	beq.w	800a122 <_dtoa_r+0x472>
 800a3ac:	e6f0      	b.n	800a190 <_dtoa_r+0x4e0>
 800a3ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	f000 80db 	beq.w	800a56c <_dtoa_r+0x8bc>
 800a3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3b8:	2a01      	cmp	r2, #1
 800a3ba:	f300 80bf 	bgt.w	800a53c <_dtoa_r+0x88c>
 800a3be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	f000 80b7 	beq.w	800a534 <_dtoa_r+0x884>
 800a3c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a3ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3cc:	4646      	mov	r6, r8
 800a3ce:	9a08      	ldr	r2, [sp, #32]
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	441a      	add	r2, r3
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	4498      	add	r8, r3
 800a3d8:	9208      	str	r2, [sp, #32]
 800a3da:	f000 fc21 	bl	800ac20 <__i2b>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	b15e      	cbz	r6, 800a3fa <_dtoa_r+0x74a>
 800a3e2:	9b08      	ldr	r3, [sp, #32]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd08      	ble.n	800a3fa <_dtoa_r+0x74a>
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	9a08      	ldr	r2, [sp, #32]
 800a3ec:	bfa8      	it	ge
 800a3ee:	4633      	movge	r3, r6
 800a3f0:	eba8 0803 	sub.w	r8, r8, r3
 800a3f4:	1af6      	subs	r6, r6, r3
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	9308      	str	r3, [sp, #32]
 800a3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fc:	b1f3      	cbz	r3, 800a43c <_dtoa_r+0x78c>
 800a3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80b7 	beq.w	800a574 <_dtoa_r+0x8c4>
 800a406:	b18c      	cbz	r4, 800a42c <_dtoa_r+0x77c>
 800a408:	4629      	mov	r1, r5
 800a40a:	4622      	mov	r2, r4
 800a40c:	4658      	mov	r0, fp
 800a40e:	f000 fcc7 	bl	800ada0 <__pow5mult>
 800a412:	464a      	mov	r2, r9
 800a414:	4601      	mov	r1, r0
 800a416:	4605      	mov	r5, r0
 800a418:	4658      	mov	r0, fp
 800a41a:	f000 fc17 	bl	800ac4c <__multiply>
 800a41e:	4649      	mov	r1, r9
 800a420:	9004      	str	r0, [sp, #16]
 800a422:	4658      	mov	r0, fp
 800a424:	f000 fb48 	bl	800aab8 <_Bfree>
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	4699      	mov	r9, r3
 800a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a42e:	1b1a      	subs	r2, r3, r4
 800a430:	d004      	beq.n	800a43c <_dtoa_r+0x78c>
 800a432:	4649      	mov	r1, r9
 800a434:	4658      	mov	r0, fp
 800a436:	f000 fcb3 	bl	800ada0 <__pow5mult>
 800a43a:	4681      	mov	r9, r0
 800a43c:	2101      	movs	r1, #1
 800a43e:	4658      	mov	r0, fp
 800a440:	f000 fbee 	bl	800ac20 <__i2b>
 800a444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a446:	4604      	mov	r4, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 81cf 	beq.w	800a7ec <_dtoa_r+0xb3c>
 800a44e:	461a      	mov	r2, r3
 800a450:	4601      	mov	r1, r0
 800a452:	4658      	mov	r0, fp
 800a454:	f000 fca4 	bl	800ada0 <__pow5mult>
 800a458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	4604      	mov	r4, r0
 800a45e:	f300 8095 	bgt.w	800a58c <_dtoa_r+0x8dc>
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f040 8087 	bne.w	800a578 <_dtoa_r+0x8c8>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 8089 	bne.w	800a588 <_dtoa_r+0x8d8>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a47c:	0d1b      	lsrs	r3, r3, #20
 800a47e:	051b      	lsls	r3, r3, #20
 800a480:	b12b      	cbz	r3, 800a48e <_dtoa_r+0x7de>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	3301      	adds	r3, #1
 800a486:	9308      	str	r3, [sp, #32]
 800a488:	f108 0801 	add.w	r8, r8, #1
 800a48c:	2301      	movs	r3, #1
 800a48e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 81b0 	beq.w	800a7f8 <_dtoa_r+0xb48>
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a49e:	6918      	ldr	r0, [r3, #16]
 800a4a0:	f000 fb72 	bl	800ab88 <__hi0bits>
 800a4a4:	f1c0 0020 	rsb	r0, r0, #32
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	4418      	add	r0, r3
 800a4ac:	f010 001f 	ands.w	r0, r0, #31
 800a4b0:	d077      	beq.n	800a5a2 <_dtoa_r+0x8f2>
 800a4b2:	f1c0 0320 	rsb	r3, r0, #32
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	dd6b      	ble.n	800a592 <_dtoa_r+0x8e2>
 800a4ba:	9b08      	ldr	r3, [sp, #32]
 800a4bc:	f1c0 001c 	rsb	r0, r0, #28
 800a4c0:	4403      	add	r3, r0
 800a4c2:	4480      	add	r8, r0
 800a4c4:	4406      	add	r6, r0
 800a4c6:	9308      	str	r3, [sp, #32]
 800a4c8:	f1b8 0f00 	cmp.w	r8, #0
 800a4cc:	dd05      	ble.n	800a4da <_dtoa_r+0x82a>
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fcbe 	bl	800ae54 <__lshift>
 800a4d8:	4681      	mov	r9, r0
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dd05      	ble.n	800a4ec <_dtoa_r+0x83c>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	4658      	mov	r0, fp
 800a4e6:	f000 fcb5 	bl	800ae54 <__lshift>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d059      	beq.n	800a5a6 <_dtoa_r+0x8f6>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4648      	mov	r0, r9
 800a4f6:	f000 fd19 	bl	800af2c <__mcmp>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	da53      	bge.n	800a5a6 <_dtoa_r+0x8f6>
 800a4fe:	1e7b      	subs	r3, r7, #1
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	4649      	mov	r1, r9
 800a504:	2300      	movs	r3, #0
 800a506:	220a      	movs	r2, #10
 800a508:	4658      	mov	r0, fp
 800a50a:	f000 faf7 	bl	800aafc <__multadd>
 800a50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a510:	4681      	mov	r9, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8172 	beq.w	800a7fc <_dtoa_r+0xb4c>
 800a518:	2300      	movs	r3, #0
 800a51a:	4629      	mov	r1, r5
 800a51c:	220a      	movs	r2, #10
 800a51e:	4658      	mov	r0, fp
 800a520:	f000 faec 	bl	800aafc <__multadd>
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	4605      	mov	r5, r0
 800a52a:	dc67      	bgt.n	800a5fc <_dtoa_r+0x94c>
 800a52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52e:	2b02      	cmp	r3, #2
 800a530:	dc41      	bgt.n	800a5b6 <_dtoa_r+0x906>
 800a532:	e063      	b.n	800a5fc <_dtoa_r+0x94c>
 800a534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a53a:	e746      	b.n	800a3ca <_dtoa_r+0x71a>
 800a53c:	9b07      	ldr	r3, [sp, #28]
 800a53e:	1e5c      	subs	r4, r3, #1
 800a540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a542:	42a3      	cmp	r3, r4
 800a544:	bfbf      	itttt	lt
 800a546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a54a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a54c:	1ae3      	sublt	r3, r4, r3
 800a54e:	bfb4      	ite	lt
 800a550:	18d2      	addlt	r2, r2, r3
 800a552:	1b1c      	subge	r4, r3, r4
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	bfbc      	itt	lt
 800a558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a55a:	2400      	movlt	r4, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfb5      	itete	lt
 800a560:	eba8 0603 	sublt.w	r6, r8, r3
 800a564:	9b07      	ldrge	r3, [sp, #28]
 800a566:	2300      	movlt	r3, #0
 800a568:	4646      	movge	r6, r8
 800a56a:	e730      	b.n	800a3ce <_dtoa_r+0x71e>
 800a56c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a56e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a570:	4646      	mov	r6, r8
 800a572:	e735      	b.n	800a3e0 <_dtoa_r+0x730>
 800a574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a576:	e75c      	b.n	800a432 <_dtoa_r+0x782>
 800a578:	2300      	movs	r3, #0
 800a57a:	e788      	b.n	800a48e <_dtoa_r+0x7de>
 800a57c:	3fe00000 	.word	0x3fe00000
 800a580:	40240000 	.word	0x40240000
 800a584:	40140000 	.word	0x40140000
 800a588:	9b02      	ldr	r3, [sp, #8]
 800a58a:	e780      	b.n	800a48e <_dtoa_r+0x7de>
 800a58c:	2300      	movs	r3, #0
 800a58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a590:	e782      	b.n	800a498 <_dtoa_r+0x7e8>
 800a592:	d099      	beq.n	800a4c8 <_dtoa_r+0x818>
 800a594:	9a08      	ldr	r2, [sp, #32]
 800a596:	331c      	adds	r3, #28
 800a598:	441a      	add	r2, r3
 800a59a:	4498      	add	r8, r3
 800a59c:	441e      	add	r6, r3
 800a59e:	9208      	str	r2, [sp, #32]
 800a5a0:	e792      	b.n	800a4c8 <_dtoa_r+0x818>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	e7f6      	b.n	800a594 <_dtoa_r+0x8e4>
 800a5a6:	9b07      	ldr	r3, [sp, #28]
 800a5a8:	9704      	str	r7, [sp, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dc20      	bgt.n	800a5f0 <_dtoa_r+0x940>
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	dd1e      	ble.n	800a5f4 <_dtoa_r+0x944>
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f47f aec0 	bne.w	800a33e <_dtoa_r+0x68e>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	4658      	mov	r0, fp
 800a5c4:	f000 fa9a 	bl	800aafc <__multadd>
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4648      	mov	r0, r9
 800a5ce:	f000 fcad 	bl	800af2c <__mcmp>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f77f aeb3 	ble.w	800a33e <_dtoa_r+0x68e>
 800a5d8:	4656      	mov	r6, sl
 800a5da:	2331      	movs	r3, #49	@ 0x31
 800a5dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e0:	9b04      	ldr	r3, [sp, #16]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	9304      	str	r3, [sp, #16]
 800a5e6:	e6ae      	b.n	800a346 <_dtoa_r+0x696>
 800a5e8:	9c07      	ldr	r4, [sp, #28]
 800a5ea:	9704      	str	r7, [sp, #16]
 800a5ec:	4625      	mov	r5, r4
 800a5ee:	e7f3      	b.n	800a5d8 <_dtoa_r+0x928>
 800a5f0:	9b07      	ldr	r3, [sp, #28]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8104 	beq.w	800a804 <_dtoa_r+0xb54>
 800a5fc:	2e00      	cmp	r6, #0
 800a5fe:	dd05      	ble.n	800a60c <_dtoa_r+0x95c>
 800a600:	4629      	mov	r1, r5
 800a602:	4632      	mov	r2, r6
 800a604:	4658      	mov	r0, fp
 800a606:	f000 fc25 	bl	800ae54 <__lshift>
 800a60a:	4605      	mov	r5, r0
 800a60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05a      	beq.n	800a6c8 <_dtoa_r+0xa18>
 800a612:	6869      	ldr	r1, [r5, #4]
 800a614:	4658      	mov	r0, fp
 800a616:	f000 fa0f 	bl	800aa38 <_Balloc>
 800a61a:	4606      	mov	r6, r0
 800a61c:	b928      	cbnz	r0, 800a62a <_dtoa_r+0x97a>
 800a61e:	4b84      	ldr	r3, [pc, #528]	@ (800a830 <_dtoa_r+0xb80>)
 800a620:	4602      	mov	r2, r0
 800a622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a626:	f7ff bb5a 	b.w	8009cde <_dtoa_r+0x2e>
 800a62a:	692a      	ldr	r2, [r5, #16]
 800a62c:	3202      	adds	r2, #2
 800a62e:	0092      	lsls	r2, r2, #2
 800a630:	f105 010c 	add.w	r1, r5, #12
 800a634:	300c      	adds	r0, #12
 800a636:	f001 f813 	bl	800b660 <memcpy>
 800a63a:	2201      	movs	r2, #1
 800a63c:	4631      	mov	r1, r6
 800a63e:	4658      	mov	r0, fp
 800a640:	f000 fc08 	bl	800ae54 <__lshift>
 800a644:	f10a 0301 	add.w	r3, sl, #1
 800a648:	9307      	str	r3, [sp, #28]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	4453      	add	r3, sl
 800a64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	462f      	mov	r7, r5
 800a658:	930a      	str	r3, [sp, #40]	@ 0x28
 800a65a:	4605      	mov	r5, r0
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	4621      	mov	r1, r4
 800a660:	3b01      	subs	r3, #1
 800a662:	4648      	mov	r0, r9
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	f7ff fa98 	bl	8009b9a <quorem>
 800a66a:	4639      	mov	r1, r7
 800a66c:	9002      	str	r0, [sp, #8]
 800a66e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a672:	4648      	mov	r0, r9
 800a674:	f000 fc5a 	bl	800af2c <__mcmp>
 800a678:	462a      	mov	r2, r5
 800a67a:	9008      	str	r0, [sp, #32]
 800a67c:	4621      	mov	r1, r4
 800a67e:	4658      	mov	r0, fp
 800a680:	f000 fc70 	bl	800af64 <__mdiff>
 800a684:	68c2      	ldr	r2, [r0, #12]
 800a686:	4606      	mov	r6, r0
 800a688:	bb02      	cbnz	r2, 800a6cc <_dtoa_r+0xa1c>
 800a68a:	4601      	mov	r1, r0
 800a68c:	4648      	mov	r0, r9
 800a68e:	f000 fc4d 	bl	800af2c <__mcmp>
 800a692:	4602      	mov	r2, r0
 800a694:	4631      	mov	r1, r6
 800a696:	4658      	mov	r0, fp
 800a698:	920e      	str	r2, [sp, #56]	@ 0x38
 800a69a:	f000 fa0d 	bl	800aab8 <_Bfree>
 800a69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6a2:	9e07      	ldr	r6, [sp, #28]
 800a6a4:	ea43 0102 	orr.w	r1, r3, r2
 800a6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6aa:	4319      	orrs	r1, r3
 800a6ac:	d110      	bne.n	800a6d0 <_dtoa_r+0xa20>
 800a6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6b2:	d029      	beq.n	800a708 <_dtoa_r+0xa58>
 800a6b4:	9b08      	ldr	r3, [sp, #32]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd02      	ble.n	800a6c0 <_dtoa_r+0xa10>
 800a6ba:	9b02      	ldr	r3, [sp, #8]
 800a6bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a6c0:	9b00      	ldr	r3, [sp, #0]
 800a6c2:	f883 8000 	strb.w	r8, [r3]
 800a6c6:	e63f      	b.n	800a348 <_dtoa_r+0x698>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	e7bb      	b.n	800a644 <_dtoa_r+0x994>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	e7e1      	b.n	800a694 <_dtoa_r+0x9e4>
 800a6d0:	9b08      	ldr	r3, [sp, #32]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db04      	blt.n	800a6e0 <_dtoa_r+0xa30>
 800a6d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6d8:	430b      	orrs	r3, r1
 800a6da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6dc:	430b      	orrs	r3, r1
 800a6de:	d120      	bne.n	800a722 <_dtoa_r+0xa72>
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	dded      	ble.n	800a6c0 <_dtoa_r+0xa10>
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4658      	mov	r0, fp
 800a6ea:	f000 fbb3 	bl	800ae54 <__lshift>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	f000 fc1b 	bl	800af2c <__mcmp>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	dc03      	bgt.n	800a702 <_dtoa_r+0xa52>
 800a6fa:	d1e1      	bne.n	800a6c0 <_dtoa_r+0xa10>
 800a6fc:	f018 0f01 	tst.w	r8, #1
 800a700:	d0de      	beq.n	800a6c0 <_dtoa_r+0xa10>
 800a702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a706:	d1d8      	bne.n	800a6ba <_dtoa_r+0xa0a>
 800a708:	9a00      	ldr	r2, [sp, #0]
 800a70a:	2339      	movs	r3, #57	@ 0x39
 800a70c:	7013      	strb	r3, [r2, #0]
 800a70e:	4633      	mov	r3, r6
 800a710:	461e      	mov	r6, r3
 800a712:	3b01      	subs	r3, #1
 800a714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a718:	2a39      	cmp	r2, #57	@ 0x39
 800a71a:	d052      	beq.n	800a7c2 <_dtoa_r+0xb12>
 800a71c:	3201      	adds	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e612      	b.n	800a348 <_dtoa_r+0x698>
 800a722:	2a00      	cmp	r2, #0
 800a724:	dd07      	ble.n	800a736 <_dtoa_r+0xa86>
 800a726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a72a:	d0ed      	beq.n	800a708 <_dtoa_r+0xa58>
 800a72c:	9a00      	ldr	r2, [sp, #0]
 800a72e:	f108 0301 	add.w	r3, r8, #1
 800a732:	7013      	strb	r3, [r2, #0]
 800a734:	e608      	b.n	800a348 <_dtoa_r+0x698>
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	9a07      	ldr	r2, [sp, #28]
 800a73a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a740:	4293      	cmp	r3, r2
 800a742:	d028      	beq.n	800a796 <_dtoa_r+0xae6>
 800a744:	4649      	mov	r1, r9
 800a746:	2300      	movs	r3, #0
 800a748:	220a      	movs	r2, #10
 800a74a:	4658      	mov	r0, fp
 800a74c:	f000 f9d6 	bl	800aafc <__multadd>
 800a750:	42af      	cmp	r7, r5
 800a752:	4681      	mov	r9, r0
 800a754:	f04f 0300 	mov.w	r3, #0
 800a758:	f04f 020a 	mov.w	r2, #10
 800a75c:	4639      	mov	r1, r7
 800a75e:	4658      	mov	r0, fp
 800a760:	d107      	bne.n	800a772 <_dtoa_r+0xac2>
 800a762:	f000 f9cb 	bl	800aafc <__multadd>
 800a766:	4607      	mov	r7, r0
 800a768:	4605      	mov	r5, r0
 800a76a:	9b07      	ldr	r3, [sp, #28]
 800a76c:	3301      	adds	r3, #1
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	e774      	b.n	800a65c <_dtoa_r+0x9ac>
 800a772:	f000 f9c3 	bl	800aafc <__multadd>
 800a776:	4629      	mov	r1, r5
 800a778:	4607      	mov	r7, r0
 800a77a:	2300      	movs	r3, #0
 800a77c:	220a      	movs	r2, #10
 800a77e:	4658      	mov	r0, fp
 800a780:	f000 f9bc 	bl	800aafc <__multadd>
 800a784:	4605      	mov	r5, r0
 800a786:	e7f0      	b.n	800a76a <_dtoa_r+0xaba>
 800a788:	9b00      	ldr	r3, [sp, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfcc      	ite	gt
 800a78e:	461e      	movgt	r6, r3
 800a790:	2601      	movle	r6, #1
 800a792:	4456      	add	r6, sl
 800a794:	2700      	movs	r7, #0
 800a796:	4649      	mov	r1, r9
 800a798:	2201      	movs	r2, #1
 800a79a:	4658      	mov	r0, fp
 800a79c:	f000 fb5a 	bl	800ae54 <__lshift>
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4681      	mov	r9, r0
 800a7a4:	f000 fbc2 	bl	800af2c <__mcmp>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	dcb0      	bgt.n	800a70e <_dtoa_r+0xa5e>
 800a7ac:	d102      	bne.n	800a7b4 <_dtoa_r+0xb04>
 800a7ae:	f018 0f01 	tst.w	r8, #1
 800a7b2:	d1ac      	bne.n	800a70e <_dtoa_r+0xa5e>
 800a7b4:	4633      	mov	r3, r6
 800a7b6:	461e      	mov	r6, r3
 800a7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7bc:	2a30      	cmp	r2, #48	@ 0x30
 800a7be:	d0fa      	beq.n	800a7b6 <_dtoa_r+0xb06>
 800a7c0:	e5c2      	b.n	800a348 <_dtoa_r+0x698>
 800a7c2:	459a      	cmp	sl, r3
 800a7c4:	d1a4      	bne.n	800a710 <_dtoa_r+0xa60>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	2331      	movs	r3, #49	@ 0x31
 800a7ce:	f88a 3000 	strb.w	r3, [sl]
 800a7d2:	e5b9      	b.n	800a348 <_dtoa_r+0x698>
 800a7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a834 <_dtoa_r+0xb84>
 800a7da:	b11b      	cbz	r3, 800a7e4 <_dtoa_r+0xb34>
 800a7dc:	f10a 0308 	add.w	r3, sl, #8
 800a7e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	b019      	add	sp, #100	@ 0x64
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	f77f ae37 	ble.w	800a462 <_dtoa_r+0x7b2>
 800a7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e655      	b.n	800a4a8 <_dtoa_r+0x7f8>
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f77f aed6 	ble.w	800a5b0 <_dtoa_r+0x900>
 800a804:	4656      	mov	r6, sl
 800a806:	4621      	mov	r1, r4
 800a808:	4648      	mov	r0, r9
 800a80a:	f7ff f9c6 	bl	8009b9a <quorem>
 800a80e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a812:	f806 8b01 	strb.w	r8, [r6], #1
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	eba6 020a 	sub.w	r2, r6, sl
 800a81c:	4293      	cmp	r3, r2
 800a81e:	ddb3      	ble.n	800a788 <_dtoa_r+0xad8>
 800a820:	4649      	mov	r1, r9
 800a822:	2300      	movs	r3, #0
 800a824:	220a      	movs	r2, #10
 800a826:	4658      	mov	r0, fp
 800a828:	f000 f968 	bl	800aafc <__multadd>
 800a82c:	4681      	mov	r9, r0
 800a82e:	e7ea      	b.n	800a806 <_dtoa_r+0xb56>
 800a830:	0800ba28 	.word	0x0800ba28
 800a834:	0800b9ac 	.word	0x0800b9ac

0800a838 <_free_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4605      	mov	r5, r0
 800a83c:	2900      	cmp	r1, #0
 800a83e:	d041      	beq.n	800a8c4 <_free_r+0x8c>
 800a840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a844:	1f0c      	subs	r4, r1, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfb8      	it	lt
 800a84a:	18e4      	addlt	r4, r4, r3
 800a84c:	f000 f8e8 	bl	800aa20 <__malloc_lock>
 800a850:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c8 <_free_r+0x90>)
 800a852:	6813      	ldr	r3, [r2, #0]
 800a854:	b933      	cbnz	r3, 800a864 <_free_r+0x2c>
 800a856:	6063      	str	r3, [r4, #4]
 800a858:	6014      	str	r4, [r2, #0]
 800a85a:	4628      	mov	r0, r5
 800a85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a860:	f000 b8e4 	b.w	800aa2c <__malloc_unlock>
 800a864:	42a3      	cmp	r3, r4
 800a866:	d908      	bls.n	800a87a <_free_r+0x42>
 800a868:	6820      	ldr	r0, [r4, #0]
 800a86a:	1821      	adds	r1, r4, r0
 800a86c:	428b      	cmp	r3, r1
 800a86e:	bf01      	itttt	eq
 800a870:	6819      	ldreq	r1, [r3, #0]
 800a872:	685b      	ldreq	r3, [r3, #4]
 800a874:	1809      	addeq	r1, r1, r0
 800a876:	6021      	streq	r1, [r4, #0]
 800a878:	e7ed      	b.n	800a856 <_free_r+0x1e>
 800a87a:	461a      	mov	r2, r3
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	b10b      	cbz	r3, 800a884 <_free_r+0x4c>
 800a880:	42a3      	cmp	r3, r4
 800a882:	d9fa      	bls.n	800a87a <_free_r+0x42>
 800a884:	6811      	ldr	r1, [r2, #0]
 800a886:	1850      	adds	r0, r2, r1
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d10b      	bne.n	800a8a4 <_free_r+0x6c>
 800a88c:	6820      	ldr	r0, [r4, #0]
 800a88e:	4401      	add	r1, r0
 800a890:	1850      	adds	r0, r2, r1
 800a892:	4283      	cmp	r3, r0
 800a894:	6011      	str	r1, [r2, #0]
 800a896:	d1e0      	bne.n	800a85a <_free_r+0x22>
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	6053      	str	r3, [r2, #4]
 800a89e:	4408      	add	r0, r1
 800a8a0:	6010      	str	r0, [r2, #0]
 800a8a2:	e7da      	b.n	800a85a <_free_r+0x22>
 800a8a4:	d902      	bls.n	800a8ac <_free_r+0x74>
 800a8a6:	230c      	movs	r3, #12
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	e7d6      	b.n	800a85a <_free_r+0x22>
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	1821      	adds	r1, r4, r0
 800a8b0:	428b      	cmp	r3, r1
 800a8b2:	bf04      	itt	eq
 800a8b4:	6819      	ldreq	r1, [r3, #0]
 800a8b6:	685b      	ldreq	r3, [r3, #4]
 800a8b8:	6063      	str	r3, [r4, #4]
 800a8ba:	bf04      	itt	eq
 800a8bc:	1809      	addeq	r1, r1, r0
 800a8be:	6021      	streq	r1, [r4, #0]
 800a8c0:	6054      	str	r4, [r2, #4]
 800a8c2:	e7ca      	b.n	800a85a <_free_r+0x22>
 800a8c4:	bd38      	pop	{r3, r4, r5, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000f90 	.word	0x20000f90

0800a8cc <malloc>:
 800a8cc:	4b02      	ldr	r3, [pc, #8]	@ (800a8d8 <malloc+0xc>)
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	f000 b825 	b.w	800a920 <_malloc_r>
 800a8d6:	bf00      	nop
 800a8d8:	20000194 	.word	0x20000194

0800a8dc <sbrk_aligned>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4e0f      	ldr	r6, [pc, #60]	@ (800a91c <sbrk_aligned+0x40>)
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	6831      	ldr	r1, [r6, #0]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	b911      	cbnz	r1, 800a8ee <sbrk_aligned+0x12>
 800a8e8:	f000 feaa 	bl	800b640 <_sbrk_r>
 800a8ec:	6030      	str	r0, [r6, #0]
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 fea5 	bl	800b640 <_sbrk_r>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d103      	bne.n	800a902 <sbrk_aligned+0x26>
 800a8fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a8fe:	4620      	mov	r0, r4
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	1cc4      	adds	r4, r0, #3
 800a904:	f024 0403 	bic.w	r4, r4, #3
 800a908:	42a0      	cmp	r0, r4
 800a90a:	d0f8      	beq.n	800a8fe <sbrk_aligned+0x22>
 800a90c:	1a21      	subs	r1, r4, r0
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 fe96 	bl	800b640 <_sbrk_r>
 800a914:	3001      	adds	r0, #1
 800a916:	d1f2      	bne.n	800a8fe <sbrk_aligned+0x22>
 800a918:	e7ef      	b.n	800a8fa <sbrk_aligned+0x1e>
 800a91a:	bf00      	nop
 800a91c:	20000f8c 	.word	0x20000f8c

0800a920 <_malloc_r>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	1ccd      	adds	r5, r1, #3
 800a926:	f025 0503 	bic.w	r5, r5, #3
 800a92a:	3508      	adds	r5, #8
 800a92c:	2d0c      	cmp	r5, #12
 800a92e:	bf38      	it	cc
 800a930:	250c      	movcc	r5, #12
 800a932:	2d00      	cmp	r5, #0
 800a934:	4606      	mov	r6, r0
 800a936:	db01      	blt.n	800a93c <_malloc_r+0x1c>
 800a938:	42a9      	cmp	r1, r5
 800a93a:	d904      	bls.n	800a946 <_malloc_r+0x26>
 800a93c:	230c      	movs	r3, #12
 800a93e:	6033      	str	r3, [r6, #0]
 800a940:	2000      	movs	r0, #0
 800a942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa1c <_malloc_r+0xfc>
 800a94a:	f000 f869 	bl	800aa20 <__malloc_lock>
 800a94e:	f8d8 3000 	ldr.w	r3, [r8]
 800a952:	461c      	mov	r4, r3
 800a954:	bb44      	cbnz	r4, 800a9a8 <_malloc_r+0x88>
 800a956:	4629      	mov	r1, r5
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff ffbf 	bl	800a8dc <sbrk_aligned>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	4604      	mov	r4, r0
 800a962:	d158      	bne.n	800aa16 <_malloc_r+0xf6>
 800a964:	f8d8 4000 	ldr.w	r4, [r8]
 800a968:	4627      	mov	r7, r4
 800a96a:	2f00      	cmp	r7, #0
 800a96c:	d143      	bne.n	800a9f6 <_malloc_r+0xd6>
 800a96e:	2c00      	cmp	r4, #0
 800a970:	d04b      	beq.n	800aa0a <_malloc_r+0xea>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	4639      	mov	r1, r7
 800a976:	4630      	mov	r0, r6
 800a978:	eb04 0903 	add.w	r9, r4, r3
 800a97c:	f000 fe60 	bl	800b640 <_sbrk_r>
 800a980:	4581      	cmp	r9, r0
 800a982:	d142      	bne.n	800aa0a <_malloc_r+0xea>
 800a984:	6821      	ldr	r1, [r4, #0]
 800a986:	1a6d      	subs	r5, r5, r1
 800a988:	4629      	mov	r1, r5
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ffa6 	bl	800a8dc <sbrk_aligned>
 800a990:	3001      	adds	r0, #1
 800a992:	d03a      	beq.n	800aa0a <_malloc_r+0xea>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	442b      	add	r3, r5
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	f8d8 3000 	ldr.w	r3, [r8]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	bb62      	cbnz	r2, 800a9fc <_malloc_r+0xdc>
 800a9a2:	f8c8 7000 	str.w	r7, [r8]
 800a9a6:	e00f      	b.n	800a9c8 <_malloc_r+0xa8>
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	1b52      	subs	r2, r2, r5
 800a9ac:	d420      	bmi.n	800a9f0 <_malloc_r+0xd0>
 800a9ae:	2a0b      	cmp	r2, #11
 800a9b0:	d917      	bls.n	800a9e2 <_malloc_r+0xc2>
 800a9b2:	1961      	adds	r1, r4, r5
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	6025      	str	r5, [r4, #0]
 800a9b8:	bf18      	it	ne
 800a9ba:	6059      	strne	r1, [r3, #4]
 800a9bc:	6863      	ldr	r3, [r4, #4]
 800a9be:	bf08      	it	eq
 800a9c0:	f8c8 1000 	streq.w	r1, [r8]
 800a9c4:	5162      	str	r2, [r4, r5]
 800a9c6:	604b      	str	r3, [r1, #4]
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f000 f82f 	bl	800aa2c <__malloc_unlock>
 800a9ce:	f104 000b 	add.w	r0, r4, #11
 800a9d2:	1d23      	adds	r3, r4, #4
 800a9d4:	f020 0007 	bic.w	r0, r0, #7
 800a9d8:	1ac2      	subs	r2, r0, r3
 800a9da:	bf1c      	itt	ne
 800a9dc:	1a1b      	subne	r3, r3, r0
 800a9de:	50a3      	strne	r3, [r4, r2]
 800a9e0:	e7af      	b.n	800a942 <_malloc_r+0x22>
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	bf0c      	ite	eq
 800a9e8:	f8c8 2000 	streq.w	r2, [r8]
 800a9ec:	605a      	strne	r2, [r3, #4]
 800a9ee:	e7eb      	b.n	800a9c8 <_malloc_r+0xa8>
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	6864      	ldr	r4, [r4, #4]
 800a9f4:	e7ae      	b.n	800a954 <_malloc_r+0x34>
 800a9f6:	463c      	mov	r4, r7
 800a9f8:	687f      	ldr	r7, [r7, #4]
 800a9fa:	e7b6      	b.n	800a96a <_malloc_r+0x4a>
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	d1fb      	bne.n	800a9fc <_malloc_r+0xdc>
 800aa04:	2300      	movs	r3, #0
 800aa06:	6053      	str	r3, [r2, #4]
 800aa08:	e7de      	b.n	800a9c8 <_malloc_r+0xa8>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	6033      	str	r3, [r6, #0]
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f80c 	bl	800aa2c <__malloc_unlock>
 800aa14:	e794      	b.n	800a940 <_malloc_r+0x20>
 800aa16:	6005      	str	r5, [r0, #0]
 800aa18:	e7d6      	b.n	800a9c8 <_malloc_r+0xa8>
 800aa1a:	bf00      	nop
 800aa1c:	20000f90 	.word	0x20000f90

0800aa20 <__malloc_lock>:
 800aa20:	4801      	ldr	r0, [pc, #4]	@ (800aa28 <__malloc_lock+0x8>)
 800aa22:	f7ff b8b8 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 800aa26:	bf00      	nop
 800aa28:	20000f88 	.word	0x20000f88

0800aa2c <__malloc_unlock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	@ (800aa34 <__malloc_unlock+0x8>)
 800aa2e:	f7ff b8b3 	b.w	8009b98 <__retarget_lock_release_recursive>
 800aa32:	bf00      	nop
 800aa34:	20000f88 	.word	0x20000f88

0800aa38 <_Balloc>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	69c6      	ldr	r6, [r0, #28]
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	460d      	mov	r5, r1
 800aa40:	b976      	cbnz	r6, 800aa60 <_Balloc+0x28>
 800aa42:	2010      	movs	r0, #16
 800aa44:	f7ff ff42 	bl	800a8cc <malloc>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	61e0      	str	r0, [r4, #28]
 800aa4c:	b920      	cbnz	r0, 800aa58 <_Balloc+0x20>
 800aa4e:	4b18      	ldr	r3, [pc, #96]	@ (800aab0 <_Balloc+0x78>)
 800aa50:	4818      	ldr	r0, [pc, #96]	@ (800aab4 <_Balloc+0x7c>)
 800aa52:	216b      	movs	r1, #107	@ 0x6b
 800aa54:	f000 fe12 	bl	800b67c <__assert_func>
 800aa58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa5c:	6006      	str	r6, [r0, #0]
 800aa5e:	60c6      	str	r6, [r0, #12]
 800aa60:	69e6      	ldr	r6, [r4, #28]
 800aa62:	68f3      	ldr	r3, [r6, #12]
 800aa64:	b183      	cbz	r3, 800aa88 <_Balloc+0x50>
 800aa66:	69e3      	ldr	r3, [r4, #28]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa6e:	b9b8      	cbnz	r0, 800aaa0 <_Balloc+0x68>
 800aa70:	2101      	movs	r1, #1
 800aa72:	fa01 f605 	lsl.w	r6, r1, r5
 800aa76:	1d72      	adds	r2, r6, #5
 800aa78:	0092      	lsls	r2, r2, #2
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fe1c 	bl	800b6b8 <_calloc_r>
 800aa80:	b160      	cbz	r0, 800aa9c <_Balloc+0x64>
 800aa82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa86:	e00e      	b.n	800aaa6 <_Balloc+0x6e>
 800aa88:	2221      	movs	r2, #33	@ 0x21
 800aa8a:	2104      	movs	r1, #4
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fe13 	bl	800b6b8 <_calloc_r>
 800aa92:	69e3      	ldr	r3, [r4, #28]
 800aa94:	60f0      	str	r0, [r6, #12]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e4      	bne.n	800aa66 <_Balloc+0x2e>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	6802      	ldr	r2, [r0, #0]
 800aaa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaac:	e7f7      	b.n	800aa9e <_Balloc+0x66>
 800aaae:	bf00      	nop
 800aab0:	0800b9b9 	.word	0x0800b9b9
 800aab4:	0800ba39 	.word	0x0800ba39

0800aab8 <_Bfree>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	69c6      	ldr	r6, [r0, #28]
 800aabc:	4605      	mov	r5, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	b976      	cbnz	r6, 800aae0 <_Bfree+0x28>
 800aac2:	2010      	movs	r0, #16
 800aac4:	f7ff ff02 	bl	800a8cc <malloc>
 800aac8:	4602      	mov	r2, r0
 800aaca:	61e8      	str	r0, [r5, #28]
 800aacc:	b920      	cbnz	r0, 800aad8 <_Bfree+0x20>
 800aace:	4b09      	ldr	r3, [pc, #36]	@ (800aaf4 <_Bfree+0x3c>)
 800aad0:	4809      	ldr	r0, [pc, #36]	@ (800aaf8 <_Bfree+0x40>)
 800aad2:	218f      	movs	r1, #143	@ 0x8f
 800aad4:	f000 fdd2 	bl	800b67c <__assert_func>
 800aad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aadc:	6006      	str	r6, [r0, #0]
 800aade:	60c6      	str	r6, [r0, #12]
 800aae0:	b13c      	cbz	r4, 800aaf2 <_Bfree+0x3a>
 800aae2:	69eb      	ldr	r3, [r5, #28]
 800aae4:	6862      	ldr	r2, [r4, #4]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaec:	6021      	str	r1, [r4, #0]
 800aaee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	0800b9b9 	.word	0x0800b9b9
 800aaf8:	0800ba39 	.word	0x0800ba39

0800aafc <__multadd>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	690d      	ldr	r5, [r1, #16]
 800ab02:	4607      	mov	r7, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	461e      	mov	r6, r3
 800ab08:	f101 0c14 	add.w	ip, r1, #20
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab12:	b299      	uxth	r1, r3
 800ab14:	fb02 6101 	mla	r1, r2, r1, r6
 800ab18:	0c1e      	lsrs	r6, r3, #16
 800ab1a:	0c0b      	lsrs	r3, r1, #16
 800ab1c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab20:	b289      	uxth	r1, r1
 800ab22:	3001      	adds	r0, #1
 800ab24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab28:	4285      	cmp	r5, r0
 800ab2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab32:	dcec      	bgt.n	800ab0e <__multadd+0x12>
 800ab34:	b30e      	cbz	r6, 800ab7a <__multadd+0x7e>
 800ab36:	68a3      	ldr	r3, [r4, #8]
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	dc19      	bgt.n	800ab70 <__multadd+0x74>
 800ab3c:	6861      	ldr	r1, [r4, #4]
 800ab3e:	4638      	mov	r0, r7
 800ab40:	3101      	adds	r1, #1
 800ab42:	f7ff ff79 	bl	800aa38 <_Balloc>
 800ab46:	4680      	mov	r8, r0
 800ab48:	b928      	cbnz	r0, 800ab56 <__multadd+0x5a>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab80 <__multadd+0x84>)
 800ab4e:	480d      	ldr	r0, [pc, #52]	@ (800ab84 <__multadd+0x88>)
 800ab50:	21ba      	movs	r1, #186	@ 0xba
 800ab52:	f000 fd93 	bl	800b67c <__assert_func>
 800ab56:	6922      	ldr	r2, [r4, #16]
 800ab58:	3202      	adds	r2, #2
 800ab5a:	f104 010c 	add.w	r1, r4, #12
 800ab5e:	0092      	lsls	r2, r2, #2
 800ab60:	300c      	adds	r0, #12
 800ab62:	f000 fd7d 	bl	800b660 <memcpy>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7ff ffa5 	bl	800aab8 <_Bfree>
 800ab6e:	4644      	mov	r4, r8
 800ab70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab74:	3501      	adds	r5, #1
 800ab76:	615e      	str	r6, [r3, #20]
 800ab78:	6125      	str	r5, [r4, #16]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab80:	0800ba28 	.word	0x0800ba28
 800ab84:	0800ba39 	.word	0x0800ba39

0800ab88 <__hi0bits>:
 800ab88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	bf36      	itet	cc
 800ab90:	0403      	lslcc	r3, r0, #16
 800ab92:	2000      	movcs	r0, #0
 800ab94:	2010      	movcc	r0, #16
 800ab96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab9a:	bf3c      	itt	cc
 800ab9c:	021b      	lslcc	r3, r3, #8
 800ab9e:	3008      	addcc	r0, #8
 800aba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aba4:	bf3c      	itt	cc
 800aba6:	011b      	lslcc	r3, r3, #4
 800aba8:	3004      	addcc	r0, #4
 800abaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abae:	bf3c      	itt	cc
 800abb0:	009b      	lslcc	r3, r3, #2
 800abb2:	3002      	addcc	r0, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	db05      	blt.n	800abc4 <__hi0bits+0x3c>
 800abb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abbc:	f100 0001 	add.w	r0, r0, #1
 800abc0:	bf08      	it	eq
 800abc2:	2020      	moveq	r0, #32
 800abc4:	4770      	bx	lr

0800abc6 <__lo0bits>:
 800abc6:	6803      	ldr	r3, [r0, #0]
 800abc8:	4602      	mov	r2, r0
 800abca:	f013 0007 	ands.w	r0, r3, #7
 800abce:	d00b      	beq.n	800abe8 <__lo0bits+0x22>
 800abd0:	07d9      	lsls	r1, r3, #31
 800abd2:	d421      	bmi.n	800ac18 <__lo0bits+0x52>
 800abd4:	0798      	lsls	r0, r3, #30
 800abd6:	bf49      	itett	mi
 800abd8:	085b      	lsrmi	r3, r3, #1
 800abda:	089b      	lsrpl	r3, r3, #2
 800abdc:	2001      	movmi	r0, #1
 800abde:	6013      	strmi	r3, [r2, #0]
 800abe0:	bf5c      	itt	pl
 800abe2:	6013      	strpl	r3, [r2, #0]
 800abe4:	2002      	movpl	r0, #2
 800abe6:	4770      	bx	lr
 800abe8:	b299      	uxth	r1, r3
 800abea:	b909      	cbnz	r1, 800abf0 <__lo0bits+0x2a>
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	2010      	movs	r0, #16
 800abf0:	b2d9      	uxtb	r1, r3
 800abf2:	b909      	cbnz	r1, 800abf8 <__lo0bits+0x32>
 800abf4:	3008      	adds	r0, #8
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	0719      	lsls	r1, r3, #28
 800abfa:	bf04      	itt	eq
 800abfc:	091b      	lsreq	r3, r3, #4
 800abfe:	3004      	addeq	r0, #4
 800ac00:	0799      	lsls	r1, r3, #30
 800ac02:	bf04      	itt	eq
 800ac04:	089b      	lsreq	r3, r3, #2
 800ac06:	3002      	addeq	r0, #2
 800ac08:	07d9      	lsls	r1, r3, #31
 800ac0a:	d403      	bmi.n	800ac14 <__lo0bits+0x4e>
 800ac0c:	085b      	lsrs	r3, r3, #1
 800ac0e:	f100 0001 	add.w	r0, r0, #1
 800ac12:	d003      	beq.n	800ac1c <__lo0bits+0x56>
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	4770      	bx	lr
 800ac18:	2000      	movs	r0, #0
 800ac1a:	4770      	bx	lr
 800ac1c:	2020      	movs	r0, #32
 800ac1e:	4770      	bx	lr

0800ac20 <__i2b>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	2101      	movs	r1, #1
 800ac26:	f7ff ff07 	bl	800aa38 <_Balloc>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <__i2b+0x1a>
 800ac2e:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <__i2b+0x24>)
 800ac30:	4805      	ldr	r0, [pc, #20]	@ (800ac48 <__i2b+0x28>)
 800ac32:	f240 1145 	movw	r1, #325	@ 0x145
 800ac36:	f000 fd21 	bl	800b67c <__assert_func>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	6144      	str	r4, [r0, #20]
 800ac3e:	6103      	str	r3, [r0, #16]
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	bf00      	nop
 800ac44:	0800ba28 	.word	0x0800ba28
 800ac48:	0800ba39 	.word	0x0800ba39

0800ac4c <__multiply>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	4614      	mov	r4, r2
 800ac52:	690a      	ldr	r2, [r1, #16]
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	bfa8      	it	ge
 800ac5a:	4623      	movge	r3, r4
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	bfa4      	itt	ge
 800ac60:	460c      	movge	r4, r1
 800ac62:	461f      	movge	r7, r3
 800ac64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac6c:	68a3      	ldr	r3, [r4, #8]
 800ac6e:	6861      	ldr	r1, [r4, #4]
 800ac70:	eb0a 0609 	add.w	r6, sl, r9
 800ac74:	42b3      	cmp	r3, r6
 800ac76:	b085      	sub	sp, #20
 800ac78:	bfb8      	it	lt
 800ac7a:	3101      	addlt	r1, #1
 800ac7c:	f7ff fedc 	bl	800aa38 <_Balloc>
 800ac80:	b930      	cbnz	r0, 800ac90 <__multiply+0x44>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4b44      	ldr	r3, [pc, #272]	@ (800ad98 <__multiply+0x14c>)
 800ac86:	4845      	ldr	r0, [pc, #276]	@ (800ad9c <__multiply+0x150>)
 800ac88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac8c:	f000 fcf6 	bl	800b67c <__assert_func>
 800ac90:	f100 0514 	add.w	r5, r0, #20
 800ac94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac98:	462b      	mov	r3, r5
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4543      	cmp	r3, r8
 800ac9e:	d321      	bcc.n	800ace4 <__multiply+0x98>
 800aca0:	f107 0114 	add.w	r1, r7, #20
 800aca4:	f104 0214 	add.w	r2, r4, #20
 800aca8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800acac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	1b13      	subs	r3, r2, r4
 800acb4:	3b15      	subs	r3, #21
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	3304      	adds	r3, #4
 800acbc:	f104 0715 	add.w	r7, r4, #21
 800acc0:	42ba      	cmp	r2, r7
 800acc2:	bf38      	it	cc
 800acc4:	2304      	movcc	r3, #4
 800acc6:	9301      	str	r3, [sp, #4]
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	9103      	str	r1, [sp, #12]
 800accc:	428b      	cmp	r3, r1
 800acce:	d80c      	bhi.n	800acea <__multiply+0x9e>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	dd03      	ble.n	800acdc <__multiply+0x90>
 800acd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d05b      	beq.n	800ad94 <__multiply+0x148>
 800acdc:	6106      	str	r6, [r0, #16]
 800acde:	b005      	add	sp, #20
 800ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	f843 2b04 	str.w	r2, [r3], #4
 800ace8:	e7d8      	b.n	800ac9c <__multiply+0x50>
 800acea:	f8b1 a000 	ldrh.w	sl, [r1]
 800acee:	f1ba 0f00 	cmp.w	sl, #0
 800acf2:	d024      	beq.n	800ad3e <__multiply+0xf2>
 800acf4:	f104 0e14 	add.w	lr, r4, #20
 800acf8:	46a9      	mov	r9, r5
 800acfa:	f04f 0c00 	mov.w	ip, #0
 800acfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad02:	f8d9 3000 	ldr.w	r3, [r9]
 800ad06:	fa1f fb87 	uxth.w	fp, r7
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad14:	f8d9 7000 	ldr.w	r7, [r9]
 800ad18:	4463      	add	r3, ip
 800ad1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad2c:	4572      	cmp	r2, lr
 800ad2e:	f849 3b04 	str.w	r3, [r9], #4
 800ad32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad36:	d8e2      	bhi.n	800acfe <__multiply+0xb2>
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	f845 c003 	str.w	ip, [r5, r3]
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad44:	3104      	adds	r1, #4
 800ad46:	f1b9 0f00 	cmp.w	r9, #0
 800ad4a:	d021      	beq.n	800ad90 <__multiply+0x144>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	f104 0c14 	add.w	ip, r4, #20
 800ad52:	46ae      	mov	lr, r5
 800ad54:	f04f 0a00 	mov.w	sl, #0
 800ad58:	f8bc b000 	ldrh.w	fp, [ip]
 800ad5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad60:	fb09 770b 	mla	r7, r9, fp, r7
 800ad64:	4457      	add	r7, sl
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad6c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad78:	f8be 3000 	ldrh.w	r3, [lr]
 800ad7c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad84:	4562      	cmp	r2, ip
 800ad86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad8a:	d8e5      	bhi.n	800ad58 <__multiply+0x10c>
 800ad8c:	9f01      	ldr	r7, [sp, #4]
 800ad8e:	51eb      	str	r3, [r5, r7]
 800ad90:	3504      	adds	r5, #4
 800ad92:	e799      	b.n	800acc8 <__multiply+0x7c>
 800ad94:	3e01      	subs	r6, #1
 800ad96:	e79b      	b.n	800acd0 <__multiply+0x84>
 800ad98:	0800ba28 	.word	0x0800ba28
 800ad9c:	0800ba39 	.word	0x0800ba39

0800ada0 <__pow5mult>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	4615      	mov	r5, r2
 800ada6:	f012 0203 	ands.w	r2, r2, #3
 800adaa:	4607      	mov	r7, r0
 800adac:	460e      	mov	r6, r1
 800adae:	d007      	beq.n	800adc0 <__pow5mult+0x20>
 800adb0:	4c25      	ldr	r4, [pc, #148]	@ (800ae48 <__pow5mult+0xa8>)
 800adb2:	3a01      	subs	r2, #1
 800adb4:	2300      	movs	r3, #0
 800adb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adba:	f7ff fe9f 	bl	800aafc <__multadd>
 800adbe:	4606      	mov	r6, r0
 800adc0:	10ad      	asrs	r5, r5, #2
 800adc2:	d03d      	beq.n	800ae40 <__pow5mult+0xa0>
 800adc4:	69fc      	ldr	r4, [r7, #28]
 800adc6:	b97c      	cbnz	r4, 800ade8 <__pow5mult+0x48>
 800adc8:	2010      	movs	r0, #16
 800adca:	f7ff fd7f 	bl	800a8cc <malloc>
 800adce:	4602      	mov	r2, r0
 800add0:	61f8      	str	r0, [r7, #28]
 800add2:	b928      	cbnz	r0, 800ade0 <__pow5mult+0x40>
 800add4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae4c <__pow5mult+0xac>)
 800add6:	481e      	ldr	r0, [pc, #120]	@ (800ae50 <__pow5mult+0xb0>)
 800add8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800addc:	f000 fc4e 	bl	800b67c <__assert_func>
 800ade0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ade4:	6004      	str	r4, [r0, #0]
 800ade6:	60c4      	str	r4, [r0, #12]
 800ade8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adf0:	b94c      	cbnz	r4, 800ae06 <__pow5mult+0x66>
 800adf2:	f240 2171 	movw	r1, #625	@ 0x271
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7ff ff12 	bl	800ac20 <__i2b>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae02:	4604      	mov	r4, r0
 800ae04:	6003      	str	r3, [r0, #0]
 800ae06:	f04f 0900 	mov.w	r9, #0
 800ae0a:	07eb      	lsls	r3, r5, #31
 800ae0c:	d50a      	bpl.n	800ae24 <__pow5mult+0x84>
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4622      	mov	r2, r4
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7ff ff1a 	bl	800ac4c <__multiply>
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	f7ff fe4b 	bl	800aab8 <_Bfree>
 800ae22:	4646      	mov	r6, r8
 800ae24:	106d      	asrs	r5, r5, #1
 800ae26:	d00b      	beq.n	800ae40 <__pow5mult+0xa0>
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	b938      	cbnz	r0, 800ae3c <__pow5mult+0x9c>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff ff0b 	bl	800ac4c <__multiply>
 800ae36:	6020      	str	r0, [r4, #0]
 800ae38:	f8c0 9000 	str.w	r9, [r0]
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	e7e4      	b.n	800ae0a <__pow5mult+0x6a>
 800ae40:	4630      	mov	r0, r6
 800ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae46:	bf00      	nop
 800ae48:	0800ba94 	.word	0x0800ba94
 800ae4c:	0800b9b9 	.word	0x0800b9b9
 800ae50:	0800ba39 	.word	0x0800ba39

0800ae54 <__lshift>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	460c      	mov	r4, r1
 800ae5a:	6849      	ldr	r1, [r1, #4]
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	4607      	mov	r7, r0
 800ae66:	4691      	mov	r9, r2
 800ae68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae6c:	f108 0601 	add.w	r6, r8, #1
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	db0b      	blt.n	800ae8c <__lshift+0x38>
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7ff fddf 	bl	800aa38 <_Balloc>
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	b948      	cbnz	r0, 800ae92 <__lshift+0x3e>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b28      	ldr	r3, [pc, #160]	@ (800af24 <__lshift+0xd0>)
 800ae82:	4829      	ldr	r0, [pc, #164]	@ (800af28 <__lshift+0xd4>)
 800ae84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae88:	f000 fbf8 	bl	800b67c <__assert_func>
 800ae8c:	3101      	adds	r1, #1
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	e7ee      	b.n	800ae70 <__lshift+0x1c>
 800ae92:	2300      	movs	r3, #0
 800ae94:	f100 0114 	add.w	r1, r0, #20
 800ae98:	f100 0210 	add.w	r2, r0, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	4553      	cmp	r3, sl
 800aea0:	db33      	blt.n	800af0a <__lshift+0xb6>
 800aea2:	6920      	ldr	r0, [r4, #16]
 800aea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aea8:	f104 0314 	add.w	r3, r4, #20
 800aeac:	f019 091f 	ands.w	r9, r9, #31
 800aeb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aeb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aeb8:	d02b      	beq.n	800af12 <__lshift+0xbe>
 800aeba:	f1c9 0e20 	rsb	lr, r9, #32
 800aebe:	468a      	mov	sl, r1
 800aec0:	2200      	movs	r2, #0
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	fa00 f009 	lsl.w	r0, r0, r9
 800aec8:	4310      	orrs	r0, r2
 800aeca:	f84a 0b04 	str.w	r0, [sl], #4
 800aece:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed2:	459c      	cmp	ip, r3
 800aed4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aed8:	d8f3      	bhi.n	800aec2 <__lshift+0x6e>
 800aeda:	ebac 0304 	sub.w	r3, ip, r4
 800aede:	3b15      	subs	r3, #21
 800aee0:	f023 0303 	bic.w	r3, r3, #3
 800aee4:	3304      	adds	r3, #4
 800aee6:	f104 0015 	add.w	r0, r4, #21
 800aeea:	4584      	cmp	ip, r0
 800aeec:	bf38      	it	cc
 800aeee:	2304      	movcc	r3, #4
 800aef0:	50ca      	str	r2, [r1, r3]
 800aef2:	b10a      	cbz	r2, 800aef8 <__lshift+0xa4>
 800aef4:	f108 0602 	add.w	r6, r8, #2
 800aef8:	3e01      	subs	r6, #1
 800aefa:	4638      	mov	r0, r7
 800aefc:	612e      	str	r6, [r5, #16]
 800aefe:	4621      	mov	r1, r4
 800af00:	f7ff fdda 	bl	800aab8 <_Bfree>
 800af04:	4628      	mov	r0, r5
 800af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af0e:	3301      	adds	r3, #1
 800af10:	e7c5      	b.n	800ae9e <__lshift+0x4a>
 800af12:	3904      	subs	r1, #4
 800af14:	f853 2b04 	ldr.w	r2, [r3], #4
 800af18:	f841 2f04 	str.w	r2, [r1, #4]!
 800af1c:	459c      	cmp	ip, r3
 800af1e:	d8f9      	bhi.n	800af14 <__lshift+0xc0>
 800af20:	e7ea      	b.n	800aef8 <__lshift+0xa4>
 800af22:	bf00      	nop
 800af24:	0800ba28 	.word	0x0800ba28
 800af28:	0800ba39 	.word	0x0800ba39

0800af2c <__mcmp>:
 800af2c:	690a      	ldr	r2, [r1, #16]
 800af2e:	4603      	mov	r3, r0
 800af30:	6900      	ldr	r0, [r0, #16]
 800af32:	1a80      	subs	r0, r0, r2
 800af34:	b530      	push	{r4, r5, lr}
 800af36:	d10e      	bne.n	800af56 <__mcmp+0x2a>
 800af38:	3314      	adds	r3, #20
 800af3a:	3114      	adds	r1, #20
 800af3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af4c:	4295      	cmp	r5, r2
 800af4e:	d003      	beq.n	800af58 <__mcmp+0x2c>
 800af50:	d205      	bcs.n	800af5e <__mcmp+0x32>
 800af52:	f04f 30ff 	mov.w	r0, #4294967295
 800af56:	bd30      	pop	{r4, r5, pc}
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d3f3      	bcc.n	800af44 <__mcmp+0x18>
 800af5c:	e7fb      	b.n	800af56 <__mcmp+0x2a>
 800af5e:	2001      	movs	r0, #1
 800af60:	e7f9      	b.n	800af56 <__mcmp+0x2a>
	...

0800af64 <__mdiff>:
 800af64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	4689      	mov	r9, r1
 800af6a:	4606      	mov	r6, r0
 800af6c:	4611      	mov	r1, r2
 800af6e:	4648      	mov	r0, r9
 800af70:	4614      	mov	r4, r2
 800af72:	f7ff ffdb 	bl	800af2c <__mcmp>
 800af76:	1e05      	subs	r5, r0, #0
 800af78:	d112      	bne.n	800afa0 <__mdiff+0x3c>
 800af7a:	4629      	mov	r1, r5
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff fd5b 	bl	800aa38 <_Balloc>
 800af82:	4602      	mov	r2, r0
 800af84:	b928      	cbnz	r0, 800af92 <__mdiff+0x2e>
 800af86:	4b3f      	ldr	r3, [pc, #252]	@ (800b084 <__mdiff+0x120>)
 800af88:	f240 2137 	movw	r1, #567	@ 0x237
 800af8c:	483e      	ldr	r0, [pc, #248]	@ (800b088 <__mdiff+0x124>)
 800af8e:	f000 fb75 	bl	800b67c <__assert_func>
 800af92:	2301      	movs	r3, #1
 800af94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af98:	4610      	mov	r0, r2
 800af9a:	b003      	add	sp, #12
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	bfbc      	itt	lt
 800afa2:	464b      	movlt	r3, r9
 800afa4:	46a1      	movlt	r9, r4
 800afa6:	4630      	mov	r0, r6
 800afa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afac:	bfba      	itte	lt
 800afae:	461c      	movlt	r4, r3
 800afb0:	2501      	movlt	r5, #1
 800afb2:	2500      	movge	r5, #0
 800afb4:	f7ff fd40 	bl	800aa38 <_Balloc>
 800afb8:	4602      	mov	r2, r0
 800afba:	b918      	cbnz	r0, 800afc4 <__mdiff+0x60>
 800afbc:	4b31      	ldr	r3, [pc, #196]	@ (800b084 <__mdiff+0x120>)
 800afbe:	f240 2145 	movw	r1, #581	@ 0x245
 800afc2:	e7e3      	b.n	800af8c <__mdiff+0x28>
 800afc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afc8:	6926      	ldr	r6, [r4, #16]
 800afca:	60c5      	str	r5, [r0, #12]
 800afcc:	f109 0310 	add.w	r3, r9, #16
 800afd0:	f109 0514 	add.w	r5, r9, #20
 800afd4:	f104 0e14 	add.w	lr, r4, #20
 800afd8:	f100 0b14 	add.w	fp, r0, #20
 800afdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afe0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	46d9      	mov	r9, fp
 800afe8:	f04f 0c00 	mov.w	ip, #0
 800afec:	9b01      	ldr	r3, [sp, #4]
 800afee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aff2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	fa1f f38a 	uxth.w	r3, sl
 800affc:	4619      	mov	r1, r3
 800affe:	b283      	uxth	r3, r0
 800b000:	1acb      	subs	r3, r1, r3
 800b002:	0c00      	lsrs	r0, r0, #16
 800b004:	4463      	add	r3, ip
 800b006:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b00a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b00e:	b29b      	uxth	r3, r3
 800b010:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b014:	4576      	cmp	r6, lr
 800b016:	f849 3b04 	str.w	r3, [r9], #4
 800b01a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b01e:	d8e5      	bhi.n	800afec <__mdiff+0x88>
 800b020:	1b33      	subs	r3, r6, r4
 800b022:	3b15      	subs	r3, #21
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	3415      	adds	r4, #21
 800b02a:	3304      	adds	r3, #4
 800b02c:	42a6      	cmp	r6, r4
 800b02e:	bf38      	it	cc
 800b030:	2304      	movcc	r3, #4
 800b032:	441d      	add	r5, r3
 800b034:	445b      	add	r3, fp
 800b036:	461e      	mov	r6, r3
 800b038:	462c      	mov	r4, r5
 800b03a:	4544      	cmp	r4, r8
 800b03c:	d30e      	bcc.n	800b05c <__mdiff+0xf8>
 800b03e:	f108 0103 	add.w	r1, r8, #3
 800b042:	1b49      	subs	r1, r1, r5
 800b044:	f021 0103 	bic.w	r1, r1, #3
 800b048:	3d03      	subs	r5, #3
 800b04a:	45a8      	cmp	r8, r5
 800b04c:	bf38      	it	cc
 800b04e:	2100      	movcc	r1, #0
 800b050:	440b      	add	r3, r1
 800b052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b056:	b191      	cbz	r1, 800b07e <__mdiff+0x11a>
 800b058:	6117      	str	r7, [r2, #16]
 800b05a:	e79d      	b.n	800af98 <__mdiff+0x34>
 800b05c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b060:	46e6      	mov	lr, ip
 800b062:	0c08      	lsrs	r0, r1, #16
 800b064:	fa1c fc81 	uxtah	ip, ip, r1
 800b068:	4471      	add	r1, lr
 800b06a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b06e:	b289      	uxth	r1, r1
 800b070:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b074:	f846 1b04 	str.w	r1, [r6], #4
 800b078:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b07c:	e7dd      	b.n	800b03a <__mdiff+0xd6>
 800b07e:	3f01      	subs	r7, #1
 800b080:	e7e7      	b.n	800b052 <__mdiff+0xee>
 800b082:	bf00      	nop
 800b084:	0800ba28 	.word	0x0800ba28
 800b088:	0800ba39 	.word	0x0800ba39

0800b08c <__d2b>:
 800b08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b090:	460f      	mov	r7, r1
 800b092:	2101      	movs	r1, #1
 800b094:	ec59 8b10 	vmov	r8, r9, d0
 800b098:	4616      	mov	r6, r2
 800b09a:	f7ff fccd 	bl	800aa38 <_Balloc>
 800b09e:	4604      	mov	r4, r0
 800b0a0:	b930      	cbnz	r0, 800b0b0 <__d2b+0x24>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	4b23      	ldr	r3, [pc, #140]	@ (800b134 <__d2b+0xa8>)
 800b0a6:	4824      	ldr	r0, [pc, #144]	@ (800b138 <__d2b+0xac>)
 800b0a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0ac:	f000 fae6 	bl	800b67c <__assert_func>
 800b0b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0b8:	b10d      	cbz	r5, 800b0be <__d2b+0x32>
 800b0ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	f1b8 0300 	subs.w	r3, r8, #0
 800b0c4:	d023      	beq.n	800b10e <__d2b+0x82>
 800b0c6:	4668      	mov	r0, sp
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	f7ff fd7c 	bl	800abc6 <__lo0bits>
 800b0ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0d2:	b1d0      	cbz	r0, 800b10a <__d2b+0x7e>
 800b0d4:	f1c0 0320 	rsb	r3, r0, #32
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	40c2      	lsrs	r2, r0
 800b0e0:	6163      	str	r3, [r4, #20]
 800b0e2:	9201      	str	r2, [sp, #4]
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	61a3      	str	r3, [r4, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bf0c      	ite	eq
 800b0ec:	2201      	moveq	r2, #1
 800b0ee:	2202      	movne	r2, #2
 800b0f0:	6122      	str	r2, [r4, #16]
 800b0f2:	b1a5      	cbz	r5, 800b11e <__d2b+0x92>
 800b0f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0f8:	4405      	add	r5, r0
 800b0fa:	603d      	str	r5, [r7, #0]
 800b0fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b100:	6030      	str	r0, [r6, #0]
 800b102:	4620      	mov	r0, r4
 800b104:	b003      	add	sp, #12
 800b106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10a:	6161      	str	r1, [r4, #20]
 800b10c:	e7ea      	b.n	800b0e4 <__d2b+0x58>
 800b10e:	a801      	add	r0, sp, #4
 800b110:	f7ff fd59 	bl	800abc6 <__lo0bits>
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	6163      	str	r3, [r4, #20]
 800b118:	3020      	adds	r0, #32
 800b11a:	2201      	movs	r2, #1
 800b11c:	e7e8      	b.n	800b0f0 <__d2b+0x64>
 800b11e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b126:	6038      	str	r0, [r7, #0]
 800b128:	6918      	ldr	r0, [r3, #16]
 800b12a:	f7ff fd2d 	bl	800ab88 <__hi0bits>
 800b12e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b132:	e7e5      	b.n	800b100 <__d2b+0x74>
 800b134:	0800ba28 	.word	0x0800ba28
 800b138:	0800ba39 	.word	0x0800ba39

0800b13c <__sfputc_r>:
 800b13c:	6893      	ldr	r3, [r2, #8]
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	b410      	push	{r4}
 800b144:	6093      	str	r3, [r2, #8]
 800b146:	da08      	bge.n	800b15a <__sfputc_r+0x1e>
 800b148:	6994      	ldr	r4, [r2, #24]
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	db01      	blt.n	800b152 <__sfputc_r+0x16>
 800b14e:	290a      	cmp	r1, #10
 800b150:	d103      	bne.n	800b15a <__sfputc_r+0x1e>
 800b152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b156:	f000 b9df 	b.w	800b518 <__swbuf_r>
 800b15a:	6813      	ldr	r3, [r2, #0]
 800b15c:	1c58      	adds	r0, r3, #1
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	7019      	strb	r1, [r3, #0]
 800b162:	4608      	mov	r0, r1
 800b164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <__sfputs_r>:
 800b16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	4614      	mov	r4, r2
 800b172:	18d5      	adds	r5, r2, r3
 800b174:	42ac      	cmp	r4, r5
 800b176:	d101      	bne.n	800b17c <__sfputs_r+0x12>
 800b178:	2000      	movs	r0, #0
 800b17a:	e007      	b.n	800b18c <__sfputs_r+0x22>
 800b17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b180:	463a      	mov	r2, r7
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffda 	bl	800b13c <__sfputc_r>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d1f3      	bne.n	800b174 <__sfputs_r+0xa>
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b190 <_vfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	460d      	mov	r5, r1
 800b196:	b09d      	sub	sp, #116	@ 0x74
 800b198:	4614      	mov	r4, r2
 800b19a:	4698      	mov	r8, r3
 800b19c:	4606      	mov	r6, r0
 800b19e:	b118      	cbz	r0, 800b1a8 <_vfiprintf_r+0x18>
 800b1a0:	6a03      	ldr	r3, [r0, #32]
 800b1a2:	b90b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x18>
 800b1a4:	f7fe fbee 	bl	8009984 <__sinit>
 800b1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	d405      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b6:	f7fe fcee 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	071b      	lsls	r3, r3, #28
 800b1be:	d501      	bpl.n	800b1c4 <_vfiprintf_r+0x34>
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	b99b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x5c>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f000 f9e4 	bl	800b594 <__swsetup_r>
 800b1cc:	b170      	cbz	r0, 800b1ec <_vfiprintf_r+0x5c>
 800b1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d0:	07dc      	lsls	r4, r3, #31
 800b1d2:	d504      	bpl.n	800b1de <_vfiprintf_r+0x4e>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	@ 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	0598      	lsls	r0, r3, #22
 800b1e2:	d4f7      	bmi.n	800b1d4 <_vfiprintf_r+0x44>
 800b1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e6:	f7fe fcd7 	bl	8009b98 <__retarget_lock_release_recursive>
 800b1ea:	e7f3      	b.n	800b1d4 <_vfiprintf_r+0x44>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fa:	2330      	movs	r3, #48	@ 0x30
 800b1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3ac <_vfiprintf_r+0x21c>
 800b200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b204:	f04f 0901 	mov.w	r9, #1
 800b208:	4623      	mov	r3, r4
 800b20a:	469a      	mov	sl, r3
 800b20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b210:	b10a      	cbz	r2, 800b216 <_vfiprintf_r+0x86>
 800b212:	2a25      	cmp	r2, #37	@ 0x25
 800b214:	d1f9      	bne.n	800b20a <_vfiprintf_r+0x7a>
 800b216:	ebba 0b04 	subs.w	fp, sl, r4
 800b21a:	d00b      	beq.n	800b234 <_vfiprintf_r+0xa4>
 800b21c:	465b      	mov	r3, fp
 800b21e:	4622      	mov	r2, r4
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff ffa1 	bl	800b16a <__sfputs_r>
 800b228:	3001      	adds	r0, #1
 800b22a:	f000 80a7 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	445a      	add	r2, fp
 800b232:	9209      	str	r2, [sp, #36]	@ 0x24
 800b234:	f89a 3000 	ldrb.w	r3, [sl]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 809f 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b23e:	2300      	movs	r3, #0
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b248:	f10a 0a01 	add.w	sl, sl, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b254:	931a      	str	r3, [sp, #104]	@ 0x68
 800b256:	4654      	mov	r4, sl
 800b258:	2205      	movs	r2, #5
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	4853      	ldr	r0, [pc, #332]	@ (800b3ac <_vfiprintf_r+0x21c>)
 800b260:	f7f4 ffc6 	bl	80001f0 <memchr>
 800b264:	9a04      	ldr	r2, [sp, #16]
 800b266:	b9d8      	cbnz	r0, 800b2a0 <_vfiprintf_r+0x110>
 800b268:	06d1      	lsls	r1, r2, #27
 800b26a:	bf44      	itt	mi
 800b26c:	2320      	movmi	r3, #32
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b272:	0713      	lsls	r3, r2, #28
 800b274:	bf44      	itt	mi
 800b276:	232b      	movmi	r3, #43	@ 0x2b
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b2a      	cmp	r3, #42	@ 0x2a
 800b282:	d015      	beq.n	800b2b0 <_vfiprintf_r+0x120>
 800b284:	9a07      	ldr	r2, [sp, #28]
 800b286:	4654      	mov	r4, sl
 800b288:	2000      	movs	r0, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	4621      	mov	r1, r4
 800b290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b294:	3b30      	subs	r3, #48	@ 0x30
 800b296:	2b09      	cmp	r3, #9
 800b298:	d94b      	bls.n	800b332 <_vfiprintf_r+0x1a2>
 800b29a:	b1b0      	cbz	r0, 800b2ca <_vfiprintf_r+0x13a>
 800b29c:	9207      	str	r2, [sp, #28]
 800b29e:	e014      	b.n	800b2ca <_vfiprintf_r+0x13a>
 800b2a0:	eba0 0308 	sub.w	r3, r0, r8
 800b2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	46a2      	mov	sl, r4
 800b2ae:	e7d2      	b.n	800b256 <_vfiprintf_r+0xc6>
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	1d19      	adds	r1, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	9103      	str	r1, [sp, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfbb      	ittet	lt
 800b2bc:	425b      	neglt	r3, r3
 800b2be:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c2:	9307      	strge	r3, [sp, #28]
 800b2c4:	9307      	strlt	r3, [sp, #28]
 800b2c6:	bfb8      	it	lt
 800b2c8:	9204      	strlt	r2, [sp, #16]
 800b2ca:	7823      	ldrb	r3, [r4, #0]
 800b2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ce:	d10a      	bne.n	800b2e6 <_vfiprintf_r+0x156>
 800b2d0:	7863      	ldrb	r3, [r4, #1]
 800b2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d4:	d132      	bne.n	800b33c <_vfiprintf_r+0x1ac>
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	9203      	str	r2, [sp, #12]
 800b2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3bc <_vfiprintf_r+0x22c>
 800b2ea:	7821      	ldrb	r1, [r4, #0]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f7f4 ff7e 	bl	80001f0 <memchr>
 800b2f4:	b138      	cbz	r0, 800b306 <_vfiprintf_r+0x176>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	eba0 000a 	sub.w	r0, r0, sl
 800b2fc:	2240      	movs	r2, #64	@ 0x40
 800b2fe:	4082      	lsls	r2, r0
 800b300:	4313      	orrs	r3, r2
 800b302:	3401      	adds	r4, #1
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4829      	ldr	r0, [pc, #164]	@ (800b3b0 <_vfiprintf_r+0x220>)
 800b30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b310:	2206      	movs	r2, #6
 800b312:	f7f4 ff6d 	bl	80001f0 <memchr>
 800b316:	2800      	cmp	r0, #0
 800b318:	d03f      	beq.n	800b39a <_vfiprintf_r+0x20a>
 800b31a:	4b26      	ldr	r3, [pc, #152]	@ (800b3b4 <_vfiprintf_r+0x224>)
 800b31c:	bb1b      	cbnz	r3, 800b366 <_vfiprintf_r+0x1d6>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	f023 0307 	bic.w	r3, r3, #7
 800b326:	3308      	adds	r3, #8
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32c:	443b      	add	r3, r7
 800b32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b330:	e76a      	b.n	800b208 <_vfiprintf_r+0x78>
 800b332:	fb0c 3202 	mla	r2, ip, r2, r3
 800b336:	460c      	mov	r4, r1
 800b338:	2001      	movs	r0, #1
 800b33a:	e7a8      	b.n	800b28e <_vfiprintf_r+0xfe>
 800b33c:	2300      	movs	r3, #0
 800b33e:	3401      	adds	r4, #1
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4620      	mov	r0, r4
 800b34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34e:	3a30      	subs	r2, #48	@ 0x30
 800b350:	2a09      	cmp	r2, #9
 800b352:	d903      	bls.n	800b35c <_vfiprintf_r+0x1cc>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0c6      	beq.n	800b2e6 <_vfiprintf_r+0x156>
 800b358:	9105      	str	r1, [sp, #20]
 800b35a:	e7c4      	b.n	800b2e6 <_vfiprintf_r+0x156>
 800b35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b360:	4604      	mov	r4, r0
 800b362:	2301      	movs	r3, #1
 800b364:	e7f0      	b.n	800b348 <_vfiprintf_r+0x1b8>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b36e:	a904      	add	r1, sp, #16
 800b370:	4630      	mov	r0, r6
 800b372:	f7fd fec3 	bl	80090fc <_printf_float>
 800b376:	4607      	mov	r7, r0
 800b378:	1c78      	adds	r0, r7, #1
 800b37a:	d1d6      	bne.n	800b32a <_vfiprintf_r+0x19a>
 800b37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d405      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	059a      	lsls	r2, r3, #22
 800b386:	d402      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38a:	f7fe fc05 	bl	8009b98 <__retarget_lock_release_recursive>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	065b      	lsls	r3, r3, #25
 800b392:	f53f af1f 	bmi.w	800b1d4 <_vfiprintf_r+0x44>
 800b396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b398:	e71e      	b.n	800b1d8 <_vfiprintf_r+0x48>
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b3a2:	a904      	add	r1, sp, #16
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7fe f941 	bl	800962c <_printf_i>
 800b3aa:	e7e4      	b.n	800b376 <_vfiprintf_r+0x1e6>
 800b3ac:	0800bb90 	.word	0x0800bb90
 800b3b0:	0800bb9a 	.word	0x0800bb9a
 800b3b4:	080090fd 	.word	0x080090fd
 800b3b8:	0800b16b 	.word	0x0800b16b
 800b3bc:	0800bb96 	.word	0x0800bb96

0800b3c0 <__sflush_r>:
 800b3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	0716      	lsls	r6, r2, #28
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	d454      	bmi.n	800b47a <__sflush_r+0xba>
 800b3d0:	684b      	ldr	r3, [r1, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dc02      	bgt.n	800b3dc <__sflush_r+0x1c>
 800b3d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	dd48      	ble.n	800b46e <__sflush_r+0xae>
 800b3dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	d045      	beq.n	800b46e <__sflush_r+0xae>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3e8:	682f      	ldr	r7, [r5, #0]
 800b3ea:	6a21      	ldr	r1, [r4, #32]
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	d030      	beq.n	800b452 <__sflush_r+0x92>
 800b3f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	0759      	lsls	r1, r3, #29
 800b3f6:	d505      	bpl.n	800b404 <__sflush_r+0x44>
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	1ad2      	subs	r2, r2, r3
 800b3fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3fe:	b10b      	cbz	r3, 800b404 <__sflush_r+0x44>
 800b400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b402:	1ad2      	subs	r2, r2, r3
 800b404:	2300      	movs	r3, #0
 800b406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b0      	blx	r6
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	d106      	bne.n	800b422 <__sflush_r+0x62>
 800b414:	6829      	ldr	r1, [r5, #0]
 800b416:	291d      	cmp	r1, #29
 800b418:	d82b      	bhi.n	800b472 <__sflush_r+0xb2>
 800b41a:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c4 <__sflush_r+0x104>)
 800b41c:	410a      	asrs	r2, r1
 800b41e:	07d6      	lsls	r6, r2, #31
 800b420:	d427      	bmi.n	800b472 <__sflush_r+0xb2>
 800b422:	2200      	movs	r2, #0
 800b424:	6062      	str	r2, [r4, #4]
 800b426:	04d9      	lsls	r1, r3, #19
 800b428:	6922      	ldr	r2, [r4, #16]
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	d504      	bpl.n	800b438 <__sflush_r+0x78>
 800b42e:	1c42      	adds	r2, r0, #1
 800b430:	d101      	bne.n	800b436 <__sflush_r+0x76>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	b903      	cbnz	r3, 800b438 <__sflush_r+0x78>
 800b436:	6560      	str	r0, [r4, #84]	@ 0x54
 800b438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b43a:	602f      	str	r7, [r5, #0]
 800b43c:	b1b9      	cbz	r1, 800b46e <__sflush_r+0xae>
 800b43e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b442:	4299      	cmp	r1, r3
 800b444:	d002      	beq.n	800b44c <__sflush_r+0x8c>
 800b446:	4628      	mov	r0, r5
 800b448:	f7ff f9f6 	bl	800a838 <_free_r>
 800b44c:	2300      	movs	r3, #0
 800b44e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b450:	e00d      	b.n	800b46e <__sflush_r+0xae>
 800b452:	2301      	movs	r3, #1
 800b454:	4628      	mov	r0, r5
 800b456:	47b0      	blx	r6
 800b458:	4602      	mov	r2, r0
 800b45a:	1c50      	adds	r0, r2, #1
 800b45c:	d1c9      	bne.n	800b3f2 <__sflush_r+0x32>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0c6      	beq.n	800b3f2 <__sflush_r+0x32>
 800b464:	2b1d      	cmp	r3, #29
 800b466:	d001      	beq.n	800b46c <__sflush_r+0xac>
 800b468:	2b16      	cmp	r3, #22
 800b46a:	d11e      	bne.n	800b4aa <__sflush_r+0xea>
 800b46c:	602f      	str	r7, [r5, #0]
 800b46e:	2000      	movs	r0, #0
 800b470:	e022      	b.n	800b4b8 <__sflush_r+0xf8>
 800b472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b476:	b21b      	sxth	r3, r3
 800b478:	e01b      	b.n	800b4b2 <__sflush_r+0xf2>
 800b47a:	690f      	ldr	r7, [r1, #16]
 800b47c:	2f00      	cmp	r7, #0
 800b47e:	d0f6      	beq.n	800b46e <__sflush_r+0xae>
 800b480:	0793      	lsls	r3, r2, #30
 800b482:	680e      	ldr	r6, [r1, #0]
 800b484:	bf08      	it	eq
 800b486:	694b      	ldreq	r3, [r1, #20]
 800b488:	600f      	str	r7, [r1, #0]
 800b48a:	bf18      	it	ne
 800b48c:	2300      	movne	r3, #0
 800b48e:	eba6 0807 	sub.w	r8, r6, r7
 800b492:	608b      	str	r3, [r1, #8]
 800b494:	f1b8 0f00 	cmp.w	r8, #0
 800b498:	dde9      	ble.n	800b46e <__sflush_r+0xae>
 800b49a:	6a21      	ldr	r1, [r4, #32]
 800b49c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b49e:	4643      	mov	r3, r8
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b0      	blx	r6
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	dc08      	bgt.n	800b4bc <__sflush_r+0xfc>
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4bc:	4407      	add	r7, r0
 800b4be:	eba8 0800 	sub.w	r8, r8, r0
 800b4c2:	e7e7      	b.n	800b494 <__sflush_r+0xd4>
 800b4c4:	dfbffffe 	.word	0xdfbffffe

0800b4c8 <_fflush_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	690b      	ldr	r3, [r1, #16]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	b913      	cbnz	r3, 800b4d8 <_fflush_r+0x10>
 800b4d2:	2500      	movs	r5, #0
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	b118      	cbz	r0, 800b4e2 <_fflush_r+0x1a>
 800b4da:	6a03      	ldr	r3, [r0, #32]
 800b4dc:	b90b      	cbnz	r3, 800b4e2 <_fflush_r+0x1a>
 800b4de:	f7fe fa51 	bl	8009984 <__sinit>
 800b4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0f3      	beq.n	800b4d2 <_fflush_r+0xa>
 800b4ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4ec:	07d0      	lsls	r0, r2, #31
 800b4ee:	d404      	bmi.n	800b4fa <_fflush_r+0x32>
 800b4f0:	0599      	lsls	r1, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <_fflush_r+0x32>
 800b4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4f6:	f7fe fb4e 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f7ff ff5f 	bl	800b3c0 <__sflush_r>
 800b502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b504:	07da      	lsls	r2, r3, #31
 800b506:	4605      	mov	r5, r0
 800b508:	d4e4      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	059b      	lsls	r3, r3, #22
 800b50e:	d4e1      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b512:	f7fe fb41 	bl	8009b98 <__retarget_lock_release_recursive>
 800b516:	e7dd      	b.n	800b4d4 <_fflush_r+0xc>

0800b518 <__swbuf_r>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	460e      	mov	r6, r1
 800b51c:	4614      	mov	r4, r2
 800b51e:	4605      	mov	r5, r0
 800b520:	b118      	cbz	r0, 800b52a <__swbuf_r+0x12>
 800b522:	6a03      	ldr	r3, [r0, #32]
 800b524:	b90b      	cbnz	r3, 800b52a <__swbuf_r+0x12>
 800b526:	f7fe fa2d 	bl	8009984 <__sinit>
 800b52a:	69a3      	ldr	r3, [r4, #24]
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	071a      	lsls	r2, r3, #28
 800b532:	d501      	bpl.n	800b538 <__swbuf_r+0x20>
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	b943      	cbnz	r3, 800b54a <__swbuf_r+0x32>
 800b538:	4621      	mov	r1, r4
 800b53a:	4628      	mov	r0, r5
 800b53c:	f000 f82a 	bl	800b594 <__swsetup_r>
 800b540:	b118      	cbz	r0, 800b54a <__swbuf_r+0x32>
 800b542:	f04f 37ff 	mov.w	r7, #4294967295
 800b546:	4638      	mov	r0, r7
 800b548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	1a98      	subs	r0, r3, r2
 800b550:	6963      	ldr	r3, [r4, #20]
 800b552:	b2f6      	uxtb	r6, r6
 800b554:	4283      	cmp	r3, r0
 800b556:	4637      	mov	r7, r6
 800b558:	dc05      	bgt.n	800b566 <__swbuf_r+0x4e>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7ff ffb3 	bl	800b4c8 <_fflush_r>
 800b562:	2800      	cmp	r0, #0
 800b564:	d1ed      	bne.n	800b542 <__swbuf_r+0x2a>
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	3b01      	subs	r3, #1
 800b56a:	60a3      	str	r3, [r4, #8]
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	6022      	str	r2, [r4, #0]
 800b572:	701e      	strb	r6, [r3, #0]
 800b574:	6962      	ldr	r2, [r4, #20]
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	429a      	cmp	r2, r3
 800b57a:	d004      	beq.n	800b586 <__swbuf_r+0x6e>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	07db      	lsls	r3, r3, #31
 800b580:	d5e1      	bpl.n	800b546 <__swbuf_r+0x2e>
 800b582:	2e0a      	cmp	r6, #10
 800b584:	d1df      	bne.n	800b546 <__swbuf_r+0x2e>
 800b586:	4621      	mov	r1, r4
 800b588:	4628      	mov	r0, r5
 800b58a:	f7ff ff9d 	bl	800b4c8 <_fflush_r>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d0d9      	beq.n	800b546 <__swbuf_r+0x2e>
 800b592:	e7d6      	b.n	800b542 <__swbuf_r+0x2a>

0800b594 <__swsetup_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4b29      	ldr	r3, [pc, #164]	@ (800b63c <__swsetup_r+0xa8>)
 800b598:	4605      	mov	r5, r0
 800b59a:	6818      	ldr	r0, [r3, #0]
 800b59c:	460c      	mov	r4, r1
 800b59e:	b118      	cbz	r0, 800b5a8 <__swsetup_r+0x14>
 800b5a0:	6a03      	ldr	r3, [r0, #32]
 800b5a2:	b90b      	cbnz	r3, 800b5a8 <__swsetup_r+0x14>
 800b5a4:	f7fe f9ee 	bl	8009984 <__sinit>
 800b5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ac:	0719      	lsls	r1, r3, #28
 800b5ae:	d422      	bmi.n	800b5f6 <__swsetup_r+0x62>
 800b5b0:	06da      	lsls	r2, r3, #27
 800b5b2:	d407      	bmi.n	800b5c4 <__swsetup_r+0x30>
 800b5b4:	2209      	movs	r2, #9
 800b5b6:	602a      	str	r2, [r5, #0]
 800b5b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c2:	e033      	b.n	800b62c <__swsetup_r+0x98>
 800b5c4:	0758      	lsls	r0, r3, #29
 800b5c6:	d512      	bpl.n	800b5ee <__swsetup_r+0x5a>
 800b5c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5ca:	b141      	cbz	r1, 800b5de <__swsetup_r+0x4a>
 800b5cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	d002      	beq.n	800b5da <__swsetup_r+0x46>
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff f92f 	bl	800a838 <_free_r>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f043 0308 	orr.w	r3, r3, #8
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	b94b      	cbnz	r3, 800b60e <__swsetup_r+0x7a>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b604:	d003      	beq.n	800b60e <__swsetup_r+0x7a>
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f8c1 	bl	800b790 <__smakebuf_r>
 800b60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b612:	f013 0201 	ands.w	r2, r3, #1
 800b616:	d00a      	beq.n	800b62e <__swsetup_r+0x9a>
 800b618:	2200      	movs	r2, #0
 800b61a:	60a2      	str	r2, [r4, #8]
 800b61c:	6962      	ldr	r2, [r4, #20]
 800b61e:	4252      	negs	r2, r2
 800b620:	61a2      	str	r2, [r4, #24]
 800b622:	6922      	ldr	r2, [r4, #16]
 800b624:	b942      	cbnz	r2, 800b638 <__swsetup_r+0xa4>
 800b626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b62a:	d1c5      	bne.n	800b5b8 <__swsetup_r+0x24>
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	0799      	lsls	r1, r3, #30
 800b630:	bf58      	it	pl
 800b632:	6962      	ldrpl	r2, [r4, #20]
 800b634:	60a2      	str	r2, [r4, #8]
 800b636:	e7f4      	b.n	800b622 <__swsetup_r+0x8e>
 800b638:	2000      	movs	r0, #0
 800b63a:	e7f7      	b.n	800b62c <__swsetup_r+0x98>
 800b63c:	20000194 	.word	0x20000194

0800b640 <_sbrk_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	@ (800b65c <_sbrk_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f5 ff2e 	bl	80014ac <_sbrk>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_sbrk_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_sbrk_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20000f84 	.word	0x20000f84

0800b660 <memcpy>:
 800b660:	440a      	add	r2, r1
 800b662:	4291      	cmp	r1, r2
 800b664:	f100 33ff 	add.w	r3, r0, #4294967295
 800b668:	d100      	bne.n	800b66c <memcpy+0xc>
 800b66a:	4770      	bx	lr
 800b66c:	b510      	push	{r4, lr}
 800b66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b672:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b676:	4291      	cmp	r1, r2
 800b678:	d1f9      	bne.n	800b66e <memcpy+0xe>
 800b67a:	bd10      	pop	{r4, pc}

0800b67c <__assert_func>:
 800b67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67e:	4614      	mov	r4, r2
 800b680:	461a      	mov	r2, r3
 800b682:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <__assert_func+0x2c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4605      	mov	r5, r0
 800b688:	68d8      	ldr	r0, [r3, #12]
 800b68a:	b954      	cbnz	r4, 800b6a2 <__assert_func+0x26>
 800b68c:	4b07      	ldr	r3, [pc, #28]	@ (800b6ac <__assert_func+0x30>)
 800b68e:	461c      	mov	r4, r3
 800b690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b694:	9100      	str	r1, [sp, #0]
 800b696:	462b      	mov	r3, r5
 800b698:	4905      	ldr	r1, [pc, #20]	@ (800b6b0 <__assert_func+0x34>)
 800b69a:	f000 f841 	bl	800b720 <fiprintf>
 800b69e:	f000 f8d5 	bl	800b84c <abort>
 800b6a2:	4b04      	ldr	r3, [pc, #16]	@ (800b6b4 <__assert_func+0x38>)
 800b6a4:	e7f4      	b.n	800b690 <__assert_func+0x14>
 800b6a6:	bf00      	nop
 800b6a8:	20000194 	.word	0x20000194
 800b6ac:	0800bbe6 	.word	0x0800bbe6
 800b6b0:	0800bbb8 	.word	0x0800bbb8
 800b6b4:	0800bbab 	.word	0x0800bbab

0800b6b8 <_calloc_r>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	fba1 5402 	umull	r5, r4, r1, r2
 800b6be:	b93c      	cbnz	r4, 800b6d0 <_calloc_r+0x18>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7ff f92d 	bl	800a920 <_malloc_r>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	b928      	cbnz	r0, 800b6d6 <_calloc_r+0x1e>
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	220c      	movs	r2, #12
 800b6d2:	6002      	str	r2, [r0, #0]
 800b6d4:	e7f9      	b.n	800b6ca <_calloc_r+0x12>
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4621      	mov	r1, r4
 800b6da:	f7fe f9de 	bl	8009a9a <memset>
 800b6de:	e7f5      	b.n	800b6cc <_calloc_r+0x14>

0800b6e0 <__ascii_mbtowc>:
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	b901      	cbnz	r1, 800b6e6 <__ascii_mbtowc+0x6>
 800b6e4:	a901      	add	r1, sp, #4
 800b6e6:	b142      	cbz	r2, 800b6fa <__ascii_mbtowc+0x1a>
 800b6e8:	b14b      	cbz	r3, 800b6fe <__ascii_mbtowc+0x1e>
 800b6ea:	7813      	ldrb	r3, [r2, #0]
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	1e10      	subs	r0, r2, #0
 800b6f2:	bf18      	it	ne
 800b6f4:	2001      	movne	r0, #1
 800b6f6:	b002      	add	sp, #8
 800b6f8:	4770      	bx	lr
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	e7fb      	b.n	800b6f6 <__ascii_mbtowc+0x16>
 800b6fe:	f06f 0001 	mvn.w	r0, #1
 800b702:	e7f8      	b.n	800b6f6 <__ascii_mbtowc+0x16>

0800b704 <__ascii_wctomb>:
 800b704:	4603      	mov	r3, r0
 800b706:	4608      	mov	r0, r1
 800b708:	b141      	cbz	r1, 800b71c <__ascii_wctomb+0x18>
 800b70a:	2aff      	cmp	r2, #255	@ 0xff
 800b70c:	d904      	bls.n	800b718 <__ascii_wctomb+0x14>
 800b70e:	228a      	movs	r2, #138	@ 0x8a
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	4770      	bx	lr
 800b718:	700a      	strb	r2, [r1, #0]
 800b71a:	2001      	movs	r0, #1
 800b71c:	4770      	bx	lr
	...

0800b720 <fiprintf>:
 800b720:	b40e      	push	{r1, r2, r3}
 800b722:	b503      	push	{r0, r1, lr}
 800b724:	4601      	mov	r1, r0
 800b726:	ab03      	add	r3, sp, #12
 800b728:	4805      	ldr	r0, [pc, #20]	@ (800b740 <fiprintf+0x20>)
 800b72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72e:	6800      	ldr	r0, [r0, #0]
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	f7ff fd2d 	bl	800b190 <_vfiprintf_r>
 800b736:	b002      	add	sp, #8
 800b738:	f85d eb04 	ldr.w	lr, [sp], #4
 800b73c:	b003      	add	sp, #12
 800b73e:	4770      	bx	lr
 800b740:	20000194 	.word	0x20000194

0800b744 <__swhatbuf_r>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	460c      	mov	r4, r1
 800b748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74c:	2900      	cmp	r1, #0
 800b74e:	b096      	sub	sp, #88	@ 0x58
 800b750:	4615      	mov	r5, r2
 800b752:	461e      	mov	r6, r3
 800b754:	da0d      	bge.n	800b772 <__swhatbuf_r+0x2e>
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b75c:	f04f 0100 	mov.w	r1, #0
 800b760:	bf14      	ite	ne
 800b762:	2340      	movne	r3, #64	@ 0x40
 800b764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b768:	2000      	movs	r0, #0
 800b76a:	6031      	str	r1, [r6, #0]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	b016      	add	sp, #88	@ 0x58
 800b770:	bd70      	pop	{r4, r5, r6, pc}
 800b772:	466a      	mov	r2, sp
 800b774:	f000 f848 	bl	800b808 <_fstat_r>
 800b778:	2800      	cmp	r0, #0
 800b77a:	dbec      	blt.n	800b756 <__swhatbuf_r+0x12>
 800b77c:	9901      	ldr	r1, [sp, #4]
 800b77e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b786:	4259      	negs	r1, r3
 800b788:	4159      	adcs	r1, r3
 800b78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b78e:	e7eb      	b.n	800b768 <__swhatbuf_r+0x24>

0800b790 <__smakebuf_r>:
 800b790:	898b      	ldrh	r3, [r1, #12]
 800b792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b794:	079d      	lsls	r5, r3, #30
 800b796:	4606      	mov	r6, r0
 800b798:	460c      	mov	r4, r1
 800b79a:	d507      	bpl.n	800b7ac <__smakebuf_r+0x1c>
 800b79c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	6163      	str	r3, [r4, #20]
 800b7a8:	b003      	add	sp, #12
 800b7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ac:	ab01      	add	r3, sp, #4
 800b7ae:	466a      	mov	r2, sp
 800b7b0:	f7ff ffc8 	bl	800b744 <__swhatbuf_r>
 800b7b4:	9f00      	ldr	r7, [sp, #0]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	4639      	mov	r1, r7
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f7ff f8b0 	bl	800a920 <_malloc_r>
 800b7c0:	b948      	cbnz	r0, 800b7d6 <__smakebuf_r+0x46>
 800b7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c6:	059a      	lsls	r2, r3, #22
 800b7c8:	d4ee      	bmi.n	800b7a8 <__smakebuf_r+0x18>
 800b7ca:	f023 0303 	bic.w	r3, r3, #3
 800b7ce:	f043 0302 	orr.w	r3, r3, #2
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	e7e2      	b.n	800b79c <__smakebuf_r+0xc>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	6020      	str	r0, [r4, #0]
 800b7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7e6:	b15b      	cbz	r3, 800b800 <__smakebuf_r+0x70>
 800b7e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f000 f81d 	bl	800b82c <_isatty_r>
 800b7f2:	b128      	cbz	r0, 800b800 <__smakebuf_r+0x70>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	f043 0301 	orr.w	r3, r3, #1
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	431d      	orrs	r5, r3
 800b804:	81a5      	strh	r5, [r4, #12]
 800b806:	e7cf      	b.n	800b7a8 <__smakebuf_r+0x18>

0800b808 <_fstat_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d07      	ldr	r5, [pc, #28]	@ (800b828 <_fstat_r+0x20>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	4611      	mov	r1, r2
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	f7f5 fe21 	bl	800145c <_fstat>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d102      	bne.n	800b824 <_fstat_r+0x1c>
 800b81e:	682b      	ldr	r3, [r5, #0]
 800b820:	b103      	cbz	r3, 800b824 <_fstat_r+0x1c>
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	bd38      	pop	{r3, r4, r5, pc}
 800b826:	bf00      	nop
 800b828:	20000f84 	.word	0x20000f84

0800b82c <_isatty_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	4d06      	ldr	r5, [pc, #24]	@ (800b848 <_isatty_r+0x1c>)
 800b830:	2300      	movs	r3, #0
 800b832:	4604      	mov	r4, r0
 800b834:	4608      	mov	r0, r1
 800b836:	602b      	str	r3, [r5, #0]
 800b838:	f7f5 fe20 	bl	800147c <_isatty>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d102      	bne.n	800b846 <_isatty_r+0x1a>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	b103      	cbz	r3, 800b846 <_isatty_r+0x1a>
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	20000f84 	.word	0x20000f84

0800b84c <abort>:
 800b84c:	b508      	push	{r3, lr}
 800b84e:	2006      	movs	r0, #6
 800b850:	f000 f82c 	bl	800b8ac <raise>
 800b854:	2001      	movs	r0, #1
 800b856:	f7f5 fdcd 	bl	80013f4 <_exit>

0800b85a <_raise_r>:
 800b85a:	291f      	cmp	r1, #31
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4605      	mov	r5, r0
 800b860:	460c      	mov	r4, r1
 800b862:	d904      	bls.n	800b86e <_raise_r+0x14>
 800b864:	2316      	movs	r3, #22
 800b866:	6003      	str	r3, [r0, #0]
 800b868:	f04f 30ff 	mov.w	r0, #4294967295
 800b86c:	bd38      	pop	{r3, r4, r5, pc}
 800b86e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b870:	b112      	cbz	r2, 800b878 <_raise_r+0x1e>
 800b872:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b876:	b94b      	cbnz	r3, 800b88c <_raise_r+0x32>
 800b878:	4628      	mov	r0, r5
 800b87a:	f000 f831 	bl	800b8e0 <_getpid_r>
 800b87e:	4622      	mov	r2, r4
 800b880:	4601      	mov	r1, r0
 800b882:	4628      	mov	r0, r5
 800b884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b888:	f000 b818 	b.w	800b8bc <_kill_r>
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d00a      	beq.n	800b8a6 <_raise_r+0x4c>
 800b890:	1c59      	adds	r1, r3, #1
 800b892:	d103      	bne.n	800b89c <_raise_r+0x42>
 800b894:	2316      	movs	r3, #22
 800b896:	6003      	str	r3, [r0, #0]
 800b898:	2001      	movs	r0, #1
 800b89a:	e7e7      	b.n	800b86c <_raise_r+0x12>
 800b89c:	2100      	movs	r1, #0
 800b89e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	4798      	blx	r3
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e7e0      	b.n	800b86c <_raise_r+0x12>
	...

0800b8ac <raise>:
 800b8ac:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <raise+0xc>)
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f7ff bfd2 	b.w	800b85a <_raise_r>
 800b8b6:	bf00      	nop
 800b8b8:	20000194 	.word	0x20000194

0800b8bc <_kill_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d07      	ldr	r5, [pc, #28]	@ (800b8dc <_kill_r+0x20>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	f7f5 fd83 	bl	80013d4 <_kill>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	d102      	bne.n	800b8d8 <_kill_r+0x1c>
 800b8d2:	682b      	ldr	r3, [r5, #0]
 800b8d4:	b103      	cbz	r3, 800b8d8 <_kill_r+0x1c>
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	bd38      	pop	{r3, r4, r5, pc}
 800b8da:	bf00      	nop
 800b8dc:	20000f84 	.word	0x20000f84

0800b8e0 <_getpid_r>:
 800b8e0:	f7f5 bd70 	b.w	80013c4 <_getpid>

0800b8e4 <_init>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	bf00      	nop
 800b8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ea:	bc08      	pop	{r3}
 800b8ec:	469e      	mov	lr, r3
 800b8ee:	4770      	bx	lr

0800b8f0 <_fini>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	bf00      	nop
 800b8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f6:	bc08      	pop	{r3}
 800b8f8:	469e      	mov	lr, r3
 800b8fa:	4770      	bx	lr
